// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class tagSrcImageInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagSrcImageInfo> {
} _tagSrcImageInfo_default_instance_;
class tagServiceRegisterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagServiceRegister> {
} _tagServiceRegister_default_instance_;
class tagTaskReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagTaskReport> {
} _tagTaskReport_default_instance_;
class tagUIPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagUIPoint> {
} _tagUIPoint_default_instance_;
class tagUIUnitActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagUIUnitAction> {
} _tagUIUnitAction_default_instance_;
class tagUIActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagUIAction> {
} _tagUIAction_default_instance_;
class tagUIAPIStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagUIAPIState> {
} _tagUIAPIState_default_instance_;
class tagGameActionPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameActionPoint> {
} _tagGameActionPoint_default_instance_;
class tagGameActionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagGameActionResult> {
} _tagGameActionResult_default_instance_;
class tagAIActionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagAIAction> {
} _tagAIAction_default_instance_;
class tagServiceStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagServiceState> {
} _tagServiceState_default_instance_;
class tagChangeGameStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagChangeGameState> {
} _tagChangeGameState_default_instance_;
class tagAgentStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagAgentState> {
} _tagAgentState_default_instance_;
class tagIMTrainStateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagIMTrainState> {
} _tagIMTrainState_default_instance_;
class tagRestartResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagRestartResult> {
} _tagRestartResult_default_instance_;
class tagNewTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagNewTask> {
} _tagNewTask_default_instance_;
class tagTestIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagTestID> {
} _tagTestID_default_instance_;
class tagMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagMessage> {
} _tagMessage_default_instance_;

namespace protobuf_common_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[10];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, uframeseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, nwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, nheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, byimagedata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, udeviceindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagSrcImageInfo, strjsondata_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagServiceRegister, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagServiceRegister, eregistertype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagServiceRegister, eservicetype_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTaskReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTaskReport, etaskstatus_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIPoint, nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIPoint, ny_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, strtext_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, euiaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, stclickpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, stdragpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, nduringtimems_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIUnitAction, nsleeptimems_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAction, egamestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAction, stsrcimageinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAction, stuiunitaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAction, nuiid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, euistate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, stuiimage_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, stuiaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, egamestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagUIAPIState, escreenori_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionPoint, nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionPoint, ny_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, egameactiontype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, stgameactionpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, ncontact_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, nduringtime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, nwaittime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagGameActionResult, nframeseq_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAIAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAIAction, nframeseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAIAction, byaiactionbuff_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagServiceState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagServiceState, nservicestate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChangeGameState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagChangeGameState, egamestate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAgentState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAgentState, eagentstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagAgentState, stragentstate_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagIMTrainState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagIMTrainState, nprogress_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRestartResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagRestartResult, erestartresult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagNewTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagNewTask, strtaskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagNewTask, ngameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagNewTask, nsceneid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagNewTask, strgameversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTestID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTestID, strtestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTestID, ngameid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagTestID, strgameversion_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, emsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stserviceregister_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, sttaskreport_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stsrcimageinfo_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stuiapistate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stuiaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, staiaction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stservicestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stchangegamestate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stagentstate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, strestartresult_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stnewtask_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, sttestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stpbagentmsg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagMessage, stimtrainstate_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(tagSrcImageInfo)},
  { 10, -1, sizeof(tagServiceRegister)},
  { 16, -1, sizeof(tagTaskReport)},
  { 21, -1, sizeof(tagUIPoint)},
  { 27, -1, sizeof(tagUIUnitAction)},
  { 37, -1, sizeof(tagUIAction)},
  { 45, -1, sizeof(tagUIAPIState)},
  { 54, -1, sizeof(tagGameActionPoint)},
  { 60, -1, sizeof(tagGameActionResult)},
  { 70, -1, sizeof(tagAIAction)},
  { 76, -1, sizeof(tagServiceState)},
  { 81, -1, sizeof(tagChangeGameState)},
  { 86, -1, sizeof(tagAgentState)},
  { 92, -1, sizeof(tagIMTrainState)},
  { 97, -1, sizeof(tagRestartResult)},
  { 102, -1, sizeof(tagNewTask)},
  { 110, -1, sizeof(tagTestID)},
  { 117, -1, sizeof(tagMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagSrcImageInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagServiceRegister_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagTaskReport_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagUIPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagUIUnitAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagUIAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagUIAPIState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameActionPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagGameActionResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagAIAction_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagServiceState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagChangeGameState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagAgentState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagIMTrainState_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagRestartResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagNewTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagTestID_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagMessage_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

}  // namespace

void TableStruct::Shutdown() {
  _tagSrcImageInfo_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _tagServiceRegister_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tagTaskReport_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _tagUIPoint_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _tagUIUnitAction_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _tagUIAction_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _tagUIAPIState_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _tagGameActionPoint_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _tagGameActionResult_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _tagAIAction_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _tagServiceState_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _tagChangeGameState_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _tagAgentState_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _tagIMTrainState_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
  _tagRestartResult_default_instance_.Shutdown();
  delete file_level_metadata[14].reflection;
  _tagNewTask_default_instance_.Shutdown();
  delete file_level_metadata[15].reflection;
  _tagTestID_default_instance_.Shutdown();
  delete file_level_metadata[16].reflection;
  _tagMessage_default_instance_.Shutdown();
  delete file_level_metadata[17].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::protobuf_gameregProtoc_2eproto::InitDefaults();
  _tagSrcImageInfo_default_instance_.DefaultConstruct();
  _tagServiceRegister_default_instance_.DefaultConstruct();
  _tagTaskReport_default_instance_.DefaultConstruct();
  _tagUIPoint_default_instance_.DefaultConstruct();
  _tagUIUnitAction_default_instance_.DefaultConstruct();
  _tagUIAction_default_instance_.DefaultConstruct();
  _tagUIAPIState_default_instance_.DefaultConstruct();
  _tagGameActionPoint_default_instance_.DefaultConstruct();
  _tagGameActionResult_default_instance_.DefaultConstruct();
  _tagAIAction_default_instance_.DefaultConstruct();
  _tagServiceState_default_instance_.DefaultConstruct();
  _tagChangeGameState_default_instance_.DefaultConstruct();
  _tagAgentState_default_instance_.DefaultConstruct();
  _tagIMTrainState_default_instance_.DefaultConstruct();
  _tagRestartResult_default_instance_.DefaultConstruct();
  _tagNewTask_default_instance_.DefaultConstruct();
  _tagTestID_default_instance_.DefaultConstruct();
  _tagMessage_default_instance_.DefaultConstruct();
  _tagUIUnitAction_default_instance_.get_mutable()->stclickpoint_ = const_cast< ::tagUIPoint*>(
      ::tagUIPoint::internal_default_instance());
  _tagUIAction_default_instance_.get_mutable()->stsrcimageinfo_ = const_cast< ::tagSrcImageInfo*>(
      ::tagSrcImageInfo::internal_default_instance());
  _tagUIAPIState_default_instance_.get_mutable()->stuiimage_ = const_cast< ::tagSrcImageInfo*>(
      ::tagSrcImageInfo::internal_default_instance());
  _tagUIAPIState_default_instance_.get_mutable()->stuiaction_ = const_cast< ::tagUIAction*>(
      ::tagUIAction::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stserviceregister_ = const_cast< ::tagServiceRegister*>(
      ::tagServiceRegister::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->sttaskreport_ = const_cast< ::tagTaskReport*>(
      ::tagTaskReport::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stsrcimageinfo_ = const_cast< ::tagSrcImageInfo*>(
      ::tagSrcImageInfo::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stuiapistate_ = const_cast< ::tagUIAPIState*>(
      ::tagUIAPIState::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stuiaction_ = const_cast< ::tagUIAction*>(
      ::tagUIAction::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->staiaction_ = const_cast< ::tagAIAction*>(
      ::tagAIAction::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stservicestate_ = const_cast< ::tagServiceState*>(
      ::tagServiceState::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stchangegamestate_ = const_cast< ::tagChangeGameState*>(
      ::tagChangeGameState::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stagentstate_ = const_cast< ::tagAgentState*>(
      ::tagAgentState::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->strestartresult_ = const_cast< ::tagRestartResult*>(
      ::tagRestartResult::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stnewtask_ = const_cast< ::tagNewTask*>(
      ::tagNewTask::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->sttestid_ = const_cast< ::tagTestID*>(
      ::tagTestID::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stpbagentmsg_ = const_cast< ::tagPBAgentMsg*>(
      ::tagPBAgentMsg::internal_default_instance());
  _tagMessage_default_instance_.get_mutable()->stimtrainstate_ = const_cast< ::tagIMTrainState*>(
      ::tagIMTrainState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\014common.proto\032\023gameregProtoc.proto\"\205\001\n\017"
      "tagSrcImageInfo\022\021\n\tuFrameSeq\030\001 \001(\006\022\016\n\006nW"
      "idth\030\002 \001(\005\022\017\n\007nHeight\030\003 \001(\005\022\023\n\013byImageDa"
      "ta\030\004 \001(\014\022\024\n\014uDeviceIndex\030\005 \001(\006\022\023\n\013strJso"
      "nData\030\006 \001(\t\"k\n\022tagServiceRegister\022,\n\reRe"
      "gisterType\030\001 \001(\0162\025.ESERVICEREGISTERENUM\022"
      "\'\n\014eServiceType\030\002 \001(\0162\021.ESERVICETYPEENUM"
      "\"6\n\rtagTaskReport\022%\n\013eTaskStatus\030\001 \001(\0162\020"
      ".ETASKSTATUSENUM\"$\n\ntagUIPoint\022\n\n\002nX\030\001 \001"
      "(\005\022\n\n\002nY\030\002 \001(\005\"\273\001\n\017tagUIUnitAction\022\017\n\007st"
      "rText\030\001 \001(\t\022$\n\teUIAction\030\002 \001(\0162\021.EUIAPIA"
      "CTIONENUM\022!\n\014stClickPoint\030\003 \001(\0132\013.tagUIP"
      "oint\022!\n\014stDragPoints\030\004 \003(\0132\013.tagUIPoint\022"
      "\025\n\rnDuringTimeMs\030\005 \001(\005\022\024\n\014nSleepTimeMs\030\006"
      " \001(\005\"\224\001\n\013tagUIAction\022\"\n\neGameState\030\001 \001(\016"
      "2\016.GAMESTATEENUM\022(\n\016stSrcImageInfo\030\002 \001(\013"
      "2\020.tagSrcImageInfo\022(\n\016stUIUnitAction\030\003 \003"
      "(\0132\020.tagUIUnitAction\022\r\n\005nUIID\030\004 \001(\005\"\303\001\n\r"
      "tagUIAPIState\022\"\n\010eUIState\030\001 \001(\0162\020.EUIAPI"
      "STATEENUM\022#\n\tstUIImage\030\002 \001(\0132\020.tagSrcIma"
      "geInfo\022 \n\nstUIAction\030\003 \001(\0132\014.tagUIAction"
      "\022\"\n\neGameState\030\004 \001(\0162\016.GAMESTATEENUM\022#\n\n"
      "eScreenOri\030\005 \001(\0162\017.ESCREENORIENUM\",\n\022tag"
      "GameActionPoint\022\n\n\002nX\030\001 \001(\005\022\n\n\002nY\030\002 \001(\005\""
      "\275\001\n\023tagGameActionResult\022)\n\017eGameActionTy"
      "pe\030\001 \001(\0162\020.EGAMEACTIONENUM\022.\n\021stGameActi"
      "onPoint\030\002 \003(\0132\023.tagGameActionPoint\022\020\n\010nC"
      "ontact\030\003 \001(\005\022\023\n\013nDuringTime\030\004 \001(\005\022\021\n\tnWa"
      "itTime\030\005 \001(\005\022\021\n\tnFrameSeq\030\006 \001(\020\"8\n\013tagAI"
      "Action\022\021\n\tnFrameSeq\030\001 \001(\020\022\026\n\016byAIActionB"
      "uff\030\002 \001(\014\"(\n\017tagServiceState\022\025\n\rnService"
      "State\030\001 \001(\005\"8\n\022tagChangeGameState\022\"\n\neGa"
      "meState\030\001 \001(\0162\016.GAMESTATEENUM\";\n\rtagAgen"
      "tState\022\023\n\013eAgentState\030\001 \001(\005\022\025\n\rstrAgentS"
      "tate\030\002 \001(\t\"$\n\017tagIMTrainState\022\021\n\tnProgre"
      "ss\030\001 \001(\005\"\?\n\020tagRestartResult\022+\n\016eRestart"
      "Result\030\001 \001(\0162\023.ERESTARTRESULTENUM\"Z\n\ntag"
      "NewTask\022\021\n\tstrTaskID\030\001 \001(\t\022\017\n\007nGameID\030\002 "
      "\001(\005\022\020\n\010nSceneID\030\003 \001(\005\022\026\n\016strGameVersion\030"
      "\004 \001(\t\"G\n\ttagTestID\022\021\n\tstrTestID\030\001 \001(\t\022\017\n"
      "\007nGameID\030\002 \001(\005\022\026\n\016strGameVersion\030\003 \001(\t\"\315"
      "\004\n\ntagMessage\022\033\n\006eMsgID\030\001 \001(\0162\013.EMSGIDEN"
      "UM\022.\n\021stServiceRegister\030\002 \001(\0132\023.tagServi"
      "ceRegister\022$\n\014stTaskReport\030\003 \001(\0132\016.tagTa"
      "skReport\022(\n\016stSrcImageInfo\030\004 \001(\0132\020.tagSr"
      "cImageInfo\022$\n\014stUIAPIState\030\t \001(\0132\016.tagUI"
      "APIState\022 \n\nstUIAction\030\n \001(\0132\014.tagUIActi"
      "on\022 \n\nstAIAction\030\014 \001(\0132\014.tagAIAction\022(\n\016"
      "stServiceState\030\r \001(\0132\020.tagServiceState\022."
      "\n\021stChangeGameState\030\016 \001(\0132\023.tagChangeGam"
      "eState\022$\n\014stAgentState\030\017 \001(\0132\016.tagAgentS"
      "tate\022*\n\017stRestartResult\030\020 \001(\0132\021.tagResta"
      "rtResult\022\036\n\tstNewTask\030\021 \001(\0132\013.tagNewTask"
      "\022\034\n\010stTestID\030\022 \001(\0132\n.tagTestID\022$\n\014stPBAg"
      "entMsg\030\023 \001(\0132\016.tagPBAgentMsg\022(\n\016stIMTrai"
      "nState\030\024 \001(\0132\020.tagIMTrainState*\322\003\n\nEMSGI"
      "DENUM\022\014\n\010MSG_NONE\020\000\022\027\n\022MSG_SRC_IMAGE_INF"
      "O\020\220N\022\031\n\024MSG_SERVICE_REGISTER\020\221N\022\024\n\017MSG_T"
      "ASK_REPORT\020\222N\022\026\n\021MSG_SERVICE_STATE\020\223N\022\032\n"
      "\025MSG_CHANGE_GAME_STATE\020\224N\022\024\n\017MSG_PAUSE_A"
      "GENT\020\225N\022\026\n\021MSG_RESTORE_AGENT\020\226N\022\020\n\013MSG_R"
      "ESTART\020\227N\022\021\n\014MSG_NEW_TASK\020\230N\022\020\n\013MSG_TEST"
      "_ID\020\231N\022\025\n\020MSG_GAMEREG_INFO\020\232N\022\023\n\rMSG_AI_"
      "ACTION\020\301\270\002\022\025\n\017MSG_AGENT_STATE\020\302\270\002\022\030\n\022MSG"
      "_RESTART_RESULT\020\303\270\002\022\027\n\021MSG_UI_GAME_START"
      "\020\304\270\002\022\026\n\020MSG_UI_GAME_OVER\020\305\270\002\022\030\n\022MSG_IM_T"
      "RAIN_STATE\020\306\270\002\022\026\n\020MSG_UI_STATE_IMG\020\201\361\004\022\023"
      "\n\rMSG_UI_ACTION\020\202\361\004*s\n\020ESERVICETYPEENUM\022"
      "\026\n\022PB_SERVICE_TYPE_UI\020\000\022\026\n\022PB_SERVICE_TY"
      "PE_AI\020\001\022\027\n\023PB_SERVICE_TYPE_REG\020\002\022\026\n\022PB_S"
      "ERVICE_TYPE_MC\020\003*J\n\024ESERVICEREGISTERENUM"
      "\022\027\n\023PB_SERVICE_REGISTER\020\000\022\031\n\025PB_SERVICE_"
      "UNREGISTER\020\001*E\n\017ETASKSTATUSENUM\022\030\n\024PB_TA"
      "SK_INIT_SUCCESS\020\000\022\030\n\024PB_TASK_INIT_FAILUR"
      "E\020\001*r\n\rGAMESTATEENUM\022\021\n\rPB_STATE_NONE\020\000\022"
      "\017\n\013PB_STATE_UI\020\001\022\022\n\016PB_STATE_START\020\002\022\021\n\r"
      "PB_STATE_OVER\020\003\022\026\n\022PB_STATE_MATCH_WIN\020\004*"
      "@\n\017EUIAPISTATEENUM\022\026\n\022PB_UI_STATE_NORMAL"
      "\020\000\022\025\n\021PB_UI_STATE_STUCK\020\001*o\n\020EUIAPIACTIO"
      "NENUM\022\025\n\021PB_UI_ACTION_NONE\020\000\022\026\n\022PB_UI_AC"
      "TION_CLICK\020\001\022\025\n\021PB_UI_ACTION_DRAG\020\002\022\025\n\021P"
      "B_UI_ACTION_TEXT\020\003*I\n\016ESCREENORIENUM\022\033\n\027"
      "PB_SCREEN_ORI_LANDSCAPE\020\000\022\032\n\026PB_SCREEN_O"
      "RI_PORTRAIT\020\001*\245\002\n\017EGAMEACTIONENUM\022\027\n\023PB_"
      "GAME_ACTION_NONE\020\000\022\030\n\024PB_GAME_ACTION_CLI"
      "CK\020\001\022\030\n\024PB_GAME_ACTION_SWIPE\020\002\022\027\n\023PB_GAM"
      "E_ACTION_MOVE\020\003\022\034\n\030PB_GAME_ACTION_PRESSD"
      "OWN\020\004\022\032\n\026PB_GAME_ACTION_PRESSUP\020\005\022\034\n\030PB_"
      "GAME_ACTION_LONGCLICK\020\006\022\030\n\024PB_GAME_ACTIO"
      "N_RESET\020\007\022\034\n\030PB_GAME_ACTION_SWIPEDOWN\020\010\022"
      "\034\n\030PB_GAME_ACTION_SWIPEMOVE\020\t*R\n\022ERESTAR"
      "TRESULTENUM\022\035\n\031PB_RESTART_RESULT_SUCCESS"
      "\020\000\022\035\n\031PB_RESTART_RESULT_FAILURE\020\001b\006proto"
      "3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 3721);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ::protobuf_gameregProtoc_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_common_2eproto

const ::google::protobuf::EnumDescriptor* EMSGIDENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[0];
}
bool EMSGIDENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 10000:
    case 10001:
    case 10002:
    case 10003:
    case 10004:
    case 10005:
    case 10006:
    case 10007:
    case 10008:
    case 10009:
    case 10010:
    case 40001:
    case 40002:
    case 40003:
    case 40004:
    case 40005:
    case 40006:
    case 80001:
    case 80002:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESERVICETYPEENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[1];
}
bool ESERVICETYPEENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESERVICEREGISTERENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[2];
}
bool ESERVICEREGISTERENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ETASKSTATUSENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[3];
}
bool ETASKSTATUSENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* GAMESTATEENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[4];
}
bool GAMESTATEENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUIAPISTATEENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[5];
}
bool EUIAPISTATEENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EUIAPIACTIONENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[6];
}
bool EUIAPIACTIONENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ESCREENORIENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[7];
}
bool ESCREENORIENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EGAMEACTIONENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[8];
}
bool EGAMEACTIONENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ERESTARTRESULTENUM_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[9];
}
bool ERESTARTRESULTENUM_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagSrcImageInfo::kUFrameSeqFieldNumber;
const int tagSrcImageInfo::kNWidthFieldNumber;
const int tagSrcImageInfo::kNHeightFieldNumber;
const int tagSrcImageInfo::kByImageDataFieldNumber;
const int tagSrcImageInfo::kUDeviceIndexFieldNumber;
const int tagSrcImageInfo::kStrJsonDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagSrcImageInfo::tagSrcImageInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagSrcImageInfo)
}
tagSrcImageInfo::tagSrcImageInfo(const tagSrcImageInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byimagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.byimagedata().size() > 0) {
    byimagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimagedata_);
  }
  strjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strjsondata().size() > 0) {
    strjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strjsondata_);
  }
  ::memcpy(&uframeseq_, &from.uframeseq_,
    reinterpret_cast<char*>(&udeviceindex_) -
    reinterpret_cast<char*>(&uframeseq_) + sizeof(udeviceindex_));
  // @@protoc_insertion_point(copy_constructor:tagSrcImageInfo)
}

void tagSrcImageInfo::SharedCtor() {
  byimagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uframeseq_, 0, reinterpret_cast<char*>(&udeviceindex_) -
    reinterpret_cast<char*>(&uframeseq_) + sizeof(udeviceindex_));
  _cached_size_ = 0;
}

tagSrcImageInfo::~tagSrcImageInfo() {
  // @@protoc_insertion_point(destructor:tagSrcImageInfo)
  SharedDtor();
}

void tagSrcImageInfo::SharedDtor() {
  byimagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagSrcImageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagSrcImageInfo::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[0].descriptor;
}

const tagSrcImageInfo& tagSrcImageInfo::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagSrcImageInfo* tagSrcImageInfo::New(::google::protobuf::Arena* arena) const {
  tagSrcImageInfo* n = new tagSrcImageInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagSrcImageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:tagSrcImageInfo)
  byimagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&uframeseq_, 0, reinterpret_cast<char*>(&udeviceindex_) -
    reinterpret_cast<char*>(&uframeseq_) + sizeof(udeviceindex_));
}

bool tagSrcImageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagSrcImageInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 uFrameSeq = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &uframeseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWidth = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nHeight = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byImageData = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byimagedata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 uDeviceIndex = 5;
      case 5: {
        if (tag == 41u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &udeviceindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strJsonData = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strjsondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strjsondata().data(), this->strjsondata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagSrcImageInfo.strJsonData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagSrcImageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagSrcImageInfo)
  return false;
#undef DO_
}

void tagSrcImageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagSrcImageInfo)
  // fixed64 uFrameSeq = 1;
  if (this->uframeseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->uframeseq(), output);
  }

  // int32 nWidth = 2;
  if (this->nwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nwidth(), output);
  }

  // int32 nHeight = 3;
  if (this->nheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nheight(), output);
  }

  // bytes byImageData = 4;
  if (this->byimagedata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->byimagedata(), output);
  }

  // fixed64 uDeviceIndex = 5;
  if (this->udeviceindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(5, this->udeviceindex(), output);
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strjsondata().data(), this->strjsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagSrcImageInfo.strJsonData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strjsondata(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagSrcImageInfo)
}

::google::protobuf::uint8* tagSrcImageInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagSrcImageInfo)
  // fixed64 uFrameSeq = 1;
  if (this->uframeseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(1, this->uframeseq(), target);
  }

  // int32 nWidth = 2;
  if (this->nwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nwidth(), target);
  }

  // int32 nHeight = 3;
  if (this->nheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nheight(), target);
  }

  // bytes byImageData = 4;
  if (this->byimagedata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->byimagedata(), target);
  }

  // fixed64 uDeviceIndex = 5;
  if (this->udeviceindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFixed64ToArray(5, this->udeviceindex(), target);
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strjsondata().data(), this->strjsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagSrcImageInfo.strJsonData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strjsondata(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagSrcImageInfo)
  return target;
}

size_t tagSrcImageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagSrcImageInfo)
  size_t total_size = 0;

  // bytes byImageData = 4;
  if (this->byimagedata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byimagedata());
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strjsondata());
  }

  // fixed64 uFrameSeq = 1;
  if (this->uframeseq() != 0) {
    total_size += 1 + 8;
  }

  // int32 nWidth = 2;
  if (this->nwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nwidth());
  }

  // int32 nHeight = 3;
  if (this->nheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nheight());
  }

  // fixed64 uDeviceIndex = 5;
  if (this->udeviceindex() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagSrcImageInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagSrcImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const tagSrcImageInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagSrcImageInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagSrcImageInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagSrcImageInfo)
    MergeFrom(*source);
  }
}

void tagSrcImageInfo::MergeFrom(const tagSrcImageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagSrcImageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.byimagedata().size() > 0) {

    byimagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimagedata_);
  }
  if (from.strjsondata().size() > 0) {

    strjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strjsondata_);
  }
  if (from.uframeseq() != 0) {
    set_uframeseq(from.uframeseq());
  }
  if (from.nwidth() != 0) {
    set_nwidth(from.nwidth());
  }
  if (from.nheight() != 0) {
    set_nheight(from.nheight());
  }
  if (from.udeviceindex() != 0) {
    set_udeviceindex(from.udeviceindex());
  }
}

void tagSrcImageInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagSrcImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagSrcImageInfo::CopyFrom(const tagSrcImageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagSrcImageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagSrcImageInfo::IsInitialized() const {
  return true;
}

void tagSrcImageInfo::Swap(tagSrcImageInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagSrcImageInfo::InternalSwap(tagSrcImageInfo* other) {
  byimagedata_.Swap(&other->byimagedata_);
  strjsondata_.Swap(&other->strjsondata_);
  std::swap(uframeseq_, other->uframeseq_);
  std::swap(nwidth_, other->nwidth_);
  std::swap(nheight_, other->nheight_);
  std::swap(udeviceindex_, other->udeviceindex_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagSrcImageInfo::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagSrcImageInfo

// fixed64 uFrameSeq = 1;
void tagSrcImageInfo::clear_uframeseq() {
  uframeseq_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagSrcImageInfo::uframeseq() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.uFrameSeq)
  return uframeseq_;
}
void tagSrcImageInfo::set_uframeseq(::google::protobuf::uint64 value) {
  
  uframeseq_ = value;
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.uFrameSeq)
}

// int32 nWidth = 2;
void tagSrcImageInfo::clear_nwidth() {
  nwidth_ = 0;
}
::google::protobuf::int32 tagSrcImageInfo::nwidth() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.nWidth)
  return nwidth_;
}
void tagSrcImageInfo::set_nwidth(::google::protobuf::int32 value) {
  
  nwidth_ = value;
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.nWidth)
}

// int32 nHeight = 3;
void tagSrcImageInfo::clear_nheight() {
  nheight_ = 0;
}
::google::protobuf::int32 tagSrcImageInfo::nheight() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.nHeight)
  return nheight_;
}
void tagSrcImageInfo::set_nheight(::google::protobuf::int32 value) {
  
  nheight_ = value;
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.nHeight)
}

// bytes byImageData = 4;
void tagSrcImageInfo::clear_byimagedata() {
  byimagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagSrcImageInfo::byimagedata() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.byImageData)
  return byimagedata_.GetNoArena();
}
void tagSrcImageInfo::set_byimagedata(const ::std::string& value) {
  
  byimagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.byImageData)
}
#if LANG_CXX11
void tagSrcImageInfo::set_byimagedata(::std::string&& value) {
  
  byimagedata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagSrcImageInfo.byImageData)
}
#endif
void tagSrcImageInfo::set_byimagedata(const char* value) {
  
  byimagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagSrcImageInfo.byImageData)
}
void tagSrcImageInfo::set_byimagedata(const void* value, size_t size) {
  
  byimagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagSrcImageInfo.byImageData)
}
::std::string* tagSrcImageInfo::mutable_byimagedata() {
  
  // @@protoc_insertion_point(field_mutable:tagSrcImageInfo.byImageData)
  return byimagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagSrcImageInfo::release_byimagedata() {
  // @@protoc_insertion_point(field_release:tagSrcImageInfo.byImageData)
  
  return byimagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagSrcImageInfo::set_allocated_byimagedata(::std::string* byimagedata) {
  if (byimagedata != NULL) {
    
  } else {
    
  }
  byimagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byimagedata);
  // @@protoc_insertion_point(field_set_allocated:tagSrcImageInfo.byImageData)
}

// fixed64 uDeviceIndex = 5;
void tagSrcImageInfo::clear_udeviceindex() {
  udeviceindex_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 tagSrcImageInfo::udeviceindex() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.uDeviceIndex)
  return udeviceindex_;
}
void tagSrcImageInfo::set_udeviceindex(::google::protobuf::uint64 value) {
  
  udeviceindex_ = value;
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.uDeviceIndex)
}

// string strJsonData = 6;
void tagSrcImageInfo::clear_strjsondata() {
  strjsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagSrcImageInfo::strjsondata() const {
  // @@protoc_insertion_point(field_get:tagSrcImageInfo.strJsonData)
  return strjsondata_.GetNoArena();
}
void tagSrcImageInfo::set_strjsondata(const ::std::string& value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagSrcImageInfo.strJsonData)
}
#if LANG_CXX11
void tagSrcImageInfo::set_strjsondata(::std::string&& value) {
  
  strjsondata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagSrcImageInfo.strJsonData)
}
#endif
void tagSrcImageInfo::set_strjsondata(const char* value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagSrcImageInfo.strJsonData)
}
void tagSrcImageInfo::set_strjsondata(const char* value, size_t size) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagSrcImageInfo.strJsonData)
}
::std::string* tagSrcImageInfo::mutable_strjsondata() {
  
  // @@protoc_insertion_point(field_mutable:tagSrcImageInfo.strJsonData)
  return strjsondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagSrcImageInfo::release_strjsondata() {
  // @@protoc_insertion_point(field_release:tagSrcImageInfo.strJsonData)
  
  return strjsondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagSrcImageInfo::set_allocated_strjsondata(::std::string* strjsondata) {
  if (strjsondata != NULL) {
    
  } else {
    
  }
  strjsondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strjsondata);
  // @@protoc_insertion_point(field_set_allocated:tagSrcImageInfo.strJsonData)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagServiceRegister::kERegisterTypeFieldNumber;
const int tagServiceRegister::kEServiceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagServiceRegister::tagServiceRegister()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagServiceRegister)
}
tagServiceRegister::tagServiceRegister(const tagServiceRegister& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&eregistertype_, &from.eregistertype_,
    reinterpret_cast<char*>(&eservicetype_) -
    reinterpret_cast<char*>(&eregistertype_) + sizeof(eservicetype_));
  // @@protoc_insertion_point(copy_constructor:tagServiceRegister)
}

void tagServiceRegister::SharedCtor() {
  ::memset(&eregistertype_, 0, reinterpret_cast<char*>(&eservicetype_) -
    reinterpret_cast<char*>(&eregistertype_) + sizeof(eservicetype_));
  _cached_size_ = 0;
}

tagServiceRegister::~tagServiceRegister() {
  // @@protoc_insertion_point(destructor:tagServiceRegister)
  SharedDtor();
}

void tagServiceRegister::SharedDtor() {
}

void tagServiceRegister::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagServiceRegister::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[1].descriptor;
}

const tagServiceRegister& tagServiceRegister::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagServiceRegister* tagServiceRegister::New(::google::protobuf::Arena* arena) const {
  tagServiceRegister* n = new tagServiceRegister;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagServiceRegister::Clear() {
// @@protoc_insertion_point(message_clear_start:tagServiceRegister)
  ::memset(&eregistertype_, 0, reinterpret_cast<char*>(&eservicetype_) -
    reinterpret_cast<char*>(&eregistertype_) + sizeof(eservicetype_));
}

bool tagServiceRegister::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagServiceRegister)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ESERVICEREGISTERENUM eRegisterType = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eregistertype(static_cast< ::ESERVICEREGISTERENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ESERVICETYPEENUM eServiceType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eservicetype(static_cast< ::ESERVICETYPEENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagServiceRegister)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagServiceRegister)
  return false;
#undef DO_
}

void tagServiceRegister::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagServiceRegister)
  // .ESERVICEREGISTERENUM eRegisterType = 1;
  if (this->eregistertype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eregistertype(), output);
  }

  // .ESERVICETYPEENUM eServiceType = 2;
  if (this->eservicetype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eservicetype(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagServiceRegister)
}

::google::protobuf::uint8* tagServiceRegister::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagServiceRegister)
  // .ESERVICEREGISTERENUM eRegisterType = 1;
  if (this->eregistertype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eregistertype(), target);
  }

  // .ESERVICETYPEENUM eServiceType = 2;
  if (this->eservicetype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eservicetype(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagServiceRegister)
  return target;
}

size_t tagServiceRegister::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagServiceRegister)
  size_t total_size = 0;

  // .ESERVICEREGISTERENUM eRegisterType = 1;
  if (this->eregistertype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eregistertype());
  }

  // .ESERVICETYPEENUM eServiceType = 2;
  if (this->eservicetype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eservicetype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagServiceRegister::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagServiceRegister)
  GOOGLE_DCHECK_NE(&from, this);
  const tagServiceRegister* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagServiceRegister>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagServiceRegister)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagServiceRegister)
    MergeFrom(*source);
  }
}

void tagServiceRegister::MergeFrom(const tagServiceRegister& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagServiceRegister)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.eregistertype() != 0) {
    set_eregistertype(from.eregistertype());
  }
  if (from.eservicetype() != 0) {
    set_eservicetype(from.eservicetype());
  }
}

void tagServiceRegister::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagServiceRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagServiceRegister::CopyFrom(const tagServiceRegister& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagServiceRegister)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagServiceRegister::IsInitialized() const {
  return true;
}

void tagServiceRegister::Swap(tagServiceRegister* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagServiceRegister::InternalSwap(tagServiceRegister* other) {
  std::swap(eregistertype_, other->eregistertype_);
  std::swap(eservicetype_, other->eservicetype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagServiceRegister::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagServiceRegister

// .ESERVICEREGISTERENUM eRegisterType = 1;
void tagServiceRegister::clear_eregistertype() {
  eregistertype_ = 0;
}
::ESERVICEREGISTERENUM tagServiceRegister::eregistertype() const {
  // @@protoc_insertion_point(field_get:tagServiceRegister.eRegisterType)
  return static_cast< ::ESERVICEREGISTERENUM >(eregistertype_);
}
void tagServiceRegister::set_eregistertype(::ESERVICEREGISTERENUM value) {
  
  eregistertype_ = value;
  // @@protoc_insertion_point(field_set:tagServiceRegister.eRegisterType)
}

// .ESERVICETYPEENUM eServiceType = 2;
void tagServiceRegister::clear_eservicetype() {
  eservicetype_ = 0;
}
::ESERVICETYPEENUM tagServiceRegister::eservicetype() const {
  // @@protoc_insertion_point(field_get:tagServiceRegister.eServiceType)
  return static_cast< ::ESERVICETYPEENUM >(eservicetype_);
}
void tagServiceRegister::set_eservicetype(::ESERVICETYPEENUM value) {
  
  eservicetype_ = value;
  // @@protoc_insertion_point(field_set:tagServiceRegister.eServiceType)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagTaskReport::kETaskStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagTaskReport::tagTaskReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagTaskReport)
}
tagTaskReport::tagTaskReport(const tagTaskReport& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  etaskstatus_ = from.etaskstatus_;
  // @@protoc_insertion_point(copy_constructor:tagTaskReport)
}

void tagTaskReport::SharedCtor() {
  etaskstatus_ = 0;
  _cached_size_ = 0;
}

tagTaskReport::~tagTaskReport() {
  // @@protoc_insertion_point(destructor:tagTaskReport)
  SharedDtor();
}

void tagTaskReport::SharedDtor() {
}

void tagTaskReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagTaskReport::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[2].descriptor;
}

const tagTaskReport& tagTaskReport::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagTaskReport* tagTaskReport::New(::google::protobuf::Arena* arena) const {
  tagTaskReport* n = new tagTaskReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagTaskReport::Clear() {
// @@protoc_insertion_point(message_clear_start:tagTaskReport)
  etaskstatus_ = 0;
}

bool tagTaskReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagTaskReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ETASKSTATUSENUM eTaskStatus = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etaskstatus(static_cast< ::ETASKSTATUSENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagTaskReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagTaskReport)
  return false;
#undef DO_
}

void tagTaskReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagTaskReport)
  // .ETASKSTATUSENUM eTaskStatus = 1;
  if (this->etaskstatus() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etaskstatus(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagTaskReport)
}

::google::protobuf::uint8* tagTaskReport::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagTaskReport)
  // .ETASKSTATUSENUM eTaskStatus = 1;
  if (this->etaskstatus() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etaskstatus(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagTaskReport)
  return target;
}

size_t tagTaskReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagTaskReport)
  size_t total_size = 0;

  // .ETASKSTATUSENUM eTaskStatus = 1;
  if (this->etaskstatus() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etaskstatus());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagTaskReport::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagTaskReport)
  GOOGLE_DCHECK_NE(&from, this);
  const tagTaskReport* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagTaskReport>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagTaskReport)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagTaskReport)
    MergeFrom(*source);
  }
}

void tagTaskReport::MergeFrom(const tagTaskReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagTaskReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.etaskstatus() != 0) {
    set_etaskstatus(from.etaskstatus());
  }
}

void tagTaskReport::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagTaskReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagTaskReport::CopyFrom(const tagTaskReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagTaskReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagTaskReport::IsInitialized() const {
  return true;
}

void tagTaskReport::Swap(tagTaskReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagTaskReport::InternalSwap(tagTaskReport* other) {
  std::swap(etaskstatus_, other->etaskstatus_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagTaskReport::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagTaskReport

// .ETASKSTATUSENUM eTaskStatus = 1;
void tagTaskReport::clear_etaskstatus() {
  etaskstatus_ = 0;
}
::ETASKSTATUSENUM tagTaskReport::etaskstatus() const {
  // @@protoc_insertion_point(field_get:tagTaskReport.eTaskStatus)
  return static_cast< ::ETASKSTATUSENUM >(etaskstatus_);
}
void tagTaskReport::set_etaskstatus(::ETASKSTATUSENUM value) {
  
  etaskstatus_ = value;
  // @@protoc_insertion_point(field_set:tagTaskReport.eTaskStatus)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagUIPoint::kNXFieldNumber;
const int tagUIPoint::kNYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagUIPoint::tagUIPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagUIPoint)
}
tagUIPoint::tagUIPoint(const tagUIPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nx_, &from.nx_,
    reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  // @@protoc_insertion_point(copy_constructor:tagUIPoint)
}

void tagUIPoint::SharedCtor() {
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  _cached_size_ = 0;
}

tagUIPoint::~tagUIPoint() {
  // @@protoc_insertion_point(destructor:tagUIPoint)
  SharedDtor();
}

void tagUIPoint::SharedDtor() {
}

void tagUIPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUIPoint::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[3].descriptor;
}

const tagUIPoint& tagUIPoint::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagUIPoint* tagUIPoint::New(::google::protobuf::Arena* arena) const {
  tagUIPoint* n = new tagUIPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagUIPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:tagUIPoint)
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
}

bool tagUIPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagUIPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nX = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nY = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagUIPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagUIPoint)
  return false;
#undef DO_
}

void tagUIPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagUIPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagUIPoint)
}

::google::protobuf::uint8* tagUIPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagUIPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagUIPoint)
  return target;
}

size_t tagUIPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagUIPoint)
  size_t total_size = 0;

  // int32 nX = 1;
  if (this->nx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nx());
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ny());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUIPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagUIPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const tagUIPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagUIPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagUIPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagUIPoint)
    MergeFrom(*source);
  }
}

void tagUIPoint::MergeFrom(const tagUIPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagUIPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nx() != 0) {
    set_nx(from.nx());
  }
  if (from.ny() != 0) {
    set_ny(from.ny());
  }
}

void tagUIPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagUIPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUIPoint::CopyFrom(const tagUIPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagUIPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUIPoint::IsInitialized() const {
  return true;
}

void tagUIPoint::Swap(tagUIPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagUIPoint::InternalSwap(tagUIPoint* other) {
  std::swap(nx_, other->nx_);
  std::swap(ny_, other->ny_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagUIPoint::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagUIPoint

// int32 nX = 1;
void tagUIPoint::clear_nx() {
  nx_ = 0;
}
::google::protobuf::int32 tagUIPoint::nx() const {
  // @@protoc_insertion_point(field_get:tagUIPoint.nX)
  return nx_;
}
void tagUIPoint::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagUIPoint.nX)
}

// int32 nY = 2;
void tagUIPoint::clear_ny() {
  ny_ = 0;
}
::google::protobuf::int32 tagUIPoint::ny() const {
  // @@protoc_insertion_point(field_get:tagUIPoint.nY)
  return ny_;
}
void tagUIPoint::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagUIPoint.nY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagUIUnitAction::kStrTextFieldNumber;
const int tagUIUnitAction::kEUIActionFieldNumber;
const int tagUIUnitAction::kStClickPointFieldNumber;
const int tagUIUnitAction::kStDragPointsFieldNumber;
const int tagUIUnitAction::kNDuringTimeMsFieldNumber;
const int tagUIUnitAction::kNSleepTimeMsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagUIUnitAction::tagUIUnitAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagUIUnitAction)
}
tagUIUnitAction::tagUIUnitAction(const tagUIUnitAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stdragpoints_(from.stdragpoints_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtext().size() > 0) {
    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  if (from.has_stclickpoint()) {
    stclickpoint_ = new ::tagUIPoint(*from.stclickpoint_);
  } else {
    stclickpoint_ = NULL;
  }
  ::memcpy(&euiaction_, &from.euiaction_,
    reinterpret_cast<char*>(&nsleeptimems_) -
    reinterpret_cast<char*>(&euiaction_) + sizeof(nsleeptimems_));
  // @@protoc_insertion_point(copy_constructor:tagUIUnitAction)
}

void tagUIUnitAction::SharedCtor() {
  strtext_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stclickpoint_, 0, reinterpret_cast<char*>(&nsleeptimems_) -
    reinterpret_cast<char*>(&stclickpoint_) + sizeof(nsleeptimems_));
  _cached_size_ = 0;
}

tagUIUnitAction::~tagUIUnitAction() {
  // @@protoc_insertion_point(destructor:tagUIUnitAction)
  SharedDtor();
}

void tagUIUnitAction::SharedDtor() {
  strtext_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stclickpoint_;
  }
}

void tagUIUnitAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUIUnitAction::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[4].descriptor;
}

const tagUIUnitAction& tagUIUnitAction::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagUIUnitAction* tagUIUnitAction::New(::google::protobuf::Arena* arena) const {
  tagUIUnitAction* n = new tagUIUnitAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagUIUnitAction::Clear() {
// @@protoc_insertion_point(message_clear_start:tagUIUnitAction)
  stdragpoints_.Clear();
  strtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stclickpoint_ != NULL) {
    delete stclickpoint_;
  }
  stclickpoint_ = NULL;
  ::memset(&euiaction_, 0, reinterpret_cast<char*>(&nsleeptimems_) -
    reinterpret_cast<char*>(&euiaction_) + sizeof(nsleeptimems_));
}

bool tagUIUnitAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagUIUnitAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strText = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtext()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtext().data(), this->strtext().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagUIUnitAction.strText"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EUIAPIACTIONENUM eUIAction = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_euiaction(static_cast< ::EUIAPIACTIONENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagUIPoint stClickPoint = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stclickpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagUIPoint stDragPoints = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stdragpoints()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 nDuringTimeMs = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nduringtimems_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nSleepTimeMs = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsleeptimems_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagUIUnitAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagUIUnitAction)
  return false;
#undef DO_
}

void tagUIUnitAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagUIUnitAction)
  // string strText = 1;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), this->strtext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagUIUnitAction.strText");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strtext(), output);
  }

  // .EUIAPIACTIONENUM eUIAction = 2;
  if (this->euiaction() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->euiaction(), output);
  }

  // .tagUIPoint stClickPoint = 3;
  if (this->has_stclickpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stclickpoint_, output);
  }

  // repeated .tagUIPoint stDragPoints = 4;
  for (unsigned int i = 0, n = this->stdragpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stdragpoints(i), output);
  }

  // int32 nDuringTimeMs = 5;
  if (this->nduringtimems() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nduringtimems(), output);
  }

  // int32 nSleepTimeMs = 6;
  if (this->nsleeptimems() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->nsleeptimems(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagUIUnitAction)
}

::google::protobuf::uint8* tagUIUnitAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagUIUnitAction)
  // string strText = 1;
  if (this->strtext().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtext().data(), this->strtext().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagUIUnitAction.strText");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strtext(), target);
  }

  // .EUIAPIACTIONENUM eUIAction = 2;
  if (this->euiaction() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->euiaction(), target);
  }

  // .tagUIPoint stClickPoint = 3;
  if (this->has_stclickpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stclickpoint_, false, target);
  }

  // repeated .tagUIPoint stDragPoints = 4;
  for (unsigned int i = 0, n = this->stdragpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stdragpoints(i), false, target);
  }

  // int32 nDuringTimeMs = 5;
  if (this->nduringtimems() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nduringtimems(), target);
  }

  // int32 nSleepTimeMs = 6;
  if (this->nsleeptimems() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->nsleeptimems(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagUIUnitAction)
  return target;
}

size_t tagUIUnitAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagUIUnitAction)
  size_t total_size = 0;

  // repeated .tagUIPoint stDragPoints = 4;
  {
    unsigned int count = this->stdragpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stdragpoints(i));
    }
  }

  // string strText = 1;
  if (this->strtext().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtext());
  }

  // .tagUIPoint stClickPoint = 3;
  if (this->has_stclickpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stclickpoint_);
  }

  // .EUIAPIACTIONENUM eUIAction = 2;
  if (this->euiaction() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->euiaction());
  }

  // int32 nDuringTimeMs = 5;
  if (this->nduringtimems() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nduringtimems());
  }

  // int32 nSleepTimeMs = 6;
  if (this->nsleeptimems() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nsleeptimems());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUIUnitAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagUIUnitAction)
  GOOGLE_DCHECK_NE(&from, this);
  const tagUIUnitAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagUIUnitAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagUIUnitAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagUIUnitAction)
    MergeFrom(*source);
  }
}

void tagUIUnitAction::MergeFrom(const tagUIUnitAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagUIUnitAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stdragpoints_.MergeFrom(from.stdragpoints_);
  if (from.strtext().size() > 0) {

    strtext_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtext_);
  }
  if (from.has_stclickpoint()) {
    mutable_stclickpoint()->::tagUIPoint::MergeFrom(from.stclickpoint());
  }
  if (from.euiaction() != 0) {
    set_euiaction(from.euiaction());
  }
  if (from.nduringtimems() != 0) {
    set_nduringtimems(from.nduringtimems());
  }
  if (from.nsleeptimems() != 0) {
    set_nsleeptimems(from.nsleeptimems());
  }
}

void tagUIUnitAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagUIUnitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUIUnitAction::CopyFrom(const tagUIUnitAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagUIUnitAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUIUnitAction::IsInitialized() const {
  return true;
}

void tagUIUnitAction::Swap(tagUIUnitAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagUIUnitAction::InternalSwap(tagUIUnitAction* other) {
  stdragpoints_.UnsafeArenaSwap(&other->stdragpoints_);
  strtext_.Swap(&other->strtext_);
  std::swap(stclickpoint_, other->stclickpoint_);
  std::swap(euiaction_, other->euiaction_);
  std::swap(nduringtimems_, other->nduringtimems_);
  std::swap(nsleeptimems_, other->nsleeptimems_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagUIUnitAction::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagUIUnitAction

// string strText = 1;
void tagUIUnitAction::clear_strtext() {
  strtext_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagUIUnitAction::strtext() const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.strText)
  return strtext_.GetNoArena();
}
void tagUIUnitAction::set_strtext(const ::std::string& value) {
  
  strtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagUIUnitAction.strText)
}
#if LANG_CXX11
void tagUIUnitAction::set_strtext(::std::string&& value) {
  
  strtext_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagUIUnitAction.strText)
}
#endif
void tagUIUnitAction::set_strtext(const char* value) {
  
  strtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagUIUnitAction.strText)
}
void tagUIUnitAction::set_strtext(const char* value, size_t size) {
  
  strtext_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagUIUnitAction.strText)
}
::std::string* tagUIUnitAction::mutable_strtext() {
  
  // @@protoc_insertion_point(field_mutable:tagUIUnitAction.strText)
  return strtext_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagUIUnitAction::release_strtext() {
  // @@protoc_insertion_point(field_release:tagUIUnitAction.strText)
  
  return strtext_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagUIUnitAction::set_allocated_strtext(::std::string* strtext) {
  if (strtext != NULL) {
    
  } else {
    
  }
  strtext_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtext);
  // @@protoc_insertion_point(field_set_allocated:tagUIUnitAction.strText)
}

// .EUIAPIACTIONENUM eUIAction = 2;
void tagUIUnitAction::clear_euiaction() {
  euiaction_ = 0;
}
::EUIAPIACTIONENUM tagUIUnitAction::euiaction() const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.eUIAction)
  return static_cast< ::EUIAPIACTIONENUM >(euiaction_);
}
void tagUIUnitAction::set_euiaction(::EUIAPIACTIONENUM value) {
  
  euiaction_ = value;
  // @@protoc_insertion_point(field_set:tagUIUnitAction.eUIAction)
}

// .tagUIPoint stClickPoint = 3;
bool tagUIUnitAction::has_stclickpoint() const {
  return this != internal_default_instance() && stclickpoint_ != NULL;
}
void tagUIUnitAction::clear_stclickpoint() {
  if (GetArenaNoVirtual() == NULL && stclickpoint_ != NULL) delete stclickpoint_;
  stclickpoint_ = NULL;
}
const ::tagUIPoint& tagUIUnitAction::stclickpoint() const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.stClickPoint)
  return stclickpoint_ != NULL ? *stclickpoint_
                         : *::tagUIPoint::internal_default_instance();
}
::tagUIPoint* tagUIUnitAction::mutable_stclickpoint() {
  
  if (stclickpoint_ == NULL) {
    stclickpoint_ = new ::tagUIPoint;
  }
  // @@protoc_insertion_point(field_mutable:tagUIUnitAction.stClickPoint)
  return stclickpoint_;
}
::tagUIPoint* tagUIUnitAction::release_stclickpoint() {
  // @@protoc_insertion_point(field_release:tagUIUnitAction.stClickPoint)
  
  ::tagUIPoint* temp = stclickpoint_;
  stclickpoint_ = NULL;
  return temp;
}
void tagUIUnitAction::set_allocated_stclickpoint(::tagUIPoint* stclickpoint) {
  delete stclickpoint_;
  stclickpoint_ = stclickpoint;
  if (stclickpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagUIUnitAction.stClickPoint)
}

// repeated .tagUIPoint stDragPoints = 4;
int tagUIUnitAction::stdragpoints_size() const {
  return stdragpoints_.size();
}
void tagUIUnitAction::clear_stdragpoints() {
  stdragpoints_.Clear();
}
const ::tagUIPoint& tagUIUnitAction::stdragpoints(int index) const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.stDragPoints)
  return stdragpoints_.Get(index);
}
::tagUIPoint* tagUIUnitAction::mutable_stdragpoints(int index) {
  // @@protoc_insertion_point(field_mutable:tagUIUnitAction.stDragPoints)
  return stdragpoints_.Mutable(index);
}
::tagUIPoint* tagUIUnitAction::add_stdragpoints() {
  // @@protoc_insertion_point(field_add:tagUIUnitAction.stDragPoints)
  return stdragpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagUIPoint >*
tagUIUnitAction::mutable_stdragpoints() {
  // @@protoc_insertion_point(field_mutable_list:tagUIUnitAction.stDragPoints)
  return &stdragpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::tagUIPoint >&
tagUIUnitAction::stdragpoints() const {
  // @@protoc_insertion_point(field_list:tagUIUnitAction.stDragPoints)
  return stdragpoints_;
}

// int32 nDuringTimeMs = 5;
void tagUIUnitAction::clear_nduringtimems() {
  nduringtimems_ = 0;
}
::google::protobuf::int32 tagUIUnitAction::nduringtimems() const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.nDuringTimeMs)
  return nduringtimems_;
}
void tagUIUnitAction::set_nduringtimems(::google::protobuf::int32 value) {
  
  nduringtimems_ = value;
  // @@protoc_insertion_point(field_set:tagUIUnitAction.nDuringTimeMs)
}

// int32 nSleepTimeMs = 6;
void tagUIUnitAction::clear_nsleeptimems() {
  nsleeptimems_ = 0;
}
::google::protobuf::int32 tagUIUnitAction::nsleeptimems() const {
  // @@protoc_insertion_point(field_get:tagUIUnitAction.nSleepTimeMs)
  return nsleeptimems_;
}
void tagUIUnitAction::set_nsleeptimems(::google::protobuf::int32 value) {
  
  nsleeptimems_ = value;
  // @@protoc_insertion_point(field_set:tagUIUnitAction.nSleepTimeMs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagUIAction::kEGameStateFieldNumber;
const int tagUIAction::kStSrcImageInfoFieldNumber;
const int tagUIAction::kStUIUnitActionFieldNumber;
const int tagUIAction::kNUIIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagUIAction::tagUIAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagUIAction)
}
tagUIAction::tagUIAction(const tagUIAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stuiunitaction_(from.stuiunitaction_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stsrcimageinfo()) {
    stsrcimageinfo_ = new ::tagSrcImageInfo(*from.stsrcimageinfo_);
  } else {
    stsrcimageinfo_ = NULL;
  }
  ::memcpy(&egamestate_, &from.egamestate_,
    reinterpret_cast<char*>(&nuiid_) -
    reinterpret_cast<char*>(&egamestate_) + sizeof(nuiid_));
  // @@protoc_insertion_point(copy_constructor:tagUIAction)
}

void tagUIAction::SharedCtor() {
  ::memset(&stsrcimageinfo_, 0, reinterpret_cast<char*>(&nuiid_) -
    reinterpret_cast<char*>(&stsrcimageinfo_) + sizeof(nuiid_));
  _cached_size_ = 0;
}

tagUIAction::~tagUIAction() {
  // @@protoc_insertion_point(destructor:tagUIAction)
  SharedDtor();
}

void tagUIAction::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stsrcimageinfo_;
  }
}

void tagUIAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUIAction::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[5].descriptor;
}

const tagUIAction& tagUIAction::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagUIAction* tagUIAction::New(::google::protobuf::Arena* arena) const {
  tagUIAction* n = new tagUIAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagUIAction::Clear() {
// @@protoc_insertion_point(message_clear_start:tagUIAction)
  stuiunitaction_.Clear();
  if (GetArenaNoVirtual() == NULL && stsrcimageinfo_ != NULL) {
    delete stsrcimageinfo_;
  }
  stsrcimageinfo_ = NULL;
  ::memset(&egamestate_, 0, reinterpret_cast<char*>(&nuiid_) -
    reinterpret_cast<char*>(&egamestate_) + sizeof(nuiid_));
}

bool tagUIAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagUIAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GAMESTATEENUM eGameState = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_egamestate(static_cast< ::GAMESTATEENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagSrcImageInfo stSrcImageInfo = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stsrcimageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagUIUnitAction stUIUnitAction = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stuiunitaction()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 nUIID = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nuiid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagUIAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagUIAction)
  return false;
#undef DO_
}

void tagUIAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagUIAction)
  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->egamestate(), output);
  }

  // .tagSrcImageInfo stSrcImageInfo = 2;
  if (this->has_stsrcimageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stsrcimageinfo_, output);
  }

  // repeated .tagUIUnitAction stUIUnitAction = 3;
  for (unsigned int i = 0, n = this->stuiunitaction_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stuiunitaction(i), output);
  }

  // int32 nUIID = 4;
  if (this->nuiid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nuiid(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagUIAction)
}

::google::protobuf::uint8* tagUIAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagUIAction)
  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->egamestate(), target);
  }

  // .tagSrcImageInfo stSrcImageInfo = 2;
  if (this->has_stsrcimageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stsrcimageinfo_, false, target);
  }

  // repeated .tagUIUnitAction stUIUnitAction = 3;
  for (unsigned int i = 0, n = this->stuiunitaction_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stuiunitaction(i), false, target);
  }

  // int32 nUIID = 4;
  if (this->nuiid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nuiid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagUIAction)
  return target;
}

size_t tagUIAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagUIAction)
  size_t total_size = 0;

  // repeated .tagUIUnitAction stUIUnitAction = 3;
  {
    unsigned int count = this->stuiunitaction_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stuiunitaction(i));
    }
  }

  // .tagSrcImageInfo stSrcImageInfo = 2;
  if (this->has_stsrcimageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stsrcimageinfo_);
  }

  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->egamestate());
  }

  // int32 nUIID = 4;
  if (this->nuiid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nuiid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUIAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagUIAction)
  GOOGLE_DCHECK_NE(&from, this);
  const tagUIAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagUIAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagUIAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagUIAction)
    MergeFrom(*source);
  }
}

void tagUIAction::MergeFrom(const tagUIAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagUIAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stuiunitaction_.MergeFrom(from.stuiunitaction_);
  if (from.has_stsrcimageinfo()) {
    mutable_stsrcimageinfo()->::tagSrcImageInfo::MergeFrom(from.stsrcimageinfo());
  }
  if (from.egamestate() != 0) {
    set_egamestate(from.egamestate());
  }
  if (from.nuiid() != 0) {
    set_nuiid(from.nuiid());
  }
}

void tagUIAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagUIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUIAction::CopyFrom(const tagUIAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagUIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUIAction::IsInitialized() const {
  return true;
}

void tagUIAction::Swap(tagUIAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagUIAction::InternalSwap(tagUIAction* other) {
  stuiunitaction_.UnsafeArenaSwap(&other->stuiunitaction_);
  std::swap(stsrcimageinfo_, other->stsrcimageinfo_);
  std::swap(egamestate_, other->egamestate_);
  std::swap(nuiid_, other->nuiid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagUIAction::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagUIAction

// .GAMESTATEENUM eGameState = 1;
void tagUIAction::clear_egamestate() {
  egamestate_ = 0;
}
::GAMESTATEENUM tagUIAction::egamestate() const {
  // @@protoc_insertion_point(field_get:tagUIAction.eGameState)
  return static_cast< ::GAMESTATEENUM >(egamestate_);
}
void tagUIAction::set_egamestate(::GAMESTATEENUM value) {
  
  egamestate_ = value;
  // @@protoc_insertion_point(field_set:tagUIAction.eGameState)
}

// .tagSrcImageInfo stSrcImageInfo = 2;
bool tagUIAction::has_stsrcimageinfo() const {
  return this != internal_default_instance() && stsrcimageinfo_ != NULL;
}
void tagUIAction::clear_stsrcimageinfo() {
  if (GetArenaNoVirtual() == NULL && stsrcimageinfo_ != NULL) delete stsrcimageinfo_;
  stsrcimageinfo_ = NULL;
}
const ::tagSrcImageInfo& tagUIAction::stsrcimageinfo() const {
  // @@protoc_insertion_point(field_get:tagUIAction.stSrcImageInfo)
  return stsrcimageinfo_ != NULL ? *stsrcimageinfo_
                         : *::tagSrcImageInfo::internal_default_instance();
}
::tagSrcImageInfo* tagUIAction::mutable_stsrcimageinfo() {
  
  if (stsrcimageinfo_ == NULL) {
    stsrcimageinfo_ = new ::tagSrcImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:tagUIAction.stSrcImageInfo)
  return stsrcimageinfo_;
}
::tagSrcImageInfo* tagUIAction::release_stsrcimageinfo() {
  // @@protoc_insertion_point(field_release:tagUIAction.stSrcImageInfo)
  
  ::tagSrcImageInfo* temp = stsrcimageinfo_;
  stsrcimageinfo_ = NULL;
  return temp;
}
void tagUIAction::set_allocated_stsrcimageinfo(::tagSrcImageInfo* stsrcimageinfo) {
  delete stsrcimageinfo_;
  stsrcimageinfo_ = stsrcimageinfo;
  if (stsrcimageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagUIAction.stSrcImageInfo)
}

// repeated .tagUIUnitAction stUIUnitAction = 3;
int tagUIAction::stuiunitaction_size() const {
  return stuiunitaction_.size();
}
void tagUIAction::clear_stuiunitaction() {
  stuiunitaction_.Clear();
}
const ::tagUIUnitAction& tagUIAction::stuiunitaction(int index) const {
  // @@protoc_insertion_point(field_get:tagUIAction.stUIUnitAction)
  return stuiunitaction_.Get(index);
}
::tagUIUnitAction* tagUIAction::mutable_stuiunitaction(int index) {
  // @@protoc_insertion_point(field_mutable:tagUIAction.stUIUnitAction)
  return stuiunitaction_.Mutable(index);
}
::tagUIUnitAction* tagUIAction::add_stuiunitaction() {
  // @@protoc_insertion_point(field_add:tagUIAction.stUIUnitAction)
  return stuiunitaction_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagUIUnitAction >*
tagUIAction::mutable_stuiunitaction() {
  // @@protoc_insertion_point(field_mutable_list:tagUIAction.stUIUnitAction)
  return &stuiunitaction_;
}
const ::google::protobuf::RepeatedPtrField< ::tagUIUnitAction >&
tagUIAction::stuiunitaction() const {
  // @@protoc_insertion_point(field_list:tagUIAction.stUIUnitAction)
  return stuiunitaction_;
}

// int32 nUIID = 4;
void tagUIAction::clear_nuiid() {
  nuiid_ = 0;
}
::google::protobuf::int32 tagUIAction::nuiid() const {
  // @@protoc_insertion_point(field_get:tagUIAction.nUIID)
  return nuiid_;
}
void tagUIAction::set_nuiid(::google::protobuf::int32 value) {
  
  nuiid_ = value;
  // @@protoc_insertion_point(field_set:tagUIAction.nUIID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagUIAPIState::kEUIStateFieldNumber;
const int tagUIAPIState::kStUIImageFieldNumber;
const int tagUIAPIState::kStUIActionFieldNumber;
const int tagUIAPIState::kEGameStateFieldNumber;
const int tagUIAPIState::kEScreenOriFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagUIAPIState::tagUIAPIState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagUIAPIState)
}
tagUIAPIState::tagUIAPIState(const tagUIAPIState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stuiimage()) {
    stuiimage_ = new ::tagSrcImageInfo(*from.stuiimage_);
  } else {
    stuiimage_ = NULL;
  }
  if (from.has_stuiaction()) {
    stuiaction_ = new ::tagUIAction(*from.stuiaction_);
  } else {
    stuiaction_ = NULL;
  }
  ::memcpy(&euistate_, &from.euistate_,
    reinterpret_cast<char*>(&escreenori_) -
    reinterpret_cast<char*>(&euistate_) + sizeof(escreenori_));
  // @@protoc_insertion_point(copy_constructor:tagUIAPIState)
}

void tagUIAPIState::SharedCtor() {
  ::memset(&stuiimage_, 0, reinterpret_cast<char*>(&escreenori_) -
    reinterpret_cast<char*>(&stuiimage_) + sizeof(escreenori_));
  _cached_size_ = 0;
}

tagUIAPIState::~tagUIAPIState() {
  // @@protoc_insertion_point(destructor:tagUIAPIState)
  SharedDtor();
}

void tagUIAPIState::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stuiimage_;
  }
  if (this != internal_default_instance()) {
    delete stuiaction_;
  }
}

void tagUIAPIState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagUIAPIState::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[6].descriptor;
}

const tagUIAPIState& tagUIAPIState::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagUIAPIState* tagUIAPIState::New(::google::protobuf::Arena* arena) const {
  tagUIAPIState* n = new tagUIAPIState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagUIAPIState::Clear() {
// @@protoc_insertion_point(message_clear_start:tagUIAPIState)
  if (GetArenaNoVirtual() == NULL && stuiimage_ != NULL) {
    delete stuiimage_;
  }
  stuiimage_ = NULL;
  if (GetArenaNoVirtual() == NULL && stuiaction_ != NULL) {
    delete stuiaction_;
  }
  stuiaction_ = NULL;
  ::memset(&euistate_, 0, reinterpret_cast<char*>(&escreenori_) -
    reinterpret_cast<char*>(&euistate_) + sizeof(escreenori_));
}

bool tagUIAPIState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagUIAPIState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EUIAPISTATEENUM eUIState = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_euistate(static_cast< ::EUIAPISTATEENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagSrcImageInfo stUIImage = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuiimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagUIAction stUIAction = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuiaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .GAMESTATEENUM eGameState = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_egamestate(static_cast< ::GAMESTATEENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ESCREENORIENUM eScreenOri = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_escreenori(static_cast< ::ESCREENORIENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagUIAPIState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagUIAPIState)
  return false;
#undef DO_
}

void tagUIAPIState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagUIAPIState)
  // .EUIAPISTATEENUM eUIState = 1;
  if (this->euistate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->euistate(), output);
  }

  // .tagSrcImageInfo stUIImage = 2;
  if (this->has_stuiimage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stuiimage_, output);
  }

  // .tagUIAction stUIAction = 3;
  if (this->has_stuiaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stuiaction_, output);
  }

  // .GAMESTATEENUM eGameState = 4;
  if (this->egamestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->egamestate(), output);
  }

  // .ESCREENORIENUM eScreenOri = 5;
  if (this->escreenori() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->escreenori(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagUIAPIState)
}

::google::protobuf::uint8* tagUIAPIState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagUIAPIState)
  // .EUIAPISTATEENUM eUIState = 1;
  if (this->euistate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->euistate(), target);
  }

  // .tagSrcImageInfo stUIImage = 2;
  if (this->has_stuiimage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stuiimage_, false, target);
  }

  // .tagUIAction stUIAction = 3;
  if (this->has_stuiaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stuiaction_, false, target);
  }

  // .GAMESTATEENUM eGameState = 4;
  if (this->egamestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->egamestate(), target);
  }

  // .ESCREENORIENUM eScreenOri = 5;
  if (this->escreenori() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->escreenori(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagUIAPIState)
  return target;
}

size_t tagUIAPIState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagUIAPIState)
  size_t total_size = 0;

  // .tagSrcImageInfo stUIImage = 2;
  if (this->has_stuiimage()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stuiimage_);
  }

  // .tagUIAction stUIAction = 3;
  if (this->has_stuiaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stuiaction_);
  }

  // .EUIAPISTATEENUM eUIState = 1;
  if (this->euistate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->euistate());
  }

  // .GAMESTATEENUM eGameState = 4;
  if (this->egamestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->egamestate());
  }

  // .ESCREENORIENUM eScreenOri = 5;
  if (this->escreenori() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->escreenori());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagUIAPIState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagUIAPIState)
  GOOGLE_DCHECK_NE(&from, this);
  const tagUIAPIState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagUIAPIState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagUIAPIState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagUIAPIState)
    MergeFrom(*source);
  }
}

void tagUIAPIState::MergeFrom(const tagUIAPIState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagUIAPIState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stuiimage()) {
    mutable_stuiimage()->::tagSrcImageInfo::MergeFrom(from.stuiimage());
  }
  if (from.has_stuiaction()) {
    mutable_stuiaction()->::tagUIAction::MergeFrom(from.stuiaction());
  }
  if (from.euistate() != 0) {
    set_euistate(from.euistate());
  }
  if (from.egamestate() != 0) {
    set_egamestate(from.egamestate());
  }
  if (from.escreenori() != 0) {
    set_escreenori(from.escreenori());
  }
}

void tagUIAPIState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagUIAPIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagUIAPIState::CopyFrom(const tagUIAPIState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagUIAPIState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagUIAPIState::IsInitialized() const {
  return true;
}

void tagUIAPIState::Swap(tagUIAPIState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagUIAPIState::InternalSwap(tagUIAPIState* other) {
  std::swap(stuiimage_, other->stuiimage_);
  std::swap(stuiaction_, other->stuiaction_);
  std::swap(euistate_, other->euistate_);
  std::swap(egamestate_, other->egamestate_);
  std::swap(escreenori_, other->escreenori_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagUIAPIState::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagUIAPIState

// .EUIAPISTATEENUM eUIState = 1;
void tagUIAPIState::clear_euistate() {
  euistate_ = 0;
}
::EUIAPISTATEENUM tagUIAPIState::euistate() const {
  // @@protoc_insertion_point(field_get:tagUIAPIState.eUIState)
  return static_cast< ::EUIAPISTATEENUM >(euistate_);
}
void tagUIAPIState::set_euistate(::EUIAPISTATEENUM value) {
  
  euistate_ = value;
  // @@protoc_insertion_point(field_set:tagUIAPIState.eUIState)
}

// .tagSrcImageInfo stUIImage = 2;
bool tagUIAPIState::has_stuiimage() const {
  return this != internal_default_instance() && stuiimage_ != NULL;
}
void tagUIAPIState::clear_stuiimage() {
  if (GetArenaNoVirtual() == NULL && stuiimage_ != NULL) delete stuiimage_;
  stuiimage_ = NULL;
}
const ::tagSrcImageInfo& tagUIAPIState::stuiimage() const {
  // @@protoc_insertion_point(field_get:tagUIAPIState.stUIImage)
  return stuiimage_ != NULL ? *stuiimage_
                         : *::tagSrcImageInfo::internal_default_instance();
}
::tagSrcImageInfo* tagUIAPIState::mutable_stuiimage() {
  
  if (stuiimage_ == NULL) {
    stuiimage_ = new ::tagSrcImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:tagUIAPIState.stUIImage)
  return stuiimage_;
}
::tagSrcImageInfo* tagUIAPIState::release_stuiimage() {
  // @@protoc_insertion_point(field_release:tagUIAPIState.stUIImage)
  
  ::tagSrcImageInfo* temp = stuiimage_;
  stuiimage_ = NULL;
  return temp;
}
void tagUIAPIState::set_allocated_stuiimage(::tagSrcImageInfo* stuiimage) {
  delete stuiimage_;
  stuiimage_ = stuiimage;
  if (stuiimage) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagUIAPIState.stUIImage)
}

// .tagUIAction stUIAction = 3;
bool tagUIAPIState::has_stuiaction() const {
  return this != internal_default_instance() && stuiaction_ != NULL;
}
void tagUIAPIState::clear_stuiaction() {
  if (GetArenaNoVirtual() == NULL && stuiaction_ != NULL) delete stuiaction_;
  stuiaction_ = NULL;
}
const ::tagUIAction& tagUIAPIState::stuiaction() const {
  // @@protoc_insertion_point(field_get:tagUIAPIState.stUIAction)
  return stuiaction_ != NULL ? *stuiaction_
                         : *::tagUIAction::internal_default_instance();
}
::tagUIAction* tagUIAPIState::mutable_stuiaction() {
  
  if (stuiaction_ == NULL) {
    stuiaction_ = new ::tagUIAction;
  }
  // @@protoc_insertion_point(field_mutable:tagUIAPIState.stUIAction)
  return stuiaction_;
}
::tagUIAction* tagUIAPIState::release_stuiaction() {
  // @@protoc_insertion_point(field_release:tagUIAPIState.stUIAction)
  
  ::tagUIAction* temp = stuiaction_;
  stuiaction_ = NULL;
  return temp;
}
void tagUIAPIState::set_allocated_stuiaction(::tagUIAction* stuiaction) {
  delete stuiaction_;
  stuiaction_ = stuiaction;
  if (stuiaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagUIAPIState.stUIAction)
}

// .GAMESTATEENUM eGameState = 4;
void tagUIAPIState::clear_egamestate() {
  egamestate_ = 0;
}
::GAMESTATEENUM tagUIAPIState::egamestate() const {
  // @@protoc_insertion_point(field_get:tagUIAPIState.eGameState)
  return static_cast< ::GAMESTATEENUM >(egamestate_);
}
void tagUIAPIState::set_egamestate(::GAMESTATEENUM value) {
  
  egamestate_ = value;
  // @@protoc_insertion_point(field_set:tagUIAPIState.eGameState)
}

// .ESCREENORIENUM eScreenOri = 5;
void tagUIAPIState::clear_escreenori() {
  escreenori_ = 0;
}
::ESCREENORIENUM tagUIAPIState::escreenori() const {
  // @@protoc_insertion_point(field_get:tagUIAPIState.eScreenOri)
  return static_cast< ::ESCREENORIENUM >(escreenori_);
}
void tagUIAPIState::set_escreenori(::ESCREENORIENUM value) {
  
  escreenori_ = value;
  // @@protoc_insertion_point(field_set:tagUIAPIState.eScreenOri)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameActionPoint::kNXFieldNumber;
const int tagGameActionPoint::kNYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameActionPoint::tagGameActionPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagGameActionPoint)
}
tagGameActionPoint::tagGameActionPoint(const tagGameActionPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nx_, &from.nx_,
    reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  // @@protoc_insertion_point(copy_constructor:tagGameActionPoint)
}

void tagGameActionPoint::SharedCtor() {
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  _cached_size_ = 0;
}

tagGameActionPoint::~tagGameActionPoint() {
  // @@protoc_insertion_point(destructor:tagGameActionPoint)
  SharedDtor();
}

void tagGameActionPoint::SharedDtor() {
}

void tagGameActionPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameActionPoint::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[7].descriptor;
}

const tagGameActionPoint& tagGameActionPoint::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameActionPoint* tagGameActionPoint::New(::google::protobuf::Arena* arena) const {
  tagGameActionPoint* n = new tagGameActionPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameActionPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:tagGameActionPoint)
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
}

bool tagGameActionPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagGameActionPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nX = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nY = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagGameActionPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagGameActionPoint)
  return false;
#undef DO_
}

void tagGameActionPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagGameActionPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagGameActionPoint)
}

::google::protobuf::uint8* tagGameActionPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagGameActionPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagGameActionPoint)
  return target;
}

size_t tagGameActionPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagGameActionPoint)
  size_t total_size = 0;

  // int32 nX = 1;
  if (this->nx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nx());
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ny());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameActionPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagGameActionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameActionPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameActionPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagGameActionPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagGameActionPoint)
    MergeFrom(*source);
  }
}

void tagGameActionPoint::MergeFrom(const tagGameActionPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagGameActionPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nx() != 0) {
    set_nx(from.nx());
  }
  if (from.ny() != 0) {
    set_ny(from.ny());
  }
}

void tagGameActionPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagGameActionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameActionPoint::CopyFrom(const tagGameActionPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagGameActionPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameActionPoint::IsInitialized() const {
  return true;
}

void tagGameActionPoint::Swap(tagGameActionPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameActionPoint::InternalSwap(tagGameActionPoint* other) {
  std::swap(nx_, other->nx_);
  std::swap(ny_, other->ny_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameActionPoint::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameActionPoint

// int32 nX = 1;
void tagGameActionPoint::clear_nx() {
  nx_ = 0;
}
::google::protobuf::int32 tagGameActionPoint::nx() const {
  // @@protoc_insertion_point(field_get:tagGameActionPoint.nX)
  return nx_;
}
void tagGameActionPoint::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionPoint.nX)
}

// int32 nY = 2;
void tagGameActionPoint::clear_ny() {
  ny_ = 0;
}
::google::protobuf::int32 tagGameActionPoint::ny() const {
  // @@protoc_insertion_point(field_get:tagGameActionPoint.nY)
  return ny_;
}
void tagGameActionPoint::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionPoint.nY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagGameActionResult::kEGameActionTypeFieldNumber;
const int tagGameActionResult::kStGameActionPointFieldNumber;
const int tagGameActionResult::kNContactFieldNumber;
const int tagGameActionResult::kNDuringTimeFieldNumber;
const int tagGameActionResult::kNWaitTimeFieldNumber;
const int tagGameActionResult::kNFrameSeqFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagGameActionResult::tagGameActionResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagGameActionResult)
}
tagGameActionResult::tagGameActionResult(const tagGameActionResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stgameactionpoint_(from.stgameactionpoint_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&egameactiontype_, &from.egameactiontype_,
    reinterpret_cast<char*>(&nframeseq_) -
    reinterpret_cast<char*>(&egameactiontype_) + sizeof(nframeseq_));
  // @@protoc_insertion_point(copy_constructor:tagGameActionResult)
}

void tagGameActionResult::SharedCtor() {
  ::memset(&egameactiontype_, 0, reinterpret_cast<char*>(&nframeseq_) -
    reinterpret_cast<char*>(&egameactiontype_) + sizeof(nframeseq_));
  _cached_size_ = 0;
}

tagGameActionResult::~tagGameActionResult() {
  // @@protoc_insertion_point(destructor:tagGameActionResult)
  SharedDtor();
}

void tagGameActionResult::SharedDtor() {
}

void tagGameActionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagGameActionResult::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[8].descriptor;
}

const tagGameActionResult& tagGameActionResult::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagGameActionResult* tagGameActionResult::New(::google::protobuf::Arena* arena) const {
  tagGameActionResult* n = new tagGameActionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagGameActionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tagGameActionResult)
  stgameactionpoint_.Clear();
  ::memset(&egameactiontype_, 0, reinterpret_cast<char*>(&nframeseq_) -
    reinterpret_cast<char*>(&egameactiontype_) + sizeof(nframeseq_));
}

bool tagGameActionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagGameActionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EGAMEACTIONENUM eGameActionType = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_egameactiontype(static_cast< ::EGAMEACTIONENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagGameActionPoint stGameActionPoint = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stgameactionpoint()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int32 nContact = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncontact_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nDuringTime = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nduringtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWaitTime = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwaittime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // sfixed64 nFrameSeq = 6;
      case 6: {
        if (tag == 49u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nframeseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagGameActionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagGameActionResult)
  return false;
#undef DO_
}

void tagGameActionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagGameActionResult)
  // .EGAMEACTIONENUM eGameActionType = 1;
  if (this->egameactiontype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->egameactiontype(), output);
  }

  // repeated .tagGameActionPoint stGameActionPoint = 2;
  for (unsigned int i = 0, n = this->stgameactionpoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stgameactionpoint(i), output);
  }

  // int32 nContact = 3;
  if (this->ncontact() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ncontact(), output);
  }

  // int32 nDuringTime = 4;
  if (this->nduringtime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nduringtime(), output);
  }

  // int32 nWaitTime = 5;
  if (this->nwaittime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nwaittime(), output);
  }

  // sfixed64 nFrameSeq = 6;
  if (this->nframeseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(6, this->nframeseq(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagGameActionResult)
}

::google::protobuf::uint8* tagGameActionResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagGameActionResult)
  // .EGAMEACTIONENUM eGameActionType = 1;
  if (this->egameactiontype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->egameactiontype(), target);
  }

  // repeated .tagGameActionPoint stGameActionPoint = 2;
  for (unsigned int i = 0, n = this->stgameactionpoint_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stgameactionpoint(i), false, target);
  }

  // int32 nContact = 3;
  if (this->ncontact() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ncontact(), target);
  }

  // int32 nDuringTime = 4;
  if (this->nduringtime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nduringtime(), target);
  }

  // int32 nWaitTime = 5;
  if (this->nwaittime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nwaittime(), target);
  }

  // sfixed64 nFrameSeq = 6;
  if (this->nframeseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(6, this->nframeseq(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagGameActionResult)
  return target;
}

size_t tagGameActionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagGameActionResult)
  size_t total_size = 0;

  // repeated .tagGameActionPoint stGameActionPoint = 2;
  {
    unsigned int count = this->stgameactionpoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stgameactionpoint(i));
    }
  }

  // .EGAMEACTIONENUM eGameActionType = 1;
  if (this->egameactiontype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->egameactiontype());
  }

  // int32 nContact = 3;
  if (this->ncontact() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ncontact());
  }

  // int32 nDuringTime = 4;
  if (this->nduringtime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nduringtime());
  }

  // int32 nWaitTime = 5;
  if (this->nwaittime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nwaittime());
  }

  // sfixed64 nFrameSeq = 6;
  if (this->nframeseq() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagGameActionResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagGameActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  const tagGameActionResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagGameActionResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagGameActionResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagGameActionResult)
    MergeFrom(*source);
  }
}

void tagGameActionResult::MergeFrom(const tagGameActionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagGameActionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stgameactionpoint_.MergeFrom(from.stgameactionpoint_);
  if (from.egameactiontype() != 0) {
    set_egameactiontype(from.egameactiontype());
  }
  if (from.ncontact() != 0) {
    set_ncontact(from.ncontact());
  }
  if (from.nduringtime() != 0) {
    set_nduringtime(from.nduringtime());
  }
  if (from.nwaittime() != 0) {
    set_nwaittime(from.nwaittime());
  }
  if (from.nframeseq() != 0) {
    set_nframeseq(from.nframeseq());
  }
}

void tagGameActionResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagGameActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagGameActionResult::CopyFrom(const tagGameActionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagGameActionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagGameActionResult::IsInitialized() const {
  return true;
}

void tagGameActionResult::Swap(tagGameActionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagGameActionResult::InternalSwap(tagGameActionResult* other) {
  stgameactionpoint_.UnsafeArenaSwap(&other->stgameactionpoint_);
  std::swap(egameactiontype_, other->egameactiontype_);
  std::swap(ncontact_, other->ncontact_);
  std::swap(nduringtime_, other->nduringtime_);
  std::swap(nwaittime_, other->nwaittime_);
  std::swap(nframeseq_, other->nframeseq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagGameActionResult::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagGameActionResult

// .EGAMEACTIONENUM eGameActionType = 1;
void tagGameActionResult::clear_egameactiontype() {
  egameactiontype_ = 0;
}
::EGAMEACTIONENUM tagGameActionResult::egameactiontype() const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.eGameActionType)
  return static_cast< ::EGAMEACTIONENUM >(egameactiontype_);
}
void tagGameActionResult::set_egameactiontype(::EGAMEACTIONENUM value) {
  
  egameactiontype_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionResult.eGameActionType)
}

// repeated .tagGameActionPoint stGameActionPoint = 2;
int tagGameActionResult::stgameactionpoint_size() const {
  return stgameactionpoint_.size();
}
void tagGameActionResult::clear_stgameactionpoint() {
  stgameactionpoint_.Clear();
}
const ::tagGameActionPoint& tagGameActionResult::stgameactionpoint(int index) const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.stGameActionPoint)
  return stgameactionpoint_.Get(index);
}
::tagGameActionPoint* tagGameActionResult::mutable_stgameactionpoint(int index) {
  // @@protoc_insertion_point(field_mutable:tagGameActionResult.stGameActionPoint)
  return stgameactionpoint_.Mutable(index);
}
::tagGameActionPoint* tagGameActionResult::add_stgameactionpoint() {
  // @@protoc_insertion_point(field_add:tagGameActionResult.stGameActionPoint)
  return stgameactionpoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagGameActionPoint >*
tagGameActionResult::mutable_stgameactionpoint() {
  // @@protoc_insertion_point(field_mutable_list:tagGameActionResult.stGameActionPoint)
  return &stgameactionpoint_;
}
const ::google::protobuf::RepeatedPtrField< ::tagGameActionPoint >&
tagGameActionResult::stgameactionpoint() const {
  // @@protoc_insertion_point(field_list:tagGameActionResult.stGameActionPoint)
  return stgameactionpoint_;
}

// int32 nContact = 3;
void tagGameActionResult::clear_ncontact() {
  ncontact_ = 0;
}
::google::protobuf::int32 tagGameActionResult::ncontact() const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.nContact)
  return ncontact_;
}
void tagGameActionResult::set_ncontact(::google::protobuf::int32 value) {
  
  ncontact_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionResult.nContact)
}

// int32 nDuringTime = 4;
void tagGameActionResult::clear_nduringtime() {
  nduringtime_ = 0;
}
::google::protobuf::int32 tagGameActionResult::nduringtime() const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.nDuringTime)
  return nduringtime_;
}
void tagGameActionResult::set_nduringtime(::google::protobuf::int32 value) {
  
  nduringtime_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionResult.nDuringTime)
}

// int32 nWaitTime = 5;
void tagGameActionResult::clear_nwaittime() {
  nwaittime_ = 0;
}
::google::protobuf::int32 tagGameActionResult::nwaittime() const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.nWaitTime)
  return nwaittime_;
}
void tagGameActionResult::set_nwaittime(::google::protobuf::int32 value) {
  
  nwaittime_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionResult.nWaitTime)
}

// sfixed64 nFrameSeq = 6;
void tagGameActionResult::clear_nframeseq() {
  nframeseq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 tagGameActionResult::nframeseq() const {
  // @@protoc_insertion_point(field_get:tagGameActionResult.nFrameSeq)
  return nframeseq_;
}
void tagGameActionResult::set_nframeseq(::google::protobuf::int64 value) {
  
  nframeseq_ = value;
  // @@protoc_insertion_point(field_set:tagGameActionResult.nFrameSeq)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagAIAction::kNFrameSeqFieldNumber;
const int tagAIAction::kByAIActionBuffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagAIAction::tagAIAction()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagAIAction)
}
tagAIAction::tagAIAction(const tagAIAction& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byaiactionbuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.byaiactionbuff().size() > 0) {
    byaiactionbuff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byaiactionbuff_);
  }
  nframeseq_ = from.nframeseq_;
  // @@protoc_insertion_point(copy_constructor:tagAIAction)
}

void tagAIAction::SharedCtor() {
  byaiactionbuff_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nframeseq_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

tagAIAction::~tagAIAction() {
  // @@protoc_insertion_point(destructor:tagAIAction)
  SharedDtor();
}

void tagAIAction::SharedDtor() {
  byaiactionbuff_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagAIAction::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagAIAction::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[9].descriptor;
}

const tagAIAction& tagAIAction::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagAIAction* tagAIAction::New(::google::protobuf::Arena* arena) const {
  tagAIAction* n = new tagAIAction;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagAIAction::Clear() {
// @@protoc_insertion_point(message_clear_start:tagAIAction)
  byaiactionbuff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  nframeseq_ = GOOGLE_LONGLONG(0);
}

bool tagAIAction::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagAIAction)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // sfixed64 nFrameSeq = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &nframeseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byAIActionBuff = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byaiactionbuff()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagAIAction)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagAIAction)
  return false;
#undef DO_
}

void tagAIAction::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagAIAction)
  // sfixed64 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->nframeseq(), output);
  }

  // bytes byAIActionBuff = 2;
  if (this->byaiactionbuff().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->byaiactionbuff(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagAIAction)
}

::google::protobuf::uint8* tagAIAction::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagAIAction)
  // sfixed64 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->nframeseq(), target);
  }

  // bytes byAIActionBuff = 2;
  if (this->byaiactionbuff().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->byaiactionbuff(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagAIAction)
  return target;
}

size_t tagAIAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagAIAction)
  size_t total_size = 0;

  // bytes byAIActionBuff = 2;
  if (this->byaiactionbuff().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byaiactionbuff());
  }

  // sfixed64 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagAIAction::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagAIAction)
  GOOGLE_DCHECK_NE(&from, this);
  const tagAIAction* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagAIAction>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagAIAction)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagAIAction)
    MergeFrom(*source);
  }
}

void tagAIAction::MergeFrom(const tagAIAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagAIAction)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.byaiactionbuff().size() > 0) {

    byaiactionbuff_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byaiactionbuff_);
  }
  if (from.nframeseq() != 0) {
    set_nframeseq(from.nframeseq());
  }
}

void tagAIAction::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagAIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagAIAction::CopyFrom(const tagAIAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagAIAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagAIAction::IsInitialized() const {
  return true;
}

void tagAIAction::Swap(tagAIAction* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagAIAction::InternalSwap(tagAIAction* other) {
  byaiactionbuff_.Swap(&other->byaiactionbuff_);
  std::swap(nframeseq_, other->nframeseq_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagAIAction::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagAIAction

// sfixed64 nFrameSeq = 1;
void tagAIAction::clear_nframeseq() {
  nframeseq_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 tagAIAction::nframeseq() const {
  // @@protoc_insertion_point(field_get:tagAIAction.nFrameSeq)
  return nframeseq_;
}
void tagAIAction::set_nframeseq(::google::protobuf::int64 value) {
  
  nframeseq_ = value;
  // @@protoc_insertion_point(field_set:tagAIAction.nFrameSeq)
}

// bytes byAIActionBuff = 2;
void tagAIAction::clear_byaiactionbuff() {
  byaiactionbuff_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagAIAction::byaiactionbuff() const {
  // @@protoc_insertion_point(field_get:tagAIAction.byAIActionBuff)
  return byaiactionbuff_.GetNoArena();
}
void tagAIAction::set_byaiactionbuff(const ::std::string& value) {
  
  byaiactionbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagAIAction.byAIActionBuff)
}
#if LANG_CXX11
void tagAIAction::set_byaiactionbuff(::std::string&& value) {
  
  byaiactionbuff_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagAIAction.byAIActionBuff)
}
#endif
void tagAIAction::set_byaiactionbuff(const char* value) {
  
  byaiactionbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagAIAction.byAIActionBuff)
}
void tagAIAction::set_byaiactionbuff(const void* value, size_t size) {
  
  byaiactionbuff_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagAIAction.byAIActionBuff)
}
::std::string* tagAIAction::mutable_byaiactionbuff() {
  
  // @@protoc_insertion_point(field_mutable:tagAIAction.byAIActionBuff)
  return byaiactionbuff_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagAIAction::release_byaiactionbuff() {
  // @@protoc_insertion_point(field_release:tagAIAction.byAIActionBuff)
  
  return byaiactionbuff_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagAIAction::set_allocated_byaiactionbuff(::std::string* byaiactionbuff) {
  if (byaiactionbuff != NULL) {
    
  } else {
    
  }
  byaiactionbuff_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byaiactionbuff);
  // @@protoc_insertion_point(field_set_allocated:tagAIAction.byAIActionBuff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagServiceState::kNServiceStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagServiceState::tagServiceState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagServiceState)
}
tagServiceState::tagServiceState(const tagServiceState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nservicestate_ = from.nservicestate_;
  // @@protoc_insertion_point(copy_constructor:tagServiceState)
}

void tagServiceState::SharedCtor() {
  nservicestate_ = 0;
  _cached_size_ = 0;
}

tagServiceState::~tagServiceState() {
  // @@protoc_insertion_point(destructor:tagServiceState)
  SharedDtor();
}

void tagServiceState::SharedDtor() {
}

void tagServiceState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagServiceState::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[10].descriptor;
}

const tagServiceState& tagServiceState::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagServiceState* tagServiceState::New(::google::protobuf::Arena* arena) const {
  tagServiceState* n = new tagServiceState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagServiceState::Clear() {
// @@protoc_insertion_point(message_clear_start:tagServiceState)
  nservicestate_ = 0;
}

bool tagServiceState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagServiceState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nServiceState = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nservicestate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagServiceState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagServiceState)
  return false;
#undef DO_
}

void tagServiceState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagServiceState)
  // int32 nServiceState = 1;
  if (this->nservicestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nservicestate(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagServiceState)
}

::google::protobuf::uint8* tagServiceState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagServiceState)
  // int32 nServiceState = 1;
  if (this->nservicestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nservicestate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagServiceState)
  return target;
}

size_t tagServiceState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagServiceState)
  size_t total_size = 0;

  // int32 nServiceState = 1;
  if (this->nservicestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nservicestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagServiceState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  const tagServiceState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagServiceState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagServiceState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagServiceState)
    MergeFrom(*source);
  }
}

void tagServiceState::MergeFrom(const tagServiceState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagServiceState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nservicestate() != 0) {
    set_nservicestate(from.nservicestate());
  }
}

void tagServiceState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagServiceState::CopyFrom(const tagServiceState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagServiceState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagServiceState::IsInitialized() const {
  return true;
}

void tagServiceState::Swap(tagServiceState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagServiceState::InternalSwap(tagServiceState* other) {
  std::swap(nservicestate_, other->nservicestate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagServiceState::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagServiceState

// int32 nServiceState = 1;
void tagServiceState::clear_nservicestate() {
  nservicestate_ = 0;
}
::google::protobuf::int32 tagServiceState::nservicestate() const {
  // @@protoc_insertion_point(field_get:tagServiceState.nServiceState)
  return nservicestate_;
}
void tagServiceState::set_nservicestate(::google::protobuf::int32 value) {
  
  nservicestate_ = value;
  // @@protoc_insertion_point(field_set:tagServiceState.nServiceState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagChangeGameState::kEGameStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagChangeGameState::tagChangeGameState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagChangeGameState)
}
tagChangeGameState::tagChangeGameState(const tagChangeGameState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  egamestate_ = from.egamestate_;
  // @@protoc_insertion_point(copy_constructor:tagChangeGameState)
}

void tagChangeGameState::SharedCtor() {
  egamestate_ = 0;
  _cached_size_ = 0;
}

tagChangeGameState::~tagChangeGameState() {
  // @@protoc_insertion_point(destructor:tagChangeGameState)
  SharedDtor();
}

void tagChangeGameState::SharedDtor() {
}

void tagChangeGameState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagChangeGameState::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[11].descriptor;
}

const tagChangeGameState& tagChangeGameState::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagChangeGameState* tagChangeGameState::New(::google::protobuf::Arena* arena) const {
  tagChangeGameState* n = new tagChangeGameState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagChangeGameState::Clear() {
// @@protoc_insertion_point(message_clear_start:tagChangeGameState)
  egamestate_ = 0;
}

bool tagChangeGameState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagChangeGameState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .GAMESTATEENUM eGameState = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_egamestate(static_cast< ::GAMESTATEENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagChangeGameState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagChangeGameState)
  return false;
#undef DO_
}

void tagChangeGameState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagChangeGameState)
  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->egamestate(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagChangeGameState)
}

::google::protobuf::uint8* tagChangeGameState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagChangeGameState)
  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->egamestate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagChangeGameState)
  return target;
}

size_t tagChangeGameState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagChangeGameState)
  size_t total_size = 0;

  // .GAMESTATEENUM eGameState = 1;
  if (this->egamestate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->egamestate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagChangeGameState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagChangeGameState)
  GOOGLE_DCHECK_NE(&from, this);
  const tagChangeGameState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagChangeGameState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagChangeGameState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagChangeGameState)
    MergeFrom(*source);
  }
}

void tagChangeGameState::MergeFrom(const tagChangeGameState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagChangeGameState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.egamestate() != 0) {
    set_egamestate(from.egamestate());
  }
}

void tagChangeGameState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagChangeGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagChangeGameState::CopyFrom(const tagChangeGameState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagChangeGameState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagChangeGameState::IsInitialized() const {
  return true;
}

void tagChangeGameState::Swap(tagChangeGameState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagChangeGameState::InternalSwap(tagChangeGameState* other) {
  std::swap(egamestate_, other->egamestate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagChangeGameState::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagChangeGameState

// .GAMESTATEENUM eGameState = 1;
void tagChangeGameState::clear_egamestate() {
  egamestate_ = 0;
}
::GAMESTATEENUM tagChangeGameState::egamestate() const {
  // @@protoc_insertion_point(field_get:tagChangeGameState.eGameState)
  return static_cast< ::GAMESTATEENUM >(egamestate_);
}
void tagChangeGameState::set_egamestate(::GAMESTATEENUM value) {
  
  egamestate_ = value;
  // @@protoc_insertion_point(field_set:tagChangeGameState.eGameState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagAgentState::kEAgentStateFieldNumber;
const int tagAgentState::kStrAgentStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagAgentState::tagAgentState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagAgentState)
}
tagAgentState::tagAgentState(const tagAgentState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stragentstate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stragentstate().size() > 0) {
    stragentstate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stragentstate_);
  }
  eagentstate_ = from.eagentstate_;
  // @@protoc_insertion_point(copy_constructor:tagAgentState)
}

void tagAgentState::SharedCtor() {
  stragentstate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eagentstate_ = 0;
  _cached_size_ = 0;
}

tagAgentState::~tagAgentState() {
  // @@protoc_insertion_point(destructor:tagAgentState)
  SharedDtor();
}

void tagAgentState::SharedDtor() {
  stragentstate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagAgentState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagAgentState::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[12].descriptor;
}

const tagAgentState& tagAgentState::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagAgentState* tagAgentState::New(::google::protobuf::Arena* arena) const {
  tagAgentState* n = new tagAgentState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagAgentState::Clear() {
// @@protoc_insertion_point(message_clear_start:tagAgentState)
  stragentstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  eagentstate_ = 0;
}

bool tagAgentState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagAgentState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 eAgentState = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eagentstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strAgentState = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stragentstate()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stragentstate().data(), this->stragentstate().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagAgentState.strAgentState"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagAgentState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagAgentState)
  return false;
#undef DO_
}

void tagAgentState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagAgentState)
  // int32 eAgentState = 1;
  if (this->eagentstate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->eagentstate(), output);
  }

  // string strAgentState = 2;
  if (this->stragentstate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stragentstate().data(), this->stragentstate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagAgentState.strAgentState");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stragentstate(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagAgentState)
}

::google::protobuf::uint8* tagAgentState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagAgentState)
  // int32 eAgentState = 1;
  if (this->eagentstate() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->eagentstate(), target);
  }

  // string strAgentState = 2;
  if (this->stragentstate().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stragentstate().data(), this->stragentstate().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagAgentState.strAgentState");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stragentstate(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagAgentState)
  return target;
}

size_t tagAgentState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagAgentState)
  size_t total_size = 0;

  // string strAgentState = 2;
  if (this->stragentstate().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stragentstate());
  }

  // int32 eAgentState = 1;
  if (this->eagentstate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->eagentstate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagAgentState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagAgentState)
  GOOGLE_DCHECK_NE(&from, this);
  const tagAgentState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagAgentState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagAgentState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagAgentState)
    MergeFrom(*source);
  }
}

void tagAgentState::MergeFrom(const tagAgentState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagAgentState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stragentstate().size() > 0) {

    stragentstate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stragentstate_);
  }
  if (from.eagentstate() != 0) {
    set_eagentstate(from.eagentstate());
  }
}

void tagAgentState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagAgentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagAgentState::CopyFrom(const tagAgentState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagAgentState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagAgentState::IsInitialized() const {
  return true;
}

void tagAgentState::Swap(tagAgentState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagAgentState::InternalSwap(tagAgentState* other) {
  stragentstate_.Swap(&other->stragentstate_);
  std::swap(eagentstate_, other->eagentstate_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagAgentState::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagAgentState

// int32 eAgentState = 1;
void tagAgentState::clear_eagentstate() {
  eagentstate_ = 0;
}
::google::protobuf::int32 tagAgentState::eagentstate() const {
  // @@protoc_insertion_point(field_get:tagAgentState.eAgentState)
  return eagentstate_;
}
void tagAgentState::set_eagentstate(::google::protobuf::int32 value) {
  
  eagentstate_ = value;
  // @@protoc_insertion_point(field_set:tagAgentState.eAgentState)
}

// string strAgentState = 2;
void tagAgentState::clear_stragentstate() {
  stragentstate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagAgentState::stragentstate() const {
  // @@protoc_insertion_point(field_get:tagAgentState.strAgentState)
  return stragentstate_.GetNoArena();
}
void tagAgentState::set_stragentstate(const ::std::string& value) {
  
  stragentstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagAgentState.strAgentState)
}
#if LANG_CXX11
void tagAgentState::set_stragentstate(::std::string&& value) {
  
  stragentstate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagAgentState.strAgentState)
}
#endif
void tagAgentState::set_stragentstate(const char* value) {
  
  stragentstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagAgentState.strAgentState)
}
void tagAgentState::set_stragentstate(const char* value, size_t size) {
  
  stragentstate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagAgentState.strAgentState)
}
::std::string* tagAgentState::mutable_stragentstate() {
  
  // @@protoc_insertion_point(field_mutable:tagAgentState.strAgentState)
  return stragentstate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagAgentState::release_stragentstate() {
  // @@protoc_insertion_point(field_release:tagAgentState.strAgentState)
  
  return stragentstate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagAgentState::set_allocated_stragentstate(::std::string* stragentstate) {
  if (stragentstate != NULL) {
    
  } else {
    
  }
  stragentstate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stragentstate);
  // @@protoc_insertion_point(field_set_allocated:tagAgentState.strAgentState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagIMTrainState::kNProgressFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagIMTrainState::tagIMTrainState()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagIMTrainState)
}
tagIMTrainState::tagIMTrainState(const tagIMTrainState& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  nprogress_ = from.nprogress_;
  // @@protoc_insertion_point(copy_constructor:tagIMTrainState)
}

void tagIMTrainState::SharedCtor() {
  nprogress_ = 0;
  _cached_size_ = 0;
}

tagIMTrainState::~tagIMTrainState() {
  // @@protoc_insertion_point(destructor:tagIMTrainState)
  SharedDtor();
}

void tagIMTrainState::SharedDtor() {
}

void tagIMTrainState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagIMTrainState::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[13].descriptor;
}

const tagIMTrainState& tagIMTrainState::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagIMTrainState* tagIMTrainState::New(::google::protobuf::Arena* arena) const {
  tagIMTrainState* n = new tagIMTrainState;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagIMTrainState::Clear() {
// @@protoc_insertion_point(message_clear_start:tagIMTrainState)
  nprogress_ = 0;
}

bool tagIMTrainState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagIMTrainState)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nProgress = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nprogress_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagIMTrainState)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagIMTrainState)
  return false;
#undef DO_
}

void tagIMTrainState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagIMTrainState)
  // int32 nProgress = 1;
  if (this->nprogress() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nprogress(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagIMTrainState)
}

::google::protobuf::uint8* tagIMTrainState::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagIMTrainState)
  // int32 nProgress = 1;
  if (this->nprogress() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nprogress(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagIMTrainState)
  return target;
}

size_t tagIMTrainState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagIMTrainState)
  size_t total_size = 0;

  // int32 nProgress = 1;
  if (this->nprogress() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nprogress());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagIMTrainState::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagIMTrainState)
  GOOGLE_DCHECK_NE(&from, this);
  const tagIMTrainState* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagIMTrainState>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagIMTrainState)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagIMTrainState)
    MergeFrom(*source);
  }
}

void tagIMTrainState::MergeFrom(const tagIMTrainState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagIMTrainState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nprogress() != 0) {
    set_nprogress(from.nprogress());
  }
}

void tagIMTrainState::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagIMTrainState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagIMTrainState::CopyFrom(const tagIMTrainState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagIMTrainState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagIMTrainState::IsInitialized() const {
  return true;
}

void tagIMTrainState::Swap(tagIMTrainState* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagIMTrainState::InternalSwap(tagIMTrainState* other) {
  std::swap(nprogress_, other->nprogress_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagIMTrainState::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagIMTrainState

// int32 nProgress = 1;
void tagIMTrainState::clear_nprogress() {
  nprogress_ = 0;
}
::google::protobuf::int32 tagIMTrainState::nprogress() const {
  // @@protoc_insertion_point(field_get:tagIMTrainState.nProgress)
  return nprogress_;
}
void tagIMTrainState::set_nprogress(::google::protobuf::int32 value) {
  
  nprogress_ = value;
  // @@protoc_insertion_point(field_set:tagIMTrainState.nProgress)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagRestartResult::kERestartResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagRestartResult::tagRestartResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagRestartResult)
}
tagRestartResult::tagRestartResult(const tagRestartResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  erestartresult_ = from.erestartresult_;
  // @@protoc_insertion_point(copy_constructor:tagRestartResult)
}

void tagRestartResult::SharedCtor() {
  erestartresult_ = 0;
  _cached_size_ = 0;
}

tagRestartResult::~tagRestartResult() {
  // @@protoc_insertion_point(destructor:tagRestartResult)
  SharedDtor();
}

void tagRestartResult::SharedDtor() {
}

void tagRestartResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagRestartResult::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[14].descriptor;
}

const tagRestartResult& tagRestartResult::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagRestartResult* tagRestartResult::New(::google::protobuf::Arena* arena) const {
  tagRestartResult* n = new tagRestartResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagRestartResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tagRestartResult)
  erestartresult_ = 0;
}

bool tagRestartResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagRestartResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ERESTARTRESULTENUM eRestartResult = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_erestartresult(static_cast< ::ERESTARTRESULTENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagRestartResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagRestartResult)
  return false;
#undef DO_
}

void tagRestartResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagRestartResult)
  // .ERESTARTRESULTENUM eRestartResult = 1;
  if (this->erestartresult() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->erestartresult(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagRestartResult)
}

::google::protobuf::uint8* tagRestartResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagRestartResult)
  // .ERESTARTRESULTENUM eRestartResult = 1;
  if (this->erestartresult() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->erestartresult(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagRestartResult)
  return target;
}

size_t tagRestartResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagRestartResult)
  size_t total_size = 0;

  // .ERESTARTRESULTENUM eRestartResult = 1;
  if (this->erestartresult() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->erestartresult());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagRestartResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagRestartResult)
  GOOGLE_DCHECK_NE(&from, this);
  const tagRestartResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagRestartResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagRestartResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagRestartResult)
    MergeFrom(*source);
  }
}

void tagRestartResult::MergeFrom(const tagRestartResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagRestartResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.erestartresult() != 0) {
    set_erestartresult(from.erestartresult());
  }
}

void tagRestartResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagRestartResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagRestartResult::CopyFrom(const tagRestartResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagRestartResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagRestartResult::IsInitialized() const {
  return true;
}

void tagRestartResult::Swap(tagRestartResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagRestartResult::InternalSwap(tagRestartResult* other) {
  std::swap(erestartresult_, other->erestartresult_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagRestartResult::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[14];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagRestartResult

// .ERESTARTRESULTENUM eRestartResult = 1;
void tagRestartResult::clear_erestartresult() {
  erestartresult_ = 0;
}
::ERESTARTRESULTENUM tagRestartResult::erestartresult() const {
  // @@protoc_insertion_point(field_get:tagRestartResult.eRestartResult)
  return static_cast< ::ERESTARTRESULTENUM >(erestartresult_);
}
void tagRestartResult::set_erestartresult(::ERESTARTRESULTENUM value) {
  
  erestartresult_ = value;
  // @@protoc_insertion_point(field_set:tagRestartResult.eRestartResult)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagNewTask::kStrTaskIDFieldNumber;
const int tagNewTask::kNGameIDFieldNumber;
const int tagNewTask::kNSceneIDFieldNumber;
const int tagNewTask::kStrGameVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagNewTask::tagNewTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagNewTask)
}
tagNewTask::tagNewTask(const tagNewTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strtaskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtaskid().size() > 0) {
    strtaskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtaskid_);
  }
  strgameversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strgameversion().size() > 0) {
    strgameversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgameversion_);
  }
  ::memcpy(&ngameid_, &from.ngameid_,
    reinterpret_cast<char*>(&nsceneid_) -
    reinterpret_cast<char*>(&ngameid_) + sizeof(nsceneid_));
  // @@protoc_insertion_point(copy_constructor:tagNewTask)
}

void tagNewTask::SharedCtor() {
  strtaskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ngameid_, 0, reinterpret_cast<char*>(&nsceneid_) -
    reinterpret_cast<char*>(&ngameid_) + sizeof(nsceneid_));
  _cached_size_ = 0;
}

tagNewTask::~tagNewTask() {
  // @@protoc_insertion_point(destructor:tagNewTask)
  SharedDtor();
}

void tagNewTask::SharedDtor() {
  strtaskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagNewTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagNewTask::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[15].descriptor;
}

const tagNewTask& tagNewTask::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagNewTask* tagNewTask::New(::google::protobuf::Arena* arena) const {
  tagNewTask* n = new tagNewTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagNewTask::Clear() {
// @@protoc_insertion_point(message_clear_start:tagNewTask)
  strtaskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ngameid_, 0, reinterpret_cast<char*>(&nsceneid_) -
    reinterpret_cast<char*>(&ngameid_) + sizeof(nsceneid_));
}

bool tagNewTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagNewTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strTaskID = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtaskid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtaskid().data(), this->strtaskid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagNewTask.strTaskID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGameID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nSceneID = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nsceneid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strGameVersion = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgameversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strgameversion().data(), this->strgameversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagNewTask.strGameVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagNewTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagNewTask)
  return false;
#undef DO_
}

void tagNewTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagNewTask)
  // string strTaskID = 1;
  if (this->strtaskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtaskid().data(), this->strtaskid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagNewTask.strTaskID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strtaskid(), output);
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngameid(), output);
  }

  // int32 nSceneID = 3;
  if (this->nsceneid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nsceneid(), output);
  }

  // string strGameVersion = 4;
  if (this->strgameversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strgameversion().data(), this->strgameversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagNewTask.strGameVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->strgameversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagNewTask)
}

::google::protobuf::uint8* tagNewTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagNewTask)
  // string strTaskID = 1;
  if (this->strtaskid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtaskid().data(), this->strtaskid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagNewTask.strTaskID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strtaskid(), target);
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngameid(), target);
  }

  // int32 nSceneID = 3;
  if (this->nsceneid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nsceneid(), target);
  }

  // string strGameVersion = 4;
  if (this->strgameversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strgameversion().data(), this->strgameversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagNewTask.strGameVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->strgameversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagNewTask)
  return target;
}

size_t tagNewTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagNewTask)
  size_t total_size = 0;

  // string strTaskID = 1;
  if (this->strtaskid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtaskid());
  }

  // string strGameVersion = 4;
  if (this->strgameversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strgameversion());
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngameid());
  }

  // int32 nSceneID = 3;
  if (this->nsceneid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nsceneid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagNewTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagNewTask)
  GOOGLE_DCHECK_NE(&from, this);
  const tagNewTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagNewTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagNewTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagNewTask)
    MergeFrom(*source);
  }
}

void tagNewTask::MergeFrom(const tagNewTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagNewTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strtaskid().size() > 0) {

    strtaskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtaskid_);
  }
  if (from.strgameversion().size() > 0) {

    strgameversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgameversion_);
  }
  if (from.ngameid() != 0) {
    set_ngameid(from.ngameid());
  }
  if (from.nsceneid() != 0) {
    set_nsceneid(from.nsceneid());
  }
}

void tagNewTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagNewTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagNewTask::CopyFrom(const tagNewTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagNewTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagNewTask::IsInitialized() const {
  return true;
}

void tagNewTask::Swap(tagNewTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagNewTask::InternalSwap(tagNewTask* other) {
  strtaskid_.Swap(&other->strtaskid_);
  strgameversion_.Swap(&other->strgameversion_);
  std::swap(ngameid_, other->ngameid_);
  std::swap(nsceneid_, other->nsceneid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagNewTask::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[15];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagNewTask

// string strTaskID = 1;
void tagNewTask::clear_strtaskid() {
  strtaskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagNewTask::strtaskid() const {
  // @@protoc_insertion_point(field_get:tagNewTask.strTaskID)
  return strtaskid_.GetNoArena();
}
void tagNewTask::set_strtaskid(const ::std::string& value) {
  
  strtaskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagNewTask.strTaskID)
}
#if LANG_CXX11
void tagNewTask::set_strtaskid(::std::string&& value) {
  
  strtaskid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagNewTask.strTaskID)
}
#endif
void tagNewTask::set_strtaskid(const char* value) {
  
  strtaskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagNewTask.strTaskID)
}
void tagNewTask::set_strtaskid(const char* value, size_t size) {
  
  strtaskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagNewTask.strTaskID)
}
::std::string* tagNewTask::mutable_strtaskid() {
  
  // @@protoc_insertion_point(field_mutable:tagNewTask.strTaskID)
  return strtaskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagNewTask::release_strtaskid() {
  // @@protoc_insertion_point(field_release:tagNewTask.strTaskID)
  
  return strtaskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagNewTask::set_allocated_strtaskid(::std::string* strtaskid) {
  if (strtaskid != NULL) {
    
  } else {
    
  }
  strtaskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtaskid);
  // @@protoc_insertion_point(field_set_allocated:tagNewTask.strTaskID)
}

// int32 nGameID = 2;
void tagNewTask::clear_ngameid() {
  ngameid_ = 0;
}
::google::protobuf::int32 tagNewTask::ngameid() const {
  // @@protoc_insertion_point(field_get:tagNewTask.nGameID)
  return ngameid_;
}
void tagNewTask::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:tagNewTask.nGameID)
}

// int32 nSceneID = 3;
void tagNewTask::clear_nsceneid() {
  nsceneid_ = 0;
}
::google::protobuf::int32 tagNewTask::nsceneid() const {
  // @@protoc_insertion_point(field_get:tagNewTask.nSceneID)
  return nsceneid_;
}
void tagNewTask::set_nsceneid(::google::protobuf::int32 value) {
  
  nsceneid_ = value;
  // @@protoc_insertion_point(field_set:tagNewTask.nSceneID)
}

// string strGameVersion = 4;
void tagNewTask::clear_strgameversion() {
  strgameversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagNewTask::strgameversion() const {
  // @@protoc_insertion_point(field_get:tagNewTask.strGameVersion)
  return strgameversion_.GetNoArena();
}
void tagNewTask::set_strgameversion(const ::std::string& value) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagNewTask.strGameVersion)
}
#if LANG_CXX11
void tagNewTask::set_strgameversion(::std::string&& value) {
  
  strgameversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagNewTask.strGameVersion)
}
#endif
void tagNewTask::set_strgameversion(const char* value) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagNewTask.strGameVersion)
}
void tagNewTask::set_strgameversion(const char* value, size_t size) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagNewTask.strGameVersion)
}
::std::string* tagNewTask::mutable_strgameversion() {
  
  // @@protoc_insertion_point(field_mutable:tagNewTask.strGameVersion)
  return strgameversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagNewTask::release_strgameversion() {
  // @@protoc_insertion_point(field_release:tagNewTask.strGameVersion)
  
  return strgameversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagNewTask::set_allocated_strgameversion(::std::string* strgameversion) {
  if (strgameversion != NULL) {
    
  } else {
    
  }
  strgameversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strgameversion);
  // @@protoc_insertion_point(field_set_allocated:tagNewTask.strGameVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagTestID::kStrTestIDFieldNumber;
const int tagTestID::kNGameIDFieldNumber;
const int tagTestID::kStrGameVersionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagTestID::tagTestID()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagTestID)
}
tagTestID::tagTestID(const tagTestID& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strtestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtestid().size() > 0) {
    strtestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtestid_);
  }
  strgameversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strgameversion().size() > 0) {
    strgameversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgameversion_);
  }
  ngameid_ = from.ngameid_;
  // @@protoc_insertion_point(copy_constructor:tagTestID)
}

void tagTestID::SharedCtor() {
  strtestid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngameid_ = 0;
  _cached_size_ = 0;
}

tagTestID::~tagTestID() {
  // @@protoc_insertion_point(destructor:tagTestID)
  SharedDtor();
}

void tagTestID::SharedDtor() {
  strtestid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagTestID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagTestID::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[16].descriptor;
}

const tagTestID& tagTestID::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagTestID* tagTestID::New(::google::protobuf::Arena* arena) const {
  tagTestID* n = new tagTestID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagTestID::Clear() {
// @@protoc_insertion_point(message_clear_start:tagTestID)
  strtestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strgameversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ngameid_ = 0;
}

bool tagTestID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagTestID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strTestID = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtestid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtestid().data(), this->strtestid().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagTestID.strTestID"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nGameID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ngameid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strGameVersion = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strgameversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strgameversion().data(), this->strgameversion().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagTestID.strGameVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagTestID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagTestID)
  return false;
#undef DO_
}

void tagTestID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagTestID)
  // string strTestID = 1;
  if (this->strtestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtestid().data(), this->strtestid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagTestID.strTestID");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strtestid(), output);
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ngameid(), output);
  }

  // string strGameVersion = 3;
  if (this->strgameversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strgameversion().data(), this->strgameversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagTestID.strGameVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->strgameversion(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagTestID)
}

::google::protobuf::uint8* tagTestID::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagTestID)
  // string strTestID = 1;
  if (this->strtestid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtestid().data(), this->strtestid().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagTestID.strTestID");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strtestid(), target);
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ngameid(), target);
  }

  // string strGameVersion = 3;
  if (this->strgameversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strgameversion().data(), this->strgameversion().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagTestID.strGameVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->strgameversion(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagTestID)
  return target;
}

size_t tagTestID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagTestID)
  size_t total_size = 0;

  // string strTestID = 1;
  if (this->strtestid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtestid());
  }

  // string strGameVersion = 3;
  if (this->strgameversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strgameversion());
  }

  // int32 nGameID = 2;
  if (this->ngameid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ngameid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagTestID::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagTestID)
  GOOGLE_DCHECK_NE(&from, this);
  const tagTestID* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagTestID>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagTestID)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagTestID)
    MergeFrom(*source);
  }
}

void tagTestID::MergeFrom(const tagTestID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagTestID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strtestid().size() > 0) {

    strtestid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtestid_);
  }
  if (from.strgameversion().size() > 0) {

    strgameversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strgameversion_);
  }
  if (from.ngameid() != 0) {
    set_ngameid(from.ngameid());
  }
}

void tagTestID::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagTestID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagTestID::CopyFrom(const tagTestID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagTestID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagTestID::IsInitialized() const {
  return true;
}

void tagTestID::Swap(tagTestID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagTestID::InternalSwap(tagTestID* other) {
  strtestid_.Swap(&other->strtestid_);
  strgameversion_.Swap(&other->strgameversion_);
  std::swap(ngameid_, other->ngameid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagTestID::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[16];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagTestID

// string strTestID = 1;
void tagTestID::clear_strtestid() {
  strtestid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagTestID::strtestid() const {
  // @@protoc_insertion_point(field_get:tagTestID.strTestID)
  return strtestid_.GetNoArena();
}
void tagTestID::set_strtestid(const ::std::string& value) {
  
  strtestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagTestID.strTestID)
}
#if LANG_CXX11
void tagTestID::set_strtestid(::std::string&& value) {
  
  strtestid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagTestID.strTestID)
}
#endif
void tagTestID::set_strtestid(const char* value) {
  
  strtestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagTestID.strTestID)
}
void tagTestID::set_strtestid(const char* value, size_t size) {
  
  strtestid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagTestID.strTestID)
}
::std::string* tagTestID::mutable_strtestid() {
  
  // @@protoc_insertion_point(field_mutable:tagTestID.strTestID)
  return strtestid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagTestID::release_strtestid() {
  // @@protoc_insertion_point(field_release:tagTestID.strTestID)
  
  return strtestid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagTestID::set_allocated_strtestid(::std::string* strtestid) {
  if (strtestid != NULL) {
    
  } else {
    
  }
  strtestid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtestid);
  // @@protoc_insertion_point(field_set_allocated:tagTestID.strTestID)
}

// int32 nGameID = 2;
void tagTestID::clear_ngameid() {
  ngameid_ = 0;
}
::google::protobuf::int32 tagTestID::ngameid() const {
  // @@protoc_insertion_point(field_get:tagTestID.nGameID)
  return ngameid_;
}
void tagTestID::set_ngameid(::google::protobuf::int32 value) {
  
  ngameid_ = value;
  // @@protoc_insertion_point(field_set:tagTestID.nGameID)
}

// string strGameVersion = 3;
void tagTestID::clear_strgameversion() {
  strgameversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagTestID::strgameversion() const {
  // @@protoc_insertion_point(field_get:tagTestID.strGameVersion)
  return strgameversion_.GetNoArena();
}
void tagTestID::set_strgameversion(const ::std::string& value) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagTestID.strGameVersion)
}
#if LANG_CXX11
void tagTestID::set_strgameversion(::std::string&& value) {
  
  strgameversion_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagTestID.strGameVersion)
}
#endif
void tagTestID::set_strgameversion(const char* value) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagTestID.strGameVersion)
}
void tagTestID::set_strgameversion(const char* value, size_t size) {
  
  strgameversion_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagTestID.strGameVersion)
}
::std::string* tagTestID::mutable_strgameversion() {
  
  // @@protoc_insertion_point(field_mutable:tagTestID.strGameVersion)
  return strgameversion_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagTestID::release_strgameversion() {
  // @@protoc_insertion_point(field_release:tagTestID.strGameVersion)
  
  return strgameversion_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagTestID::set_allocated_strgameversion(::std::string* strgameversion) {
  if (strgameversion != NULL) {
    
  } else {
    
  }
  strgameversion_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strgameversion);
  // @@protoc_insertion_point(field_set_allocated:tagTestID.strGameVersion)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagMessage::kEMsgIDFieldNumber;
const int tagMessage::kStServiceRegisterFieldNumber;
const int tagMessage::kStTaskReportFieldNumber;
const int tagMessage::kStSrcImageInfoFieldNumber;
const int tagMessage::kStUIAPIStateFieldNumber;
const int tagMessage::kStUIActionFieldNumber;
const int tagMessage::kStAIActionFieldNumber;
const int tagMessage::kStServiceStateFieldNumber;
const int tagMessage::kStChangeGameStateFieldNumber;
const int tagMessage::kStAgentStateFieldNumber;
const int tagMessage::kStRestartResultFieldNumber;
const int tagMessage::kStNewTaskFieldNumber;
const int tagMessage::kStTestIDFieldNumber;
const int tagMessage::kStPBAgentMsgFieldNumber;
const int tagMessage::kStIMTrainStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagMessage::tagMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_common_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagMessage)
}
tagMessage::tagMessage(const tagMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stserviceregister()) {
    stserviceregister_ = new ::tagServiceRegister(*from.stserviceregister_);
  } else {
    stserviceregister_ = NULL;
  }
  if (from.has_sttaskreport()) {
    sttaskreport_ = new ::tagTaskReport(*from.sttaskreport_);
  } else {
    sttaskreport_ = NULL;
  }
  if (from.has_stsrcimageinfo()) {
    stsrcimageinfo_ = new ::tagSrcImageInfo(*from.stsrcimageinfo_);
  } else {
    stsrcimageinfo_ = NULL;
  }
  if (from.has_stuiapistate()) {
    stuiapistate_ = new ::tagUIAPIState(*from.stuiapistate_);
  } else {
    stuiapistate_ = NULL;
  }
  if (from.has_stuiaction()) {
    stuiaction_ = new ::tagUIAction(*from.stuiaction_);
  } else {
    stuiaction_ = NULL;
  }
  if (from.has_staiaction()) {
    staiaction_ = new ::tagAIAction(*from.staiaction_);
  } else {
    staiaction_ = NULL;
  }
  if (from.has_stservicestate()) {
    stservicestate_ = new ::tagServiceState(*from.stservicestate_);
  } else {
    stservicestate_ = NULL;
  }
  if (from.has_stchangegamestate()) {
    stchangegamestate_ = new ::tagChangeGameState(*from.stchangegamestate_);
  } else {
    stchangegamestate_ = NULL;
  }
  if (from.has_stagentstate()) {
    stagentstate_ = new ::tagAgentState(*from.stagentstate_);
  } else {
    stagentstate_ = NULL;
  }
  if (from.has_strestartresult()) {
    strestartresult_ = new ::tagRestartResult(*from.strestartresult_);
  } else {
    strestartresult_ = NULL;
  }
  if (from.has_stnewtask()) {
    stnewtask_ = new ::tagNewTask(*from.stnewtask_);
  } else {
    stnewtask_ = NULL;
  }
  if (from.has_sttestid()) {
    sttestid_ = new ::tagTestID(*from.sttestid_);
  } else {
    sttestid_ = NULL;
  }
  if (from.has_stpbagentmsg()) {
    stpbagentmsg_ = new ::tagPBAgentMsg(*from.stpbagentmsg_);
  } else {
    stpbagentmsg_ = NULL;
  }
  if (from.has_stimtrainstate()) {
    stimtrainstate_ = new ::tagIMTrainState(*from.stimtrainstate_);
  } else {
    stimtrainstate_ = NULL;
  }
  emsgid_ = from.emsgid_;
  // @@protoc_insertion_point(copy_constructor:tagMessage)
}

void tagMessage::SharedCtor() {
  ::memset(&stserviceregister_, 0, reinterpret_cast<char*>(&emsgid_) -
    reinterpret_cast<char*>(&stserviceregister_) + sizeof(emsgid_));
  _cached_size_ = 0;
}

tagMessage::~tagMessage() {
  // @@protoc_insertion_point(destructor:tagMessage)
  SharedDtor();
}

void tagMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stserviceregister_;
  }
  if (this != internal_default_instance()) {
    delete sttaskreport_;
  }
  if (this != internal_default_instance()) {
    delete stsrcimageinfo_;
  }
  if (this != internal_default_instance()) {
    delete stuiapistate_;
  }
  if (this != internal_default_instance()) {
    delete stuiaction_;
  }
  if (this != internal_default_instance()) {
    delete staiaction_;
  }
  if (this != internal_default_instance()) {
    delete stservicestate_;
  }
  if (this != internal_default_instance()) {
    delete stchangegamestate_;
  }
  if (this != internal_default_instance()) {
    delete stagentstate_;
  }
  if (this != internal_default_instance()) {
    delete strestartresult_;
  }
  if (this != internal_default_instance()) {
    delete stnewtask_;
  }
  if (this != internal_default_instance()) {
    delete sttestid_;
  }
  if (this != internal_default_instance()) {
    delete stpbagentmsg_;
  }
  if (this != internal_default_instance()) {
    delete stimtrainstate_;
  }
}

void tagMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagMessage::descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[17].descriptor;
}

const tagMessage& tagMessage::default_instance() {
  protobuf_common_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagMessage* tagMessage::New(::google::protobuf::Arena* arena) const {
  tagMessage* n = new tagMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:tagMessage)
  if (GetArenaNoVirtual() == NULL && stserviceregister_ != NULL) {
    delete stserviceregister_;
  }
  stserviceregister_ = NULL;
  if (GetArenaNoVirtual() == NULL && sttaskreport_ != NULL) {
    delete sttaskreport_;
  }
  sttaskreport_ = NULL;
  if (GetArenaNoVirtual() == NULL && stsrcimageinfo_ != NULL) {
    delete stsrcimageinfo_;
  }
  stsrcimageinfo_ = NULL;
  if (GetArenaNoVirtual() == NULL && stuiapistate_ != NULL) {
    delete stuiapistate_;
  }
  stuiapistate_ = NULL;
  if (GetArenaNoVirtual() == NULL && stuiaction_ != NULL) {
    delete stuiaction_;
  }
  stuiaction_ = NULL;
  if (GetArenaNoVirtual() == NULL && staiaction_ != NULL) {
    delete staiaction_;
  }
  staiaction_ = NULL;
  if (GetArenaNoVirtual() == NULL && stservicestate_ != NULL) {
    delete stservicestate_;
  }
  stservicestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && stchangegamestate_ != NULL) {
    delete stchangegamestate_;
  }
  stchangegamestate_ = NULL;
  if (GetArenaNoVirtual() == NULL && stagentstate_ != NULL) {
    delete stagentstate_;
  }
  stagentstate_ = NULL;
  if (GetArenaNoVirtual() == NULL && strestartresult_ != NULL) {
    delete strestartresult_;
  }
  strestartresult_ = NULL;
  if (GetArenaNoVirtual() == NULL && stnewtask_ != NULL) {
    delete stnewtask_;
  }
  stnewtask_ = NULL;
  if (GetArenaNoVirtual() == NULL && sttestid_ != NULL) {
    delete sttestid_;
  }
  sttestid_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbagentmsg_ != NULL) {
    delete stpbagentmsg_;
  }
  stpbagentmsg_ = NULL;
  if (GetArenaNoVirtual() == NULL && stimtrainstate_ != NULL) {
    delete stimtrainstate_;
  }
  stimtrainstate_ = NULL;
  emsgid_ = 0;
}

bool tagMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EMSGIDENUM eMsgID = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_emsgid(static_cast< ::EMSGIDENUM >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagServiceRegister stServiceRegister = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stserviceregister()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagTaskReport stTaskReport = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttaskreport()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagSrcImageInfo stSrcImageInfo = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stsrcimageinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagUIAPIState stUIAPIState = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuiapistate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagUIAction stUIAction = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stuiaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagAIAction stAIAction = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_staiaction()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagServiceState stServiceState = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stservicestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagChangeGameState stChangeGameState = 14;
      case 14: {
        if (tag == 114u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stchangegamestate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagAgentState stAgentState = 15;
      case 15: {
        if (tag == 122u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stagentstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagRestartResult stRestartResult = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strestartresult()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagNewTask stNewTask = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnewtask()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagTestID stTestID = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttestid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBAgentMsg stPBAgentMsg = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbagentmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagIMTrainState stIMTrainState = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stimtrainstate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagMessage)
  return false;
#undef DO_
}

void tagMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagMessage)
  // .EMSGIDENUM eMsgID = 1;
  if (this->emsgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->emsgid(), output);
  }

  // .tagServiceRegister stServiceRegister = 2;
  if (this->has_stserviceregister()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stserviceregister_, output);
  }

  // .tagTaskReport stTaskReport = 3;
  if (this->has_sttaskreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->sttaskreport_, output);
  }

  // .tagSrcImageInfo stSrcImageInfo = 4;
  if (this->has_stsrcimageinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->stsrcimageinfo_, output);
  }

  // .tagUIAPIState stUIAPIState = 9;
  if (this->has_stuiapistate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->stuiapistate_, output);
  }

  // .tagUIAction stUIAction = 10;
  if (this->has_stuiaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->stuiaction_, output);
  }

  // .tagAIAction stAIAction = 12;
  if (this->has_staiaction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->staiaction_, output);
  }

  // .tagServiceState stServiceState = 13;
  if (this->has_stservicestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *this->stservicestate_, output);
  }

  // .tagChangeGameState stChangeGameState = 14;
  if (this->has_stchangegamestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *this->stchangegamestate_, output);
  }

  // .tagAgentState stAgentState = 15;
  if (this->has_stagentstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *this->stagentstate_, output);
  }

  // .tagRestartResult stRestartResult = 16;
  if (this->has_strestartresult()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *this->strestartresult_, output);
  }

  // .tagNewTask stNewTask = 17;
  if (this->has_stnewtask()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *this->stnewtask_, output);
  }

  // .tagTestID stTestID = 18;
  if (this->has_sttestid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *this->sttestid_, output);
  }

  // .tagPBAgentMsg stPBAgentMsg = 19;
  if (this->has_stpbagentmsg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *this->stpbagentmsg_, output);
  }

  // .tagIMTrainState stIMTrainState = 20;
  if (this->has_stimtrainstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *this->stimtrainstate_, output);
  }

  // @@protoc_insertion_point(serialize_end:tagMessage)
}

::google::protobuf::uint8* tagMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagMessage)
  // .EMSGIDENUM eMsgID = 1;
  if (this->emsgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->emsgid(), target);
  }

  // .tagServiceRegister stServiceRegister = 2;
  if (this->has_stserviceregister()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stserviceregister_, false, target);
  }

  // .tagTaskReport stTaskReport = 3;
  if (this->has_sttaskreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->sttaskreport_, false, target);
  }

  // .tagSrcImageInfo stSrcImageInfo = 4;
  if (this->has_stsrcimageinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->stsrcimageinfo_, false, target);
  }

  // .tagUIAPIState stUIAPIState = 9;
  if (this->has_stuiapistate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->stuiapistate_, false, target);
  }

  // .tagUIAction stUIAction = 10;
  if (this->has_stuiaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->stuiaction_, false, target);
  }

  // .tagAIAction stAIAction = 12;
  if (this->has_staiaction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->staiaction_, false, target);
  }

  // .tagServiceState stServiceState = 13;
  if (this->has_stservicestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *this->stservicestate_, false, target);
  }

  // .tagChangeGameState stChangeGameState = 14;
  if (this->has_stchangegamestate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *this->stchangegamestate_, false, target);
  }

  // .tagAgentState stAgentState = 15;
  if (this->has_stagentstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *this->stagentstate_, false, target);
  }

  // .tagRestartResult stRestartResult = 16;
  if (this->has_strestartresult()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *this->strestartresult_, false, target);
  }

  // .tagNewTask stNewTask = 17;
  if (this->has_stnewtask()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *this->stnewtask_, false, target);
  }

  // .tagTestID stTestID = 18;
  if (this->has_sttestid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *this->sttestid_, false, target);
  }

  // .tagPBAgentMsg stPBAgentMsg = 19;
  if (this->has_stpbagentmsg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *this->stpbagentmsg_, false, target);
  }

  // .tagIMTrainState stIMTrainState = 20;
  if (this->has_stimtrainstate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *this->stimtrainstate_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagMessage)
  return target;
}

size_t tagMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagMessage)
  size_t total_size = 0;

  // .tagServiceRegister stServiceRegister = 2;
  if (this->has_stserviceregister()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stserviceregister_);
  }

  // .tagTaskReport stTaskReport = 3;
  if (this->has_sttaskreport()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sttaskreport_);
  }

  // .tagSrcImageInfo stSrcImageInfo = 4;
  if (this->has_stsrcimageinfo()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stsrcimageinfo_);
  }

  // .tagUIAPIState stUIAPIState = 9;
  if (this->has_stuiapistate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stuiapistate_);
  }

  // .tagUIAction stUIAction = 10;
  if (this->has_stuiaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stuiaction_);
  }

  // .tagAIAction stAIAction = 12;
  if (this->has_staiaction()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->staiaction_);
  }

  // .tagServiceState stServiceState = 13;
  if (this->has_stservicestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stservicestate_);
  }

  // .tagChangeGameState stChangeGameState = 14;
  if (this->has_stchangegamestate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stchangegamestate_);
  }

  // .tagAgentState stAgentState = 15;
  if (this->has_stagentstate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stagentstate_);
  }

  // .tagRestartResult stRestartResult = 16;
  if (this->has_strestartresult()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->strestartresult_);
  }

  // .tagNewTask stNewTask = 17;
  if (this->has_stnewtask()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stnewtask_);
  }

  // .tagTestID stTestID = 18;
  if (this->has_sttestid()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->sttestid_);
  }

  // .tagPBAgentMsg stPBAgentMsg = 19;
  if (this->has_stpbagentmsg()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbagentmsg_);
  }

  // .tagIMTrainState stIMTrainState = 20;
  if (this->has_stimtrainstate()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stimtrainstate_);
  }

  // .EMSGIDENUM eMsgID = 1;
  if (this->emsgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->emsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const tagMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagMessage)
    MergeFrom(*source);
  }
}

void tagMessage::MergeFrom(const tagMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stserviceregister()) {
    mutable_stserviceregister()->::tagServiceRegister::MergeFrom(from.stserviceregister());
  }
  if (from.has_sttaskreport()) {
    mutable_sttaskreport()->::tagTaskReport::MergeFrom(from.sttaskreport());
  }
  if (from.has_stsrcimageinfo()) {
    mutable_stsrcimageinfo()->::tagSrcImageInfo::MergeFrom(from.stsrcimageinfo());
  }
  if (from.has_stuiapistate()) {
    mutable_stuiapistate()->::tagUIAPIState::MergeFrom(from.stuiapistate());
  }
  if (from.has_stuiaction()) {
    mutable_stuiaction()->::tagUIAction::MergeFrom(from.stuiaction());
  }
  if (from.has_staiaction()) {
    mutable_staiaction()->::tagAIAction::MergeFrom(from.staiaction());
  }
  if (from.has_stservicestate()) {
    mutable_stservicestate()->::tagServiceState::MergeFrom(from.stservicestate());
  }
  if (from.has_stchangegamestate()) {
    mutable_stchangegamestate()->::tagChangeGameState::MergeFrom(from.stchangegamestate());
  }
  if (from.has_stagentstate()) {
    mutable_stagentstate()->::tagAgentState::MergeFrom(from.stagentstate());
  }
  if (from.has_strestartresult()) {
    mutable_strestartresult()->::tagRestartResult::MergeFrom(from.strestartresult());
  }
  if (from.has_stnewtask()) {
    mutable_stnewtask()->::tagNewTask::MergeFrom(from.stnewtask());
  }
  if (from.has_sttestid()) {
    mutable_sttestid()->::tagTestID::MergeFrom(from.sttestid());
  }
  if (from.has_stpbagentmsg()) {
    mutable_stpbagentmsg()->::tagPBAgentMsg::MergeFrom(from.stpbagentmsg());
  }
  if (from.has_stimtrainstate()) {
    mutable_stimtrainstate()->::tagIMTrainState::MergeFrom(from.stimtrainstate());
  }
  if (from.emsgid() != 0) {
    set_emsgid(from.emsgid());
  }
}

void tagMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagMessage::CopyFrom(const tagMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagMessage::IsInitialized() const {
  return true;
}

void tagMessage::Swap(tagMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagMessage::InternalSwap(tagMessage* other) {
  std::swap(stserviceregister_, other->stserviceregister_);
  std::swap(sttaskreport_, other->sttaskreport_);
  std::swap(stsrcimageinfo_, other->stsrcimageinfo_);
  std::swap(stuiapistate_, other->stuiapistate_);
  std::swap(stuiaction_, other->stuiaction_);
  std::swap(staiaction_, other->staiaction_);
  std::swap(stservicestate_, other->stservicestate_);
  std::swap(stchangegamestate_, other->stchangegamestate_);
  std::swap(stagentstate_, other->stagentstate_);
  std::swap(strestartresult_, other->strestartresult_);
  std::swap(stnewtask_, other->stnewtask_);
  std::swap(sttestid_, other->sttestid_);
  std::swap(stpbagentmsg_, other->stpbagentmsg_);
  std::swap(stimtrainstate_, other->stimtrainstate_);
  std::swap(emsgid_, other->emsgid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagMessage::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_metadata[17];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagMessage

// .EMSGIDENUM eMsgID = 1;
void tagMessage::clear_emsgid() {
  emsgid_ = 0;
}
::EMSGIDENUM tagMessage::emsgid() const {
  // @@protoc_insertion_point(field_get:tagMessage.eMsgID)
  return static_cast< ::EMSGIDENUM >(emsgid_);
}
void tagMessage::set_emsgid(::EMSGIDENUM value) {
  
  emsgid_ = value;
  // @@protoc_insertion_point(field_set:tagMessage.eMsgID)
}

// .tagServiceRegister stServiceRegister = 2;
bool tagMessage::has_stserviceregister() const {
  return this != internal_default_instance() && stserviceregister_ != NULL;
}
void tagMessage::clear_stserviceregister() {
  if (GetArenaNoVirtual() == NULL && stserviceregister_ != NULL) delete stserviceregister_;
  stserviceregister_ = NULL;
}
const ::tagServiceRegister& tagMessage::stserviceregister() const {
  // @@protoc_insertion_point(field_get:tagMessage.stServiceRegister)
  return stserviceregister_ != NULL ? *stserviceregister_
                         : *::tagServiceRegister::internal_default_instance();
}
::tagServiceRegister* tagMessage::mutable_stserviceregister() {
  
  if (stserviceregister_ == NULL) {
    stserviceregister_ = new ::tagServiceRegister;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stServiceRegister)
  return stserviceregister_;
}
::tagServiceRegister* tagMessage::release_stserviceregister() {
  // @@protoc_insertion_point(field_release:tagMessage.stServiceRegister)
  
  ::tagServiceRegister* temp = stserviceregister_;
  stserviceregister_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stserviceregister(::tagServiceRegister* stserviceregister) {
  delete stserviceregister_;
  stserviceregister_ = stserviceregister;
  if (stserviceregister) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stServiceRegister)
}

// .tagTaskReport stTaskReport = 3;
bool tagMessage::has_sttaskreport() const {
  return this != internal_default_instance() && sttaskreport_ != NULL;
}
void tagMessage::clear_sttaskreport() {
  if (GetArenaNoVirtual() == NULL && sttaskreport_ != NULL) delete sttaskreport_;
  sttaskreport_ = NULL;
}
const ::tagTaskReport& tagMessage::sttaskreport() const {
  // @@protoc_insertion_point(field_get:tagMessage.stTaskReport)
  return sttaskreport_ != NULL ? *sttaskreport_
                         : *::tagTaskReport::internal_default_instance();
}
::tagTaskReport* tagMessage::mutable_sttaskreport() {
  
  if (sttaskreport_ == NULL) {
    sttaskreport_ = new ::tagTaskReport;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stTaskReport)
  return sttaskreport_;
}
::tagTaskReport* tagMessage::release_sttaskreport() {
  // @@protoc_insertion_point(field_release:tagMessage.stTaskReport)
  
  ::tagTaskReport* temp = sttaskreport_;
  sttaskreport_ = NULL;
  return temp;
}
void tagMessage::set_allocated_sttaskreport(::tagTaskReport* sttaskreport) {
  delete sttaskreport_;
  sttaskreport_ = sttaskreport;
  if (sttaskreport) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stTaskReport)
}

// .tagSrcImageInfo stSrcImageInfo = 4;
bool tagMessage::has_stsrcimageinfo() const {
  return this != internal_default_instance() && stsrcimageinfo_ != NULL;
}
void tagMessage::clear_stsrcimageinfo() {
  if (GetArenaNoVirtual() == NULL && stsrcimageinfo_ != NULL) delete stsrcimageinfo_;
  stsrcimageinfo_ = NULL;
}
const ::tagSrcImageInfo& tagMessage::stsrcimageinfo() const {
  // @@protoc_insertion_point(field_get:tagMessage.stSrcImageInfo)
  return stsrcimageinfo_ != NULL ? *stsrcimageinfo_
                         : *::tagSrcImageInfo::internal_default_instance();
}
::tagSrcImageInfo* tagMessage::mutable_stsrcimageinfo() {
  
  if (stsrcimageinfo_ == NULL) {
    stsrcimageinfo_ = new ::tagSrcImageInfo;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stSrcImageInfo)
  return stsrcimageinfo_;
}
::tagSrcImageInfo* tagMessage::release_stsrcimageinfo() {
  // @@protoc_insertion_point(field_release:tagMessage.stSrcImageInfo)
  
  ::tagSrcImageInfo* temp = stsrcimageinfo_;
  stsrcimageinfo_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stsrcimageinfo(::tagSrcImageInfo* stsrcimageinfo) {
  delete stsrcimageinfo_;
  stsrcimageinfo_ = stsrcimageinfo;
  if (stsrcimageinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stSrcImageInfo)
}

// .tagUIAPIState stUIAPIState = 9;
bool tagMessage::has_stuiapistate() const {
  return this != internal_default_instance() && stuiapistate_ != NULL;
}
void tagMessage::clear_stuiapistate() {
  if (GetArenaNoVirtual() == NULL && stuiapistate_ != NULL) delete stuiapistate_;
  stuiapistate_ = NULL;
}
const ::tagUIAPIState& tagMessage::stuiapistate() const {
  // @@protoc_insertion_point(field_get:tagMessage.stUIAPIState)
  return stuiapistate_ != NULL ? *stuiapistate_
                         : *::tagUIAPIState::internal_default_instance();
}
::tagUIAPIState* tagMessage::mutable_stuiapistate() {
  
  if (stuiapistate_ == NULL) {
    stuiapistate_ = new ::tagUIAPIState;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stUIAPIState)
  return stuiapistate_;
}
::tagUIAPIState* tagMessage::release_stuiapistate() {
  // @@protoc_insertion_point(field_release:tagMessage.stUIAPIState)
  
  ::tagUIAPIState* temp = stuiapistate_;
  stuiapistate_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stuiapistate(::tagUIAPIState* stuiapistate) {
  delete stuiapistate_;
  stuiapistate_ = stuiapistate;
  if (stuiapistate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stUIAPIState)
}

// .tagUIAction stUIAction = 10;
bool tagMessage::has_stuiaction() const {
  return this != internal_default_instance() && stuiaction_ != NULL;
}
void tagMessage::clear_stuiaction() {
  if (GetArenaNoVirtual() == NULL && stuiaction_ != NULL) delete stuiaction_;
  stuiaction_ = NULL;
}
const ::tagUIAction& tagMessage::stuiaction() const {
  // @@protoc_insertion_point(field_get:tagMessage.stUIAction)
  return stuiaction_ != NULL ? *stuiaction_
                         : *::tagUIAction::internal_default_instance();
}
::tagUIAction* tagMessage::mutable_stuiaction() {
  
  if (stuiaction_ == NULL) {
    stuiaction_ = new ::tagUIAction;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stUIAction)
  return stuiaction_;
}
::tagUIAction* tagMessage::release_stuiaction() {
  // @@protoc_insertion_point(field_release:tagMessage.stUIAction)
  
  ::tagUIAction* temp = stuiaction_;
  stuiaction_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stuiaction(::tagUIAction* stuiaction) {
  delete stuiaction_;
  stuiaction_ = stuiaction;
  if (stuiaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stUIAction)
}

// .tagAIAction stAIAction = 12;
bool tagMessage::has_staiaction() const {
  return this != internal_default_instance() && staiaction_ != NULL;
}
void tagMessage::clear_staiaction() {
  if (GetArenaNoVirtual() == NULL && staiaction_ != NULL) delete staiaction_;
  staiaction_ = NULL;
}
const ::tagAIAction& tagMessage::staiaction() const {
  // @@protoc_insertion_point(field_get:tagMessage.stAIAction)
  return staiaction_ != NULL ? *staiaction_
                         : *::tagAIAction::internal_default_instance();
}
::tagAIAction* tagMessage::mutable_staiaction() {
  
  if (staiaction_ == NULL) {
    staiaction_ = new ::tagAIAction;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stAIAction)
  return staiaction_;
}
::tagAIAction* tagMessage::release_staiaction() {
  // @@protoc_insertion_point(field_release:tagMessage.stAIAction)
  
  ::tagAIAction* temp = staiaction_;
  staiaction_ = NULL;
  return temp;
}
void tagMessage::set_allocated_staiaction(::tagAIAction* staiaction) {
  delete staiaction_;
  staiaction_ = staiaction;
  if (staiaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stAIAction)
}

// .tagServiceState stServiceState = 13;
bool tagMessage::has_stservicestate() const {
  return this != internal_default_instance() && stservicestate_ != NULL;
}
void tagMessage::clear_stservicestate() {
  if (GetArenaNoVirtual() == NULL && stservicestate_ != NULL) delete stservicestate_;
  stservicestate_ = NULL;
}
const ::tagServiceState& tagMessage::stservicestate() const {
  // @@protoc_insertion_point(field_get:tagMessage.stServiceState)
  return stservicestate_ != NULL ? *stservicestate_
                         : *::tagServiceState::internal_default_instance();
}
::tagServiceState* tagMessage::mutable_stservicestate() {
  
  if (stservicestate_ == NULL) {
    stservicestate_ = new ::tagServiceState;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stServiceState)
  return stservicestate_;
}
::tagServiceState* tagMessage::release_stservicestate() {
  // @@protoc_insertion_point(field_release:tagMessage.stServiceState)
  
  ::tagServiceState* temp = stservicestate_;
  stservicestate_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stservicestate(::tagServiceState* stservicestate) {
  delete stservicestate_;
  stservicestate_ = stservicestate;
  if (stservicestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stServiceState)
}

// .tagChangeGameState stChangeGameState = 14;
bool tagMessage::has_stchangegamestate() const {
  return this != internal_default_instance() && stchangegamestate_ != NULL;
}
void tagMessage::clear_stchangegamestate() {
  if (GetArenaNoVirtual() == NULL && stchangegamestate_ != NULL) delete stchangegamestate_;
  stchangegamestate_ = NULL;
}
const ::tagChangeGameState& tagMessage::stchangegamestate() const {
  // @@protoc_insertion_point(field_get:tagMessage.stChangeGameState)
  return stchangegamestate_ != NULL ? *stchangegamestate_
                         : *::tagChangeGameState::internal_default_instance();
}
::tagChangeGameState* tagMessage::mutable_stchangegamestate() {
  
  if (stchangegamestate_ == NULL) {
    stchangegamestate_ = new ::tagChangeGameState;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stChangeGameState)
  return stchangegamestate_;
}
::tagChangeGameState* tagMessage::release_stchangegamestate() {
  // @@protoc_insertion_point(field_release:tagMessage.stChangeGameState)
  
  ::tagChangeGameState* temp = stchangegamestate_;
  stchangegamestate_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stchangegamestate(::tagChangeGameState* stchangegamestate) {
  delete stchangegamestate_;
  stchangegamestate_ = stchangegamestate;
  if (stchangegamestate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stChangeGameState)
}

// .tagAgentState stAgentState = 15;
bool tagMessage::has_stagentstate() const {
  return this != internal_default_instance() && stagentstate_ != NULL;
}
void tagMessage::clear_stagentstate() {
  if (GetArenaNoVirtual() == NULL && stagentstate_ != NULL) delete stagentstate_;
  stagentstate_ = NULL;
}
const ::tagAgentState& tagMessage::stagentstate() const {
  // @@protoc_insertion_point(field_get:tagMessage.stAgentState)
  return stagentstate_ != NULL ? *stagentstate_
                         : *::tagAgentState::internal_default_instance();
}
::tagAgentState* tagMessage::mutable_stagentstate() {
  
  if (stagentstate_ == NULL) {
    stagentstate_ = new ::tagAgentState;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stAgentState)
  return stagentstate_;
}
::tagAgentState* tagMessage::release_stagentstate() {
  // @@protoc_insertion_point(field_release:tagMessage.stAgentState)
  
  ::tagAgentState* temp = stagentstate_;
  stagentstate_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stagentstate(::tagAgentState* stagentstate) {
  delete stagentstate_;
  stagentstate_ = stagentstate;
  if (stagentstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stAgentState)
}

// .tagRestartResult stRestartResult = 16;
bool tagMessage::has_strestartresult() const {
  return this != internal_default_instance() && strestartresult_ != NULL;
}
void tagMessage::clear_strestartresult() {
  if (GetArenaNoVirtual() == NULL && strestartresult_ != NULL) delete strestartresult_;
  strestartresult_ = NULL;
}
const ::tagRestartResult& tagMessage::strestartresult() const {
  // @@protoc_insertion_point(field_get:tagMessage.stRestartResult)
  return strestartresult_ != NULL ? *strestartresult_
                         : *::tagRestartResult::internal_default_instance();
}
::tagRestartResult* tagMessage::mutable_strestartresult() {
  
  if (strestartresult_ == NULL) {
    strestartresult_ = new ::tagRestartResult;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stRestartResult)
  return strestartresult_;
}
::tagRestartResult* tagMessage::release_strestartresult() {
  // @@protoc_insertion_point(field_release:tagMessage.stRestartResult)
  
  ::tagRestartResult* temp = strestartresult_;
  strestartresult_ = NULL;
  return temp;
}
void tagMessage::set_allocated_strestartresult(::tagRestartResult* strestartresult) {
  delete strestartresult_;
  strestartresult_ = strestartresult;
  if (strestartresult) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stRestartResult)
}

// .tagNewTask stNewTask = 17;
bool tagMessage::has_stnewtask() const {
  return this != internal_default_instance() && stnewtask_ != NULL;
}
void tagMessage::clear_stnewtask() {
  if (GetArenaNoVirtual() == NULL && stnewtask_ != NULL) delete stnewtask_;
  stnewtask_ = NULL;
}
const ::tagNewTask& tagMessage::stnewtask() const {
  // @@protoc_insertion_point(field_get:tagMessage.stNewTask)
  return stnewtask_ != NULL ? *stnewtask_
                         : *::tagNewTask::internal_default_instance();
}
::tagNewTask* tagMessage::mutable_stnewtask() {
  
  if (stnewtask_ == NULL) {
    stnewtask_ = new ::tagNewTask;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stNewTask)
  return stnewtask_;
}
::tagNewTask* tagMessage::release_stnewtask() {
  // @@protoc_insertion_point(field_release:tagMessage.stNewTask)
  
  ::tagNewTask* temp = stnewtask_;
  stnewtask_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stnewtask(::tagNewTask* stnewtask) {
  delete stnewtask_;
  stnewtask_ = stnewtask;
  if (stnewtask) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stNewTask)
}

// .tagTestID stTestID = 18;
bool tagMessage::has_sttestid() const {
  return this != internal_default_instance() && sttestid_ != NULL;
}
void tagMessage::clear_sttestid() {
  if (GetArenaNoVirtual() == NULL && sttestid_ != NULL) delete sttestid_;
  sttestid_ = NULL;
}
const ::tagTestID& tagMessage::sttestid() const {
  // @@protoc_insertion_point(field_get:tagMessage.stTestID)
  return sttestid_ != NULL ? *sttestid_
                         : *::tagTestID::internal_default_instance();
}
::tagTestID* tagMessage::mutable_sttestid() {
  
  if (sttestid_ == NULL) {
    sttestid_ = new ::tagTestID;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stTestID)
  return sttestid_;
}
::tagTestID* tagMessage::release_sttestid() {
  // @@protoc_insertion_point(field_release:tagMessage.stTestID)
  
  ::tagTestID* temp = sttestid_;
  sttestid_ = NULL;
  return temp;
}
void tagMessage::set_allocated_sttestid(::tagTestID* sttestid) {
  delete sttestid_;
  sttestid_ = sttestid;
  if (sttestid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stTestID)
}

// .tagPBAgentMsg stPBAgentMsg = 19;
bool tagMessage::has_stpbagentmsg() const {
  return this != internal_default_instance() && stpbagentmsg_ != NULL;
}
void tagMessage::clear_stpbagentmsg() {
  if (GetArenaNoVirtual() == NULL && stpbagentmsg_ != NULL) delete stpbagentmsg_;
  stpbagentmsg_ = NULL;
}
const ::tagPBAgentMsg& tagMessage::stpbagentmsg() const {
  // @@protoc_insertion_point(field_get:tagMessage.stPBAgentMsg)
  return stpbagentmsg_ != NULL ? *stpbagentmsg_
                         : *::tagPBAgentMsg::internal_default_instance();
}
::tagPBAgentMsg* tagMessage::mutable_stpbagentmsg() {
  
  if (stpbagentmsg_ == NULL) {
    stpbagentmsg_ = new ::tagPBAgentMsg;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stPBAgentMsg)
  return stpbagentmsg_;
}
::tagPBAgentMsg* tagMessage::release_stpbagentmsg() {
  // @@protoc_insertion_point(field_release:tagMessage.stPBAgentMsg)
  
  ::tagPBAgentMsg* temp = stpbagentmsg_;
  stpbagentmsg_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stpbagentmsg(::tagPBAgentMsg* stpbagentmsg) {
  delete stpbagentmsg_;
  stpbagentmsg_ = stpbagentmsg;
  if (stpbagentmsg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stPBAgentMsg)
}

// .tagIMTrainState stIMTrainState = 20;
bool tagMessage::has_stimtrainstate() const {
  return this != internal_default_instance() && stimtrainstate_ != NULL;
}
void tagMessage::clear_stimtrainstate() {
  if (GetArenaNoVirtual() == NULL && stimtrainstate_ != NULL) delete stimtrainstate_;
  stimtrainstate_ = NULL;
}
const ::tagIMTrainState& tagMessage::stimtrainstate() const {
  // @@protoc_insertion_point(field_get:tagMessage.stIMTrainState)
  return stimtrainstate_ != NULL ? *stimtrainstate_
                         : *::tagIMTrainState::internal_default_instance();
}
::tagIMTrainState* tagMessage::mutable_stimtrainstate() {
  
  if (stimtrainstate_ == NULL) {
    stimtrainstate_ = new ::tagIMTrainState;
  }
  // @@protoc_insertion_point(field_mutable:tagMessage.stIMTrainState)
  return stimtrainstate_;
}
::tagIMTrainState* tagMessage::release_stimtrainstate() {
  // @@protoc_insertion_point(field_release:tagMessage.stIMTrainState)
  
  ::tagIMTrainState* temp = stimtrainstate_;
  stimtrainstate_ = NULL;
  return temp;
}
void tagMessage::set_allocated_stimtrainstate(::tagIMTrainState* stimtrainstate) {
  delete stimtrainstate_;
  stimtrainstate_ = stimtrainstate;
  if (stimtrainstate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagMessage.stIMTrainState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
