// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameregProtoc.proto

#ifndef PROTOBUF_gameregProtoc_2eproto__INCLUDED
#define PROTOBUF_gameregProtoc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
class tagPBAgentMsg;
class tagPBAgentMsgDefaultTypeInternal;
extern tagPBAgentMsgDefaultTypeInternal _tagPBAgentMsg_default_instance_;
class tagPBAgentTaskElement;
class tagPBAgentTaskElementDefaultTypeInternal;
extern tagPBAgentTaskElementDefaultTypeInternal _tagPBAgentTaskElement_default_instance_;
class tagPBAgentTaskTsk;
class tagPBAgentTaskTskDefaultTypeInternal;
extern tagPBAgentTaskTskDefaultTypeInternal _tagPBAgentTaskTsk_default_instance_;
class tagPBAgentTaskValue;
class tagPBAgentTaskValueDefaultTypeInternal;
extern tagPBAgentTaskValueDefaultTypeInternal _tagPBAgentTaskValue_default_instance_;
class tagPBBlood;
class tagPBBloodDefaultTypeInternal;
extern tagPBBloodDefaultTypeInternal _tagPBBlood_default_instance_;
class tagPBBox;
class tagPBBoxDefaultTypeInternal;
extern tagPBBoxDefaultTypeInternal _tagPBBox_default_instance_;
class tagPBPoint;
class tagPBPointDefaultTypeInternal;
extern tagPBPointDefaultTypeInternal _tagPBPoint_default_instance_;
class tagPBRect;
class tagPBRectDefaultTypeInternal;
extern tagPBRectDefaultTypeInternal _tagPBRect_default_instance_;
class tagPBResult;
class tagPBResultDefaultTypeInternal;
extern tagPBResultDefaultTypeInternal _tagPBResult_default_instance_;
class tagPBResultRes;
class tagPBResultResDefaultTypeInternal;
extern tagPBResultResDefaultTypeInternal _tagPBResultRes_default_instance_;
class tagPBResultValue;
class tagPBResultValueDefaultTypeInternal;
extern tagPBResultValueDefaultTypeInternal _tagPBResultValue_default_instance_;
class tagPBTaskFlagMap;
class tagPBTaskFlagMapDefaultTypeInternal;
extern tagPBTaskFlagMapDefaultTypeInternal _tagPBTaskFlagMap_default_instance_;
class tagPBTemplate;
class tagPBTemplateDefaultTypeInternal;
extern tagPBTemplateDefaultTypeInternal _tagPBTemplate_default_instance_;
class tagPBTemplates;
class tagPBTemplatesDefaultTypeInternal;
extern tagPBTemplatesDefaultTypeInternal _tagPBTemplates_default_instance_;

namespace protobuf_gameregProtoc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_gameregProtoc_2eproto

enum EREGTYPE {
  TYPE_BEGIN = 0,
  TYPE_STUCKREG = 1,
  TYPE_FIXOBJREG = 2,
  TYPE_PIXREG = 3,
  TYPE_DEFORMOBJ = 4,
  TYPE_NUMBER = 5,
  TYPE_FIXBLOOD = 6,
  TYPE_KINGGLORYBLOOD = 7,
  TYPE_MAPREG = 8,
  TYPE_MULTCOLORVAR = 9,
  TYPE_SHOOTBLOOD = 10,
  TYPE_SHOOTHURT = 11,
  TYPE_MAPDIRECTIONREG = 12,
  TYPE_REFER_LOCATION = 50,
  TYPE_REFER_BLOODREG = 51,
  TYPE_MAX = 100,
  EREGTYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EREGTYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EREGTYPE_IsValid(int value);
const EREGTYPE EREGTYPE_MIN = TYPE_BEGIN;
const EREGTYPE EREGTYPE_MAX = TYPE_MAX;
const int EREGTYPE_ARRAYSIZE = EREGTYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* EREGTYPE_descriptor();
inline const ::std::string& EREGTYPE_Name(EREGTYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    EREGTYPE_descriptor(), value);
}
inline bool EREGTYPE_Parse(
    const ::std::string& name, EREGTYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EREGTYPE>(
    EREGTYPE_descriptor(), name, value);
}
enum EAgentMsgID {
  MSG_RECV_BEGIN = 0,
  MSG_RECV_ID_START = 40000,
  MSG_RECV_GROUP_ID = 40001,
  MSG_RECV_TASK_FLAG = 40002,
  MSG_RECV_ADD_TASK = 40003,
  MSG_RECV_DEL_TASK = 40004,
  MSG_RECV_CHG_TASK = 40005,
  MSG_RECV_CONF_TASK = 40006,
  MSG_RECV_ID_Max = 40007,
  MSG_SEND_RESULT = 45000,
  EAgentMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EAgentMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EAgentMsgID_IsValid(int value);
const EAgentMsgID EAgentMsgID_MIN = MSG_RECV_BEGIN;
const EAgentMsgID EAgentMsgID_MAX = MSG_SEND_RESULT;
const int EAgentMsgID_ARRAYSIZE = EAgentMsgID_MAX + 1;

const ::google::protobuf::EnumDescriptor* EAgentMsgID_descriptor();
inline const ::std::string& EAgentMsgID_Name(EAgentMsgID value) {
  return ::google::protobuf::internal::NameOfEnum(
    EAgentMsgID_descriptor(), value);
}
inline bool EAgentMsgID_Parse(
    const ::std::string& name, EAgentMsgID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EAgentMsgID>(
    EAgentMsgID_descriptor(), name, value);
}
// ===================================================================

class tagPBAgentMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBAgentMsg) */ {
 public:
  tagPBAgentMsg();
  virtual ~tagPBAgentMsg();

  tagPBAgentMsg(const tagPBAgentMsg& from);

  inline tagPBAgentMsg& operator=(const tagPBAgentMsg& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBAgentMsg& default_instance();

  static inline const tagPBAgentMsg* internal_default_instance() {
    return reinterpret_cast<const tagPBAgentMsg*>(
               &_tagPBAgentMsg_default_instance_);
  }

  void Swap(tagPBAgentMsg* other);

  // implements Message ----------------------------------------------

  inline tagPBAgentMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBAgentMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBAgentMsg& from);
  void MergeFrom(const tagPBAgentMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBAgentMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
  int stpbtaskflagmaps_size() const;
  void clear_stpbtaskflagmaps();
  static const int kStPBTaskFlagMapsFieldNumber = 4;
  const ::tagPBTaskFlagMap& stpbtaskflagmaps(int index) const;
  ::tagPBTaskFlagMap* mutable_stpbtaskflagmaps(int index);
  ::tagPBTaskFlagMap* add_stpbtaskflagmaps();
  ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >*
      mutable_stpbtaskflagmaps();
  const ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >&
      stpbtaskflagmaps() const;

  // repeated int32 nDelTaskIDs = 5;
  int ndeltaskids_size() const;
  void clear_ndeltaskids();
  static const int kNDelTaskIDsFieldNumber = 5;
  ::google::protobuf::int32 ndeltaskids(int index) const;
  void set_ndeltaskids(int index, ::google::protobuf::int32 value);
  void add_ndeltaskids(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      ndeltaskids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_ndeltaskids();

  // repeated string strConfFileName = 6;
  int strconffilename_size() const;
  void clear_strconffilename();
  static const int kStrConfFileNameFieldNumber = 6;
  const ::std::string& strconffilename(int index) const;
  ::std::string* mutable_strconffilename(int index);
  void set_strconffilename(int index, const ::std::string& value);
  void set_strconffilename(int index, const char* value);
  void set_strconffilename(int index, const char* value, size_t size);
  ::std::string* add_strconffilename();
  void add_strconffilename(const ::std::string& value);
  void add_strconffilename(const char* value);
  void add_strconffilename(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& strconffilename() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_strconffilename();

  // .tagPBResultValue stPBResultValue = 2;
  bool has_stpbresultvalue() const;
  void clear_stpbresultvalue();
  static const int kStPBResultValueFieldNumber = 2;
  const ::tagPBResultValue& stpbresultvalue() const;
  ::tagPBResultValue* mutable_stpbresultvalue();
  ::tagPBResultValue* release_stpbresultvalue();
  void set_allocated_stpbresultvalue(::tagPBResultValue* stpbresultvalue);

  // .tagPBAgentTaskValue stPBAgentTaskValue = 3;
  bool has_stpbagenttaskvalue() const;
  void clear_stpbagenttaskvalue();
  static const int kStPBAgentTaskValueFieldNumber = 3;
  const ::tagPBAgentTaskValue& stpbagenttaskvalue() const;
  ::tagPBAgentTaskValue* mutable_stpbagenttaskvalue();
  ::tagPBAgentTaskValue* release_stpbagenttaskvalue();
  void set_allocated_stpbagenttaskvalue(::tagPBAgentTaskValue* stpbagenttaskvalue);

  // .EAgentMsgID eAgentMsgID = 1;
  void clear_eagentmsgid();
  static const int kEAgentMsgIDFieldNumber = 1;
  ::EAgentMsgID eagentmsgid() const;
  void set_eagentmsgid(::EAgentMsgID value);

  // @@protoc_insertion_point(class_scope:tagPBAgentMsg)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap > stpbtaskflagmaps_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > ndeltaskids_;
  mutable int _ndeltaskids_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> strconffilename_;
  ::tagPBResultValue* stpbresultvalue_;
  ::tagPBAgentTaskValue* stpbagenttaskvalue_;
  int eagentmsgid_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBResultValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBResultValue) */ {
 public:
  tagPBResultValue();
  virtual ~tagPBResultValue();

  tagPBResultValue(const tagPBResultValue& from);

  inline tagPBResultValue& operator=(const tagPBResultValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBResultValue& default_instance();

  static inline const tagPBResultValue* internal_default_instance() {
    return reinterpret_cast<const tagPBResultValue*>(
               &_tagPBResultValue_default_instance_);
  }

  void Swap(tagPBResultValue* other);

  // implements Message ----------------------------------------------

  inline tagPBResultValue* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBResultValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBResultValue& from);
  void MergeFrom(const tagPBResultValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBResultValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBResult stPBResult = 7;
  int stpbresult_size() const;
  void clear_stpbresult();
  static const int kStPBResultFieldNumber = 7;
  const ::tagPBResult& stpbresult(int index) const;
  ::tagPBResult* mutable_stpbresult(int index);
  ::tagPBResult* add_stpbresult();
  ::google::protobuf::RepeatedPtrField< ::tagPBResult >*
      mutable_stpbresult();
  const ::google::protobuf::RepeatedPtrField< ::tagPBResult >&
      stpbresult() const;

  // bytes byImgData = 3;
  void clear_byimgdata();
  static const int kByImgDataFieldNumber = 3;
  const ::std::string& byimgdata() const;
  void set_byimgdata(const ::std::string& value);
  #if LANG_CXX11
  void set_byimgdata(::std::string&& value);
  #endif
  void set_byimgdata(const char* value);
  void set_byimgdata(const void* value, size_t size);
  ::std::string* mutable_byimgdata();
  ::std::string* release_byimgdata();
  void set_allocated_byimgdata(::std::string* byimgdata);

  // string strJsonData = 6;
  void clear_strjsondata();
  static const int kStrJsonDataFieldNumber = 6;
  const ::std::string& strjsondata() const;
  void set_strjsondata(const ::std::string& value);
  #if LANG_CXX11
  void set_strjsondata(::std::string&& value);
  #endif
  void set_strjsondata(const char* value);
  void set_strjsondata(const char* value, size_t size);
  ::std::string* mutable_strjsondata();
  ::std::string* release_strjsondata();
  void set_allocated_strjsondata(::std::string* strjsondata);

  // int32 nFrameSeq = 1;
  void clear_nframeseq();
  static const int kNFrameSeqFieldNumber = 1;
  ::google::protobuf::int32 nframeseq() const;
  void set_nframeseq(::google::protobuf::int32 value);

  // int32 nDeviceIndex = 2;
  void clear_ndeviceindex();
  static const int kNDeviceIndexFieldNumber = 2;
  ::google::protobuf::int32 ndeviceindex() const;
  void set_ndeviceindex(::google::protobuf::int32 value);

  // int32 nWidth = 4;
  void clear_nwidth();
  static const int kNWidthFieldNumber = 4;
  ::google::protobuf::int32 nwidth() const;
  void set_nwidth(::google::protobuf::int32 value);

  // int32 nHeight = 5;
  void clear_nheight();
  static const int kNHeightFieldNumber = 5;
  ::google::protobuf::int32 nheight() const;
  void set_nheight(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBResultValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBResult > stpbresult_;
  ::google::protobuf::internal::ArenaStringPtr byimgdata_;
  ::google::protobuf::internal::ArenaStringPtr strjsondata_;
  ::google::protobuf::int32 nframeseq_;
  ::google::protobuf::int32 ndeviceindex_;
  ::google::protobuf::int32 nwidth_;
  ::google::protobuf::int32 nheight_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBResult : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBResult) */ {
 public:
  tagPBResult();
  virtual ~tagPBResult();

  tagPBResult(const tagPBResult& from);

  inline tagPBResult& operator=(const tagPBResult& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBResult& default_instance();

  static inline const tagPBResult* internal_default_instance() {
    return reinterpret_cast<const tagPBResult*>(
               &_tagPBResult_default_instance_);
  }

  void Swap(tagPBResult* other);

  // implements Message ----------------------------------------------

  inline tagPBResult* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBResult* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBResult& from);
  void MergeFrom(const tagPBResult& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBResult* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBResultRes stPBResultRes = 3;
  int stpbresultres_size() const;
  void clear_stpbresultres();
  static const int kStPBResultResFieldNumber = 3;
  const ::tagPBResultRes& stpbresultres(int index) const;
  ::tagPBResultRes* mutable_stpbresultres(int index);
  ::tagPBResultRes* add_stpbresultres();
  ::google::protobuf::RepeatedPtrField< ::tagPBResultRes >*
      mutable_stpbresultres();
  const ::google::protobuf::RepeatedPtrField< ::tagPBResultRes >&
      stpbresultres() const;

  // int32 nTaskID = 1;
  void clear_ntaskid();
  static const int kNTaskIDFieldNumber = 1;
  ::google::protobuf::int32 ntaskid() const;
  void set_ntaskid(::google::protobuf::int32 value);

  // .EREGTYPE eRegType = 2;
  void clear_eregtype();
  static const int kERegTypeFieldNumber = 2;
  ::EREGTYPE eregtype() const;
  void set_eregtype(::EREGTYPE value);

  // @@protoc_insertion_point(class_scope:tagPBResult)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBResultRes > stpbresultres_;
  ::google::protobuf::int32 ntaskid_;
  int eregtype_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBResultRes : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBResultRes) */ {
 public:
  tagPBResultRes();
  virtual ~tagPBResultRes();

  tagPBResultRes(const tagPBResultRes& from);

  inline tagPBResultRes& operator=(const tagPBResultRes& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBResultRes& default_instance();

  static inline const tagPBResultRes* internal_default_instance() {
    return reinterpret_cast<const tagPBResultRes*>(
               &_tagPBResultRes_default_instance_);
  }

  void Swap(tagPBResultRes* other);

  // implements Message ----------------------------------------------

  inline tagPBResultRes* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBResultRes* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBResultRes& from);
  void MergeFrom(const tagPBResultRes& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBResultRes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBBox stPBBoxs = 3;
  int stpbboxs_size() const;
  void clear_stpbboxs();
  static const int kStPBBoxsFieldNumber = 3;
  const ::tagPBBox& stpbboxs(int index) const;
  ::tagPBBox* mutable_stpbboxs(int index);
  ::tagPBBox* add_stpbboxs();
  ::google::protobuf::RepeatedPtrField< ::tagPBBox >*
      mutable_stpbboxs();
  const ::google::protobuf::RepeatedPtrField< ::tagPBBox >&
      stpbboxs() const;

  // repeated .tagPBPoint stPBPoints = 4;
  int stpbpoints_size() const;
  void clear_stpbpoints();
  static const int kStPBPointsFieldNumber = 4;
  const ::tagPBPoint& stpbpoints(int index) const;
  ::tagPBPoint* mutable_stpbpoints(int index);
  ::tagPBPoint* add_stpbpoints();
  ::google::protobuf::RepeatedPtrField< ::tagPBPoint >*
      mutable_stpbpoints();
  const ::google::protobuf::RepeatedPtrField< ::tagPBPoint >&
      stpbpoints() const;

  // repeated .tagPBBlood stPBBloods = 8;
  int stpbbloods_size() const;
  void clear_stpbbloods();
  static const int kStPBBloodsFieldNumber = 8;
  const ::tagPBBlood& stpbbloods(int index) const;
  ::tagPBBlood* mutable_stpbbloods(int index);
  ::tagPBBlood* add_stpbbloods();
  ::google::protobuf::RepeatedPtrField< ::tagPBBlood >*
      mutable_stpbbloods();
  const ::google::protobuf::RepeatedPtrField< ::tagPBBlood >&
      stpbbloods() const;

  // repeated float fColorMeanVars = 11;
  int fcolormeanvars_size() const;
  void clear_fcolormeanvars();
  static const int kFColorMeanVarsFieldNumber = 11;
  float fcolormeanvars(int index) const;
  void set_fcolormeanvars(int index, float value);
  void add_fcolormeanvars(float value);
  const ::google::protobuf::RepeatedField< float >&
      fcolormeanvars() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_fcolormeanvars();

  // bytes byImage = 12;
  void clear_byimage();
  static const int kByImageFieldNumber = 12;
  const ::std::string& byimage() const;
  void set_byimage(const ::std::string& value);
  #if LANG_CXX11
  void set_byimage(::std::string&& value);
  #endif
  void set_byimage(const char* value);
  void set_byimage(const void* value, size_t size);
  ::std::string* mutable_byimage();
  ::std::string* release_byimage();
  void set_allocated_byimage(::std::string* byimage);

  // .tagPBBox stPBBox = 2;
  bool has_stpbbox() const;
  void clear_stpbbox();
  static const int kStPBBoxFieldNumber = 2;
  const ::tagPBBox& stpbbox() const;
  ::tagPBBox* mutable_stpbbox();
  ::tagPBBox* release_stpbbox();
  void set_allocated_stpbbox(::tagPBBox* stpbbox);

  // .tagPBRect stPBROI = 6;
  bool has_stpbroi() const;
  void clear_stpbroi();
  static const int kStPBROIFieldNumber = 6;
  const ::tagPBRect& stpbroi() const;
  ::tagPBRect* mutable_stpbroi();
  ::tagPBRect* release_stpbroi();
  void set_allocated_stpbroi(::tagPBRect* stpbroi);

  // .tagPBRect stPBRect = 7;
  bool has_stpbrect() const;
  void clear_stpbrect();
  static const int kStPBRectFieldNumber = 7;
  const ::tagPBRect& stpbrect() const;
  ::tagPBRect* mutable_stpbrect();
  ::tagPBRect* release_stpbrect();
  void set_allocated_stpbrect(::tagPBRect* stpbrect);

  // .tagPBPoint stPBViewAnglePoint = 9;
  bool has_stpbviewanglepoint() const;
  void clear_stpbviewanglepoint();
  static const int kStPBViewAnglePointFieldNumber = 9;
  const ::tagPBPoint& stpbviewanglepoint() const;
  ::tagPBPoint* mutable_stpbviewanglepoint();
  ::tagPBPoint* release_stpbviewanglepoint();
  void set_allocated_stpbviewanglepoint(::tagPBPoint* stpbviewanglepoint);

  // .tagPBPoint stPBMyLocPoint = 10;
  bool has_stpbmylocpoint() const;
  void clear_stpbmylocpoint();
  static const int kStPBMyLocPointFieldNumber = 10;
  const ::tagPBPoint& stpbmylocpoint() const;
  ::tagPBPoint* mutable_stpbmylocpoint();
  ::tagPBPoint* release_stpbmylocpoint();
  void set_allocated_stpbmylocpoint(::tagPBPoint* stpbmylocpoint);

  // int32 nFlag = 1;
  void clear_nflag();
  static const int kNFlagFieldNumber = 1;
  ::google::protobuf::int32 nflag() const;
  void set_nflag(::google::protobuf::int32 value);

  // float fNum = 5;
  void clear_fnum();
  static const int kFNumFieldNumber = 5;
  float fnum() const;
  void set_fnum(float value);

  // @@protoc_insertion_point(class_scope:tagPBResultRes)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBBox > stpbboxs_;
  ::google::protobuf::RepeatedPtrField< ::tagPBPoint > stpbpoints_;
  ::google::protobuf::RepeatedPtrField< ::tagPBBlood > stpbbloods_;
  ::google::protobuf::RepeatedField< float > fcolormeanvars_;
  mutable int _fcolormeanvars_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr byimage_;
  ::tagPBBox* stpbbox_;
  ::tagPBRect* stpbroi_;
  ::tagPBRect* stpbrect_;
  ::tagPBPoint* stpbviewanglepoint_;
  ::tagPBPoint* stpbmylocpoint_;
  ::google::protobuf::int32 nflag_;
  float fnum_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBPoint) */ {
 public:
  tagPBPoint();
  virtual ~tagPBPoint();

  tagPBPoint(const tagPBPoint& from);

  inline tagPBPoint& operator=(const tagPBPoint& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBPoint& default_instance();

  static inline const tagPBPoint* internal_default_instance() {
    return reinterpret_cast<const tagPBPoint*>(
               &_tagPBPoint_default_instance_);
  }

  void Swap(tagPBPoint* other);

  // implements Message ----------------------------------------------

  inline tagPBPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBPoint& from);
  void MergeFrom(const tagPBPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nX = 1;
  void clear_nx();
  static const int kNXFieldNumber = 1;
  ::google::protobuf::int32 nx() const;
  void set_nx(::google::protobuf::int32 value);

  // int32 nY = 2;
  void clear_ny();
  static const int kNYFieldNumber = 2;
  ::google::protobuf::int32 ny() const;
  void set_ny(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nx_;
  ::google::protobuf::int32 ny_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBBlood : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBBlood) */ {
 public:
  tagPBBlood();
  virtual ~tagPBBlood();

  tagPBBlood(const tagPBBlood& from);

  inline tagPBBlood& operator=(const tagPBBlood& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBBlood& default_instance();

  static inline const tagPBBlood* internal_default_instance() {
    return reinterpret_cast<const tagPBBlood*>(
               &_tagPBBlood_default_instance_);
  }

  void Swap(tagPBBlood* other);

  // implements Message ----------------------------------------------

  inline tagPBBlood* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBBlood* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBBlood& from);
  void MergeFrom(const tagPBBlood& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBBlood* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strName = 5;
  void clear_strname();
  static const int kStrNameFieldNumber = 5;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // .tagPBRect stPBRect = 6;
  bool has_stpbrect() const;
  void clear_stpbrect();
  static const int kStPBRectFieldNumber = 6;
  const ::tagPBRect& stpbrect() const;
  ::tagPBRect* mutable_stpbrect();
  ::tagPBRect* release_stpbrect();
  void set_allocated_stpbrect(::tagPBRect* stpbrect);

  // int32 nLevel = 1;
  void clear_nlevel();
  static const int kNLevelFieldNumber = 1;
  ::google::protobuf::int32 nlevel() const;
  void set_nlevel(::google::protobuf::int32 value);

  // float fScore = 2;
  void clear_fscore();
  static const int kFScoreFieldNumber = 2;
  float fscore() const;
  void set_fscore(float value);

  // float fPercent = 3;
  void clear_fpercent();
  static const int kFPercentFieldNumber = 3;
  float fpercent() const;
  void set_fpercent(float value);

  // int32 nClassID = 4;
  void clear_nclassid();
  static const int kNClassIDFieldNumber = 4;
  ::google::protobuf::int32 nclassid() const;
  void set_nclassid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBBlood)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::tagPBRect* stpbrect_;
  ::google::protobuf::int32 nlevel_;
  float fscore_;
  float fpercent_;
  ::google::protobuf::int32 nclassid_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBBox : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBBox) */ {
 public:
  tagPBBox();
  virtual ~tagPBBox();

  tagPBBox(const tagPBBox& from);

  inline tagPBBox& operator=(const tagPBBox& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBBox& default_instance();

  static inline const tagPBBox* internal_default_instance() {
    return reinterpret_cast<const tagPBBox*>(
               &_tagPBBox_default_instance_);
  }

  void Swap(tagPBBox* other);

  // implements Message ----------------------------------------------

  inline tagPBBox* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBBox* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBBox& from);
  void MergeFrom(const tagPBBox& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBBox* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strTmplName = 1;
  void clear_strtmplname();
  static const int kStrTmplNameFieldNumber = 1;
  const ::std::string& strtmplname() const;
  void set_strtmplname(const ::std::string& value);
  #if LANG_CXX11
  void set_strtmplname(::std::string&& value);
  #endif
  void set_strtmplname(const char* value);
  void set_strtmplname(const char* value, size_t size);
  ::std::string* mutable_strtmplname();
  ::std::string* release_strtmplname();
  void set_allocated_strtmplname(::std::string* strtmplname);

  // .tagPBRect stPBRect = 5;
  bool has_stpbrect() const;
  void clear_stpbrect();
  static const int kStPBRectFieldNumber = 5;
  const ::tagPBRect& stpbrect() const;
  ::tagPBRect* mutable_stpbrect();
  ::tagPBRect* release_stpbrect();
  void set_allocated_stpbrect(::tagPBRect* stpbrect);

  // int32 nClassID = 2;
  void clear_nclassid();
  static const int kNClassIDFieldNumber = 2;
  ::google::protobuf::int32 nclassid() const;
  void set_nclassid(::google::protobuf::int32 value);

  // float fScore = 3;
  void clear_fscore();
  static const int kFScoreFieldNumber = 3;
  float fscore() const;
  void set_fscore(float value);

  // float fScale = 4;
  void clear_fscale();
  static const int kFScaleFieldNumber = 4;
  float fscale() const;
  void set_fscale(float value);

  // @@protoc_insertion_point(class_scope:tagPBBox)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strtmplname_;
  ::tagPBRect* stpbrect_;
  ::google::protobuf::int32 nclassid_;
  float fscore_;
  float fscale_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBAgentTaskValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBAgentTaskValue) */ {
 public:
  tagPBAgentTaskValue();
  virtual ~tagPBAgentTaskValue();

  tagPBAgentTaskValue(const tagPBAgentTaskValue& from);

  inline tagPBAgentTaskValue& operator=(const tagPBAgentTaskValue& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBAgentTaskValue& default_instance();

  static inline const tagPBAgentTaskValue* internal_default_instance() {
    return reinterpret_cast<const tagPBAgentTaskValue*>(
               &_tagPBAgentTaskValue_default_instance_);
  }

  void Swap(tagPBAgentTaskValue* other);

  // implements Message ----------------------------------------------

  inline tagPBAgentTaskValue* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBAgentTaskValue* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBAgentTaskValue& from);
  void MergeFrom(const tagPBAgentTaskValue& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBAgentTaskValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
  int stpbagenttasktsks_size() const;
  void clear_stpbagenttasktsks();
  static const int kStPBAgentTaskTsksFieldNumber = 2;
  const ::tagPBAgentTaskTsk& stpbagenttasktsks(int index) const;
  ::tagPBAgentTaskTsk* mutable_stpbagenttasktsks(int index);
  ::tagPBAgentTaskTsk* add_stpbagenttasktsks();
  ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >*
      mutable_stpbagenttasktsks();
  const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >&
      stpbagenttasktsks() const;

  // uint32 uGroupID = 1;
  void clear_ugroupid();
  static const int kUGroupIDFieldNumber = 1;
  ::google::protobuf::uint32 ugroupid() const;
  void set_ugroupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:tagPBAgentTaskValue)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk > stpbagenttasktsks_;
  ::google::protobuf::uint32 ugroupid_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBAgentTaskTsk : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBAgentTaskTsk) */ {
 public:
  tagPBAgentTaskTsk();
  virtual ~tagPBAgentTaskTsk();

  tagPBAgentTaskTsk(const tagPBAgentTaskTsk& from);

  inline tagPBAgentTaskTsk& operator=(const tagPBAgentTaskTsk& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBAgentTaskTsk& default_instance();

  static inline const tagPBAgentTaskTsk* internal_default_instance() {
    return reinterpret_cast<const tagPBAgentTaskTsk*>(
               &_tagPBAgentTaskTsk_default_instance_);
  }

  void Swap(tagPBAgentTaskTsk* other);

  // implements Message ----------------------------------------------

  inline tagPBAgentTaskTsk* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBAgentTaskTsk* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBAgentTaskTsk& from);
  void MergeFrom(const tagPBAgentTaskTsk& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBAgentTaskTsk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
  int stpbagenttaskelements_size() const;
  void clear_stpbagenttaskelements();
  static const int kStPBAgentTaskElementsFieldNumber = 4;
  const ::tagPBAgentTaskElement& stpbagenttaskelements(int index) const;
  ::tagPBAgentTaskElement* mutable_stpbagenttaskelements(int index);
  ::tagPBAgentTaskElement* add_stpbagenttaskelements();
  ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >*
      mutable_stpbagenttaskelements();
  const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >&
      stpbagenttaskelements() const;

  // int32 nTaskID = 1;
  void clear_ntaskid();
  static const int kNTaskIDFieldNumber = 1;
  ::google::protobuf::int32 ntaskid() const;
  void set_ntaskid(::google::protobuf::int32 value);

  // .EREGTYPE eType = 2;
  void clear_etype();
  static const int kETypeFieldNumber = 2;
  ::EREGTYPE etype() const;
  void set_etype(::EREGTYPE value);

  // int32 nSkipFrame = 3;
  void clear_nskipframe();
  static const int kNSkipFrameFieldNumber = 3;
  ::google::protobuf::int32 nskipframe() const;
  void set_nskipframe(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBAgentTaskTsk)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement > stpbagenttaskelements_;
  ::google::protobuf::int32 ntaskid_;
  int etype_;
  ::google::protobuf::int32 nskipframe_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBAgentTaskElement : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBAgentTaskElement) */ {
 public:
  tagPBAgentTaskElement();
  virtual ~tagPBAgentTaskElement();

  tagPBAgentTaskElement(const tagPBAgentTaskElement& from);

  inline tagPBAgentTaskElement& operator=(const tagPBAgentTaskElement& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBAgentTaskElement& default_instance();

  static inline const tagPBAgentTaskElement* internal_default_instance() {
    return reinterpret_cast<const tagPBAgentTaskElement*>(
               &_tagPBAgentTaskElement_default_instance_);
  }

  void Swap(tagPBAgentTaskElement* other);

  // implements Message ----------------------------------------------

  inline tagPBAgentTaskElement* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBAgentTaskElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBAgentTaskElement& from);
  void MergeFrom(const tagPBAgentTaskElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBAgentTaskElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strAlgorithm = 2;
  void clear_stralgorithm();
  static const int kStrAlgorithmFieldNumber = 2;
  const ::std::string& stralgorithm() const;
  void set_stralgorithm(const ::std::string& value);
  #if LANG_CXX11
  void set_stralgorithm(::std::string&& value);
  #endif
  void set_stralgorithm(const char* value);
  void set_stralgorithm(const char* value, size_t size);
  ::std::string* mutable_stralgorithm();
  ::std::string* release_stralgorithm();
  void set_allocated_stralgorithm(::std::string* stralgorithm);

  // string strCondition = 6;
  void clear_strcondition();
  static const int kStrConditionFieldNumber = 6;
  const ::std::string& strcondition() const;
  void set_strcondition(const ::std::string& value);
  #if LANG_CXX11
  void set_strcondition(::std::string&& value);
  #endif
  void set_strcondition(const char* value);
  void set_strcondition(const char* value, size_t size);
  ::std::string* mutable_strcondition();
  ::std::string* release_strcondition();
  void set_allocated_strcondition(::std::string* strcondition);

  // string strCfgPath = 11;
  void clear_strcfgpath();
  static const int kStrCfgPathFieldNumber = 11;
  const ::std::string& strcfgpath() const;
  void set_strcfgpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strcfgpath(::std::string&& value);
  #endif
  void set_strcfgpath(const char* value);
  void set_strcfgpath(const char* value, size_t size);
  ::std::string* mutable_strcfgpath();
  ::std::string* release_strcfgpath();
  void set_allocated_strcfgpath(::std::string* strcfgpath);

  // string strWeightPath = 12;
  void clear_strweightpath();
  static const int kStrWeightPathFieldNumber = 12;
  const ::std::string& strweightpath() const;
  void set_strweightpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strweightpath(::std::string&& value);
  #endif
  void set_strweightpath(const char* value);
  void set_strweightpath(const char* value, size_t size);
  ::std::string* mutable_strweightpath();
  ::std::string* release_strweightpath();
  void set_allocated_strweightpath(::std::string* strweightpath);

  // string strNamePath = 13;
  void clear_strnamepath();
  static const int kStrNamePathFieldNumber = 13;
  const ::std::string& strnamepath() const;
  void set_strnamepath(const ::std::string& value);
  #if LANG_CXX11
  void set_strnamepath(::std::string&& value);
  #endif
  void set_strnamepath(const char* value);
  void set_strnamepath(const char* value, size_t size);
  ::std::string* mutable_strnamepath();
  ::std::string* release_strnamepath();
  void set_allocated_strnamepath(::std::string* strnamepath);

  // string strMaskPath = 16;
  void clear_strmaskpath();
  static const int kStrMaskPathFieldNumber = 16;
  const ::std::string& strmaskpath() const;
  void set_strmaskpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strmaskpath(::std::string&& value);
  #endif
  void set_strmaskpath(const char* value);
  void set_strmaskpath(const char* value, size_t size);
  ::std::string* mutable_strmaskpath();
  ::std::string* release_strmaskpath();
  void set_allocated_strmaskpath(::std::string* strmaskpath);

  // string strMyLocCondition = 17;
  void clear_strmyloccondition();
  static const int kStrMyLocConditionFieldNumber = 17;
  const ::std::string& strmyloccondition() const;
  void set_strmyloccondition(const ::std::string& value);
  #if LANG_CXX11
  void set_strmyloccondition(::std::string&& value);
  #endif
  void set_strmyloccondition(const char* value);
  void set_strmyloccondition(const char* value, size_t size);
  ::std::string* mutable_strmyloccondition();
  ::std::string* release_strmyloccondition();
  void set_allocated_strmyloccondition(::std::string* strmyloccondition);

  // string strFriendsCondition = 18;
  void clear_strfriendscondition();
  static const int kStrFriendsConditionFieldNumber = 18;
  const ::std::string& strfriendscondition() const;
  void set_strfriendscondition(const ::std::string& value);
  #if LANG_CXX11
  void set_strfriendscondition(::std::string&& value);
  #endif
  void set_strfriendscondition(const char* value);
  void set_strfriendscondition(const char* value, size_t size);
  ::std::string* mutable_strfriendscondition();
  ::std::string* release_strfriendscondition();
  void set_allocated_strfriendscondition(::std::string* strfriendscondition);

  // string strViewLocCondition = 19;
  void clear_strviewloccondition();
  static const int kStrViewLocConditionFieldNumber = 19;
  const ::std::string& strviewloccondition() const;
  void set_strviewloccondition(const ::std::string& value);
  #if LANG_CXX11
  void set_strviewloccondition(::std::string&& value);
  #endif
  void set_strviewloccondition(const char* value);
  void set_strviewloccondition(const char* value, size_t size);
  ::std::string* mutable_strviewloccondition();
  ::std::string* release_strviewloccondition();
  void set_allocated_strviewloccondition(::std::string* strviewloccondition);

  // string strMapPath = 20;
  void clear_strmappath();
  static const int kStrMapPathFieldNumber = 20;
  const ::std::string& strmappath() const;
  void set_strmappath(const ::std::string& value);
  #if LANG_CXX11
  void set_strmappath(::std::string&& value);
  #endif
  void set_strmappath(const char* value);
  void set_strmappath(const char* value, size_t size);
  ::std::string* mutable_strmappath();
  ::std::string* release_strmappath();
  void set_allocated_strmappath(::std::string* strmappath);

  // string strImgFilePath = 21;
  void clear_strimgfilepath();
  static const int kStrImgFilePathFieldNumber = 21;
  const ::std::string& strimgfilepath() const;
  void set_strimgfilepath(const ::std::string& value);
  #if LANG_CXX11
  void set_strimgfilepath(::std::string&& value);
  #endif
  void set_strimgfilepath(const char* value);
  void set_strimgfilepath(const char* value, size_t size);
  ::std::string* mutable_strimgfilepath();
  ::std::string* release_strimgfilepath();
  void set_allocated_strimgfilepath(::std::string* strimgfilepath);

  // .tagPBRect stPBRect = 1;
  bool has_stpbrect() const;
  void clear_stpbrect();
  static const int kStPBRectFieldNumber = 1;
  const ::tagPBRect& stpbrect() const;
  ::tagPBRect* mutable_stpbrect();
  ::tagPBRect* release_stpbrect();
  void set_allocated_stpbrect(::tagPBRect* stpbrect);

  // .tagPBTemplates stPBTemplates = 8;
  bool has_stpbtemplates() const;
  void clear_stpbtemplates();
  static const int kStPBTemplatesFieldNumber = 8;
  const ::tagPBTemplates& stpbtemplates() const;
  ::tagPBTemplates* mutable_stpbtemplates();
  ::tagPBTemplates* release_stpbtemplates();
  void set_allocated_stpbtemplates(::tagPBTemplates* stpbtemplates);

  // float fMinScale = 3;
  void clear_fminscale();
  static const int kFMinScaleFieldNumber = 3;
  float fminscale() const;
  void set_fminscale(float value);

  // float fMaxScale = 4;
  void clear_fmaxscale();
  static const int kFMaxScaleFieldNumber = 4;
  float fmaxscale() const;
  void set_fmaxscale(float value);

  // int32 nScaleLevel = 5;
  void clear_nscalelevel();
  static const int kNScaleLevelFieldNumber = 5;
  ::google::protobuf::int32 nscalelevel() const;
  void set_nscalelevel(::google::protobuf::int32 value);

  // int32 nFilterSize = 7;
  void clear_nfiltersize();
  static const int kNFilterSizeFieldNumber = 7;
  ::google::protobuf::int32 nfiltersize() const;
  void set_nfiltersize(::google::protobuf::int32 value);

  // float fIntervalTime = 9;
  void clear_fintervaltime();
  static const int kFIntervalTimeFieldNumber = 9;
  float fintervaltime() const;
  void set_fintervaltime(float value);

  // float fThreshold = 10;
  void clear_fthreshold();
  static const int kFThresholdFieldNumber = 10;
  float fthreshold() const;
  void set_fthreshold(float value);

  // int32 nBloodLength = 14;
  void clear_nbloodlength();
  static const int kNBloodLengthFieldNumber = 14;
  ::google::protobuf::int32 nbloodlength() const;
  void set_nbloodlength(::google::protobuf::int32 value);

  // int32 nMaxPointNum = 15;
  void clear_nmaxpointnum();
  static const int kNMaxPointNumFieldNumber = 15;
  ::google::protobuf::int32 nmaxpointnum() const;
  void set_nmaxpointnum(::google::protobuf::int32 value);

  // int32 nMaxBBoxNum = 22;
  void clear_nmaxbboxnum();
  static const int kNMaxBBoxNumFieldNumber = 22;
  ::google::protobuf::int32 nmaxbboxnum() const;
  void set_nmaxbboxnum(::google::protobuf::int32 value);

  // int32 nDilateSize = 23;
  void clear_ndilatesize();
  static const int kNDilateSizeFieldNumber = 23;
  ::google::protobuf::int32 ndilatesize() const;
  void set_ndilatesize(::google::protobuf::int32 value);

  // int32 nErodeSize = 24;
  void clear_nerodesize();
  static const int kNErodeSizeFieldNumber = 24;
  ::google::protobuf::int32 nerodesize() const;
  void set_nerodesize(::google::protobuf::int32 value);

  // int32 nRegionSize = 25;
  void clear_nregionsize();
  static const int kNRegionSizeFieldNumber = 25;
  ::google::protobuf::int32 nregionsize() const;
  void set_nregionsize(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBAgentTaskElement)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr stralgorithm_;
  ::google::protobuf::internal::ArenaStringPtr strcondition_;
  ::google::protobuf::internal::ArenaStringPtr strcfgpath_;
  ::google::protobuf::internal::ArenaStringPtr strweightpath_;
  ::google::protobuf::internal::ArenaStringPtr strnamepath_;
  ::google::protobuf::internal::ArenaStringPtr strmaskpath_;
  ::google::protobuf::internal::ArenaStringPtr strmyloccondition_;
  ::google::protobuf::internal::ArenaStringPtr strfriendscondition_;
  ::google::protobuf::internal::ArenaStringPtr strviewloccondition_;
  ::google::protobuf::internal::ArenaStringPtr strmappath_;
  ::google::protobuf::internal::ArenaStringPtr strimgfilepath_;
  ::tagPBRect* stpbrect_;
  ::tagPBTemplates* stpbtemplates_;
  float fminscale_;
  float fmaxscale_;
  ::google::protobuf::int32 nscalelevel_;
  ::google::protobuf::int32 nfiltersize_;
  float fintervaltime_;
  float fthreshold_;
  ::google::protobuf::int32 nbloodlength_;
  ::google::protobuf::int32 nmaxpointnum_;
  ::google::protobuf::int32 nmaxbboxnum_;
  ::google::protobuf::int32 ndilatesize_;
  ::google::protobuf::int32 nerodesize_;
  ::google::protobuf::int32 nregionsize_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBRect : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBRect) */ {
 public:
  tagPBRect();
  virtual ~tagPBRect();

  tagPBRect(const tagPBRect& from);

  inline tagPBRect& operator=(const tagPBRect& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBRect& default_instance();

  static inline const tagPBRect* internal_default_instance() {
    return reinterpret_cast<const tagPBRect*>(
               &_tagPBRect_default_instance_);
  }

  void Swap(tagPBRect* other);

  // implements Message ----------------------------------------------

  inline tagPBRect* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBRect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBRect& from);
  void MergeFrom(const tagPBRect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBRect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nX = 1;
  void clear_nx();
  static const int kNXFieldNumber = 1;
  ::google::protobuf::int32 nx() const;
  void set_nx(::google::protobuf::int32 value);

  // int32 nY = 2;
  void clear_ny();
  static const int kNYFieldNumber = 2;
  ::google::protobuf::int32 ny() const;
  void set_ny(::google::protobuf::int32 value);

  // int32 nW = 3;
  void clear_nw();
  static const int kNWFieldNumber = 3;
  ::google::protobuf::int32 nw() const;
  void set_nw(::google::protobuf::int32 value);

  // int32 nH = 4;
  void clear_nh();
  static const int kNHFieldNumber = 4;
  ::google::protobuf::int32 nh() const;
  void set_nh(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBRect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 nx_;
  ::google::protobuf::int32 ny_;
  ::google::protobuf::int32 nw_;
  ::google::protobuf::int32 nh_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBTemplates : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBTemplates) */ {
 public:
  tagPBTemplates();
  virtual ~tagPBTemplates();

  tagPBTemplates(const tagPBTemplates& from);

  inline tagPBTemplates& operator=(const tagPBTemplates& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBTemplates& default_instance();

  static inline const tagPBTemplates* internal_default_instance() {
    return reinterpret_cast<const tagPBTemplates*>(
               &_tagPBTemplates_default_instance_);
  }

  void Swap(tagPBTemplates* other);

  // implements Message ----------------------------------------------

  inline tagPBTemplates* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBTemplates* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBTemplates& from);
  void MergeFrom(const tagPBTemplates& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBTemplates* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .tagPBTemplate stPBTemplates = 1;
  int stpbtemplates_size() const;
  void clear_stpbtemplates();
  static const int kStPBTemplatesFieldNumber = 1;
  const ::tagPBTemplate& stpbtemplates(int index) const;
  ::tagPBTemplate* mutable_stpbtemplates(int index);
  ::tagPBTemplate* add_stpbtemplates();
  ::google::protobuf::RepeatedPtrField< ::tagPBTemplate >*
      mutable_stpbtemplates();
  const ::google::protobuf::RepeatedPtrField< ::tagPBTemplate >&
      stpbtemplates() const;

  // @@protoc_insertion_point(class_scope:tagPBTemplates)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::tagPBTemplate > stpbtemplates_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBTemplate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBTemplate) */ {
 public:
  tagPBTemplate();
  virtual ~tagPBTemplate();

  tagPBTemplate(const tagPBTemplate& from);

  inline tagPBTemplate& operator=(const tagPBTemplate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBTemplate& default_instance();

  static inline const tagPBTemplate* internal_default_instance() {
    return reinterpret_cast<const tagPBTemplate*>(
               &_tagPBTemplate_default_instance_);
  }

  void Swap(tagPBTemplate* other);

  // implements Message ----------------------------------------------

  inline tagPBTemplate* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBTemplate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBTemplate& from);
  void MergeFrom(const tagPBTemplate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBTemplate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string strPath = 1;
  void clear_strpath();
  static const int kStrPathFieldNumber = 1;
  const ::std::string& strpath() const;
  void set_strpath(const ::std::string& value);
  #if LANG_CXX11
  void set_strpath(::std::string&& value);
  #endif
  void set_strpath(const char* value);
  void set_strpath(const char* value, size_t size);
  ::std::string* mutable_strpath();
  ::std::string* release_strpath();
  void set_allocated_strpath(::std::string* strpath);

  // string strName = 2;
  void clear_strname();
  static const int kStrNameFieldNumber = 2;
  const ::std::string& strname() const;
  void set_strname(const ::std::string& value);
  #if LANG_CXX11
  void set_strname(::std::string&& value);
  #endif
  void set_strname(const char* value);
  void set_strname(const char* value, size_t size);
  ::std::string* mutable_strname();
  ::std::string* release_strname();
  void set_allocated_strname(::std::string* strname);

  // .tagPBRect stPBRect = 3;
  bool has_stpbrect() const;
  void clear_stpbrect();
  static const int kStPBRectFieldNumber = 3;
  const ::tagPBRect& stpbrect() const;
  ::tagPBRect* mutable_stpbrect();
  ::tagPBRect* release_stpbrect();
  void set_allocated_stpbrect(::tagPBRect* stpbrect);

  // float fThreshold = 4;
  void clear_fthreshold();
  static const int kFThresholdFieldNumber = 4;
  float fthreshold() const;
  void set_fthreshold(float value);

  // int32 nClassID = 5;
  void clear_nclassid();
  static const int kNClassIDFieldNumber = 5;
  ::google::protobuf::int32 nclassid() const;
  void set_nclassid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:tagPBTemplate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr strpath_;
  ::google::protobuf::internal::ArenaStringPtr strname_;
  ::tagPBRect* stpbrect_;
  float fthreshold_;
  ::google::protobuf::int32 nclassid_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class tagPBTaskFlagMap : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:tagPBTaskFlagMap) */ {
 public:
  tagPBTaskFlagMap();
  virtual ~tagPBTaskFlagMap();

  tagPBTaskFlagMap(const tagPBTaskFlagMap& from);

  inline tagPBTaskFlagMap& operator=(const tagPBTaskFlagMap& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const tagPBTaskFlagMap& default_instance();

  static inline const tagPBTaskFlagMap* internal_default_instance() {
    return reinterpret_cast<const tagPBTaskFlagMap*>(
               &_tagPBTaskFlagMap_default_instance_);
  }

  void Swap(tagPBTaskFlagMap* other);

  // implements Message ----------------------------------------------

  inline tagPBTaskFlagMap* New() const PROTOBUF_FINAL { return New(NULL); }

  tagPBTaskFlagMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const tagPBTaskFlagMap& from);
  void MergeFrom(const tagPBTaskFlagMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output)
      const PROTOBUF_FINAL {
    return InternalSerializeWithCachedSizesToArray(
        ::google::protobuf::io::CodedOutputStream::IsDefaultSerializationDeterministic(), output);
  }
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(tagPBTaskFlagMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 nTaskID = 1;
  void clear_ntaskid();
  static const int kNTaskIDFieldNumber = 1;
  ::google::protobuf::int32 ntaskid() const;
  void set_ntaskid(::google::protobuf::int32 value);

  // bool bFlag = 2;
  void clear_bflag();
  static const int kBFlagFieldNumber = 2;
  bool bflag() const;
  void set_bflag(bool value);

  // @@protoc_insertion_point(class_scope:tagPBTaskFlagMap)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 ntaskid_;
  bool bflag_;
  mutable int _cached_size_;
  friend struct  protobuf_gameregProtoc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBAgentMsg

// .EAgentMsgID eAgentMsgID = 1;
inline void tagPBAgentMsg::clear_eagentmsgid() {
  eagentmsgid_ = 0;
}
inline ::EAgentMsgID tagPBAgentMsg::eagentmsgid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.eAgentMsgID)
  return static_cast< ::EAgentMsgID >(eagentmsgid_);
}
inline void tagPBAgentMsg::set_eagentmsgid(::EAgentMsgID value) {
  
  eagentmsgid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.eAgentMsgID)
}

// .tagPBResultValue stPBResultValue = 2;
inline bool tagPBAgentMsg::has_stpbresultvalue() const {
  return this != internal_default_instance() && stpbresultvalue_ != NULL;
}
inline void tagPBAgentMsg::clear_stpbresultvalue() {
  if (GetArenaNoVirtual() == NULL && stpbresultvalue_ != NULL) delete stpbresultvalue_;
  stpbresultvalue_ = NULL;
}
inline const ::tagPBResultValue& tagPBAgentMsg::stpbresultvalue() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBResultValue)
  return stpbresultvalue_ != NULL ? *stpbresultvalue_
                         : *::tagPBResultValue::internal_default_instance();
}
inline ::tagPBResultValue* tagPBAgentMsg::mutable_stpbresultvalue() {
  
  if (stpbresultvalue_ == NULL) {
    stpbresultvalue_ = new ::tagPBResultValue;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBResultValue)
  return stpbresultvalue_;
}
inline ::tagPBResultValue* tagPBAgentMsg::release_stpbresultvalue() {
  // @@protoc_insertion_point(field_release:tagPBAgentMsg.stPBResultValue)
  
  ::tagPBResultValue* temp = stpbresultvalue_;
  stpbresultvalue_ = NULL;
  return temp;
}
inline void tagPBAgentMsg::set_allocated_stpbresultvalue(::tagPBResultValue* stpbresultvalue) {
  delete stpbresultvalue_;
  stpbresultvalue_ = stpbresultvalue;
  if (stpbresultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentMsg.stPBResultValue)
}

// .tagPBAgentTaskValue stPBAgentTaskValue = 3;
inline bool tagPBAgentMsg::has_stpbagenttaskvalue() const {
  return this != internal_default_instance() && stpbagenttaskvalue_ != NULL;
}
inline void tagPBAgentMsg::clear_stpbagenttaskvalue() {
  if (GetArenaNoVirtual() == NULL && stpbagenttaskvalue_ != NULL) delete stpbagenttaskvalue_;
  stpbagenttaskvalue_ = NULL;
}
inline const ::tagPBAgentTaskValue& tagPBAgentMsg::stpbagenttaskvalue() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBAgentTaskValue)
  return stpbagenttaskvalue_ != NULL ? *stpbagenttaskvalue_
                         : *::tagPBAgentTaskValue::internal_default_instance();
}
inline ::tagPBAgentTaskValue* tagPBAgentMsg::mutable_stpbagenttaskvalue() {
  
  if (stpbagenttaskvalue_ == NULL) {
    stpbagenttaskvalue_ = new ::tagPBAgentTaskValue;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBAgentTaskValue)
  return stpbagenttaskvalue_;
}
inline ::tagPBAgentTaskValue* tagPBAgentMsg::release_stpbagenttaskvalue() {
  // @@protoc_insertion_point(field_release:tagPBAgentMsg.stPBAgentTaskValue)
  
  ::tagPBAgentTaskValue* temp = stpbagenttaskvalue_;
  stpbagenttaskvalue_ = NULL;
  return temp;
}
inline void tagPBAgentMsg::set_allocated_stpbagenttaskvalue(::tagPBAgentTaskValue* stpbagenttaskvalue) {
  delete stpbagenttaskvalue_;
  stpbagenttaskvalue_ = stpbagenttaskvalue;
  if (stpbagenttaskvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentMsg.stPBAgentTaskValue)
}

// repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
inline int tagPBAgentMsg::stpbtaskflagmaps_size() const {
  return stpbtaskflagmaps_.size();
}
inline void tagPBAgentMsg::clear_stpbtaskflagmaps() {
  stpbtaskflagmaps_.Clear();
}
inline const ::tagPBTaskFlagMap& tagPBAgentMsg::stpbtaskflagmaps(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Get(index);
}
inline ::tagPBTaskFlagMap* tagPBAgentMsg::mutable_stpbtaskflagmaps(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Mutable(index);
}
inline ::tagPBTaskFlagMap* tagPBAgentMsg::add_stpbtaskflagmaps() {
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >*
tagPBAgentMsg::mutable_stpbtaskflagmaps() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.stPBTaskFlagMaps)
  return &stpbtaskflagmaps_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >&
tagPBAgentMsg::stpbtaskflagmaps() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_;
}

// repeated int32 nDelTaskIDs = 5;
inline int tagPBAgentMsg::ndeltaskids_size() const {
  return ndeltaskids_.size();
}
inline void tagPBAgentMsg::clear_ndeltaskids() {
  ndeltaskids_.Clear();
}
inline ::google::protobuf::int32 tagPBAgentMsg::ndeltaskids(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.nDelTaskIDs)
  return ndeltaskids_.Get(index);
}
inline void tagPBAgentMsg::set_ndeltaskids(int index, ::google::protobuf::int32 value) {
  ndeltaskids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.nDelTaskIDs)
}
inline void tagPBAgentMsg::add_ndeltaskids(::google::protobuf::int32 value) {
  ndeltaskids_.Add(value);
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.nDelTaskIDs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPBAgentMsg::ndeltaskids() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.nDelTaskIDs)
  return ndeltaskids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPBAgentMsg::mutable_ndeltaskids() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.nDelTaskIDs)
  return &ndeltaskids_;
}

// repeated string strConfFileName = 6;
inline int tagPBAgentMsg::strconffilename_size() const {
  return strconffilename_.size();
}
inline void tagPBAgentMsg::clear_strconffilename() {
  strconffilename_.Clear();
}
inline const ::std::string& tagPBAgentMsg::strconffilename(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Get(index);
}
inline ::std::string* tagPBAgentMsg::mutable_strconffilename(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Mutable(index);
}
inline void tagPBAgentMsg::set_strconffilename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.strConfFileName)
  strconffilename_.Mutable(index)->assign(value);
}
inline void tagPBAgentMsg::set_strconffilename(int index, const char* value) {
  strconffilename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagPBAgentMsg.strConfFileName)
}
inline void tagPBAgentMsg::set_strconffilename(int index, const char* value, size_t size) {
  strconffilename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentMsg.strConfFileName)
}
inline ::std::string* tagPBAgentMsg::add_strconffilename() {
  // @@protoc_insertion_point(field_add_mutable:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Add();
}
inline void tagPBAgentMsg::add_strconffilename(const ::std::string& value) {
  strconffilename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.strConfFileName)
}
inline void tagPBAgentMsg::add_strconffilename(const char* value) {
  strconffilename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagPBAgentMsg.strConfFileName)
}
inline void tagPBAgentMsg::add_strconffilename(const char* value, size_t size) {
  strconffilename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagPBAgentMsg.strConfFileName)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
tagPBAgentMsg::strconffilename() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.strConfFileName)
  return strconffilename_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
tagPBAgentMsg::mutable_strconffilename() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.strConfFileName)
  return &strconffilename_;
}

// -------------------------------------------------------------------

// tagPBResultValue

// int32 nFrameSeq = 1;
inline void tagPBResultValue::clear_nframeseq() {
  nframeseq_ = 0;
}
inline ::google::protobuf::int32 tagPBResultValue::nframeseq() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nFrameSeq)
  return nframeseq_;
}
inline void tagPBResultValue::set_nframeseq(::google::protobuf::int32 value) {
  
  nframeseq_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nFrameSeq)
}

// int32 nDeviceIndex = 2;
inline void tagPBResultValue::clear_ndeviceindex() {
  ndeviceindex_ = 0;
}
inline ::google::protobuf::int32 tagPBResultValue::ndeviceindex() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nDeviceIndex)
  return ndeviceindex_;
}
inline void tagPBResultValue::set_ndeviceindex(::google::protobuf::int32 value) {
  
  ndeviceindex_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nDeviceIndex)
}

// bytes byImgData = 3;
inline void tagPBResultValue::clear_byimgdata() {
  byimgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBResultValue::byimgdata() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.byImgData)
  return byimgdata_.GetNoArena();
}
inline void tagPBResultValue::set_byimgdata(const ::std::string& value) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultValue.byImgData)
}
#if LANG_CXX11
inline void tagPBResultValue::set_byimgdata(::std::string&& value) {
  
  byimgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultValue.byImgData)
}
#endif
inline void tagPBResultValue::set_byimgdata(const char* value) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultValue.byImgData)
}
inline void tagPBResultValue::set_byimgdata(const void* value, size_t size) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultValue.byImgData)
}
inline ::std::string* tagPBResultValue::mutable_byimgdata() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.byImgData)
  return byimgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBResultValue::release_byimgdata() {
  // @@protoc_insertion_point(field_release:tagPBResultValue.byImgData)
  
  return byimgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBResultValue::set_allocated_byimgdata(::std::string* byimgdata) {
  if (byimgdata != NULL) {
    
  } else {
    
  }
  byimgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byimgdata);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultValue.byImgData)
}

// int32 nWidth = 4;
inline void tagPBResultValue::clear_nwidth() {
  nwidth_ = 0;
}
inline ::google::protobuf::int32 tagPBResultValue::nwidth() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nWidth)
  return nwidth_;
}
inline void tagPBResultValue::set_nwidth(::google::protobuf::int32 value) {
  
  nwidth_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nWidth)
}

// int32 nHeight = 5;
inline void tagPBResultValue::clear_nheight() {
  nheight_ = 0;
}
inline ::google::protobuf::int32 tagPBResultValue::nheight() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nHeight)
  return nheight_;
}
inline void tagPBResultValue::set_nheight(::google::protobuf::int32 value) {
  
  nheight_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nHeight)
}

// string strJsonData = 6;
inline void tagPBResultValue::clear_strjsondata() {
  strjsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBResultValue::strjsondata() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.strJsonData)
  return strjsondata_.GetNoArena();
}
inline void tagPBResultValue::set_strjsondata(const ::std::string& value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultValue.strJsonData)
}
#if LANG_CXX11
inline void tagPBResultValue::set_strjsondata(::std::string&& value) {
  
  strjsondata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultValue.strJsonData)
}
#endif
inline void tagPBResultValue::set_strjsondata(const char* value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultValue.strJsonData)
}
inline void tagPBResultValue::set_strjsondata(const char* value, size_t size) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultValue.strJsonData)
}
inline ::std::string* tagPBResultValue::mutable_strjsondata() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.strJsonData)
  return strjsondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBResultValue::release_strjsondata() {
  // @@protoc_insertion_point(field_release:tagPBResultValue.strJsonData)
  
  return strjsondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBResultValue::set_allocated_strjsondata(::std::string* strjsondata) {
  if (strjsondata != NULL) {
    
  } else {
    
  }
  strjsondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strjsondata);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultValue.strJsonData)
}

// repeated .tagPBResult stPBResult = 7;
inline int tagPBResultValue::stpbresult_size() const {
  return stpbresult_.size();
}
inline void tagPBResultValue::clear_stpbresult() {
  stpbresult_.Clear();
}
inline const ::tagPBResult& tagPBResultValue::stpbresult(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.stPBResult)
  return stpbresult_.Get(index);
}
inline ::tagPBResult* tagPBResultValue::mutable_stpbresult(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.stPBResult)
  return stpbresult_.Mutable(index);
}
inline ::tagPBResult* tagPBResultValue::add_stpbresult() {
  // @@protoc_insertion_point(field_add:tagPBResultValue.stPBResult)
  return stpbresult_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBResult >*
tagPBResultValue::mutable_stpbresult() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultValue.stPBResult)
  return &stpbresult_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBResult >&
tagPBResultValue::stpbresult() const {
  // @@protoc_insertion_point(field_list:tagPBResultValue.stPBResult)
  return stpbresult_;
}

// -------------------------------------------------------------------

// tagPBResult

// int32 nTaskID = 1;
inline void tagPBResult::clear_ntaskid() {
  ntaskid_ = 0;
}
inline ::google::protobuf::int32 tagPBResult::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBResult.nTaskID)
  return ntaskid_;
}
inline void tagPBResult::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBResult.nTaskID)
}

// .EREGTYPE eRegType = 2;
inline void tagPBResult::clear_eregtype() {
  eregtype_ = 0;
}
inline ::EREGTYPE tagPBResult::eregtype() const {
  // @@protoc_insertion_point(field_get:tagPBResult.eRegType)
  return static_cast< ::EREGTYPE >(eregtype_);
}
inline void tagPBResult::set_eregtype(::EREGTYPE value) {
  
  eregtype_ = value;
  // @@protoc_insertion_point(field_set:tagPBResult.eRegType)
}

// repeated .tagPBResultRes stPBResultRes = 3;
inline int tagPBResult::stpbresultres_size() const {
  return stpbresultres_.size();
}
inline void tagPBResult::clear_stpbresultres() {
  stpbresultres_.Clear();
}
inline const ::tagPBResultRes& tagPBResult::stpbresultres(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResult.stPBResultRes)
  return stpbresultres_.Get(index);
}
inline ::tagPBResultRes* tagPBResult::mutable_stpbresultres(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResult.stPBResultRes)
  return stpbresultres_.Mutable(index);
}
inline ::tagPBResultRes* tagPBResult::add_stpbresultres() {
  // @@protoc_insertion_point(field_add:tagPBResult.stPBResultRes)
  return stpbresultres_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBResultRes >*
tagPBResult::mutable_stpbresultres() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResult.stPBResultRes)
  return &stpbresultres_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBResultRes >&
tagPBResult::stpbresultres() const {
  // @@protoc_insertion_point(field_list:tagPBResult.stPBResultRes)
  return stpbresultres_;
}

// -------------------------------------------------------------------

// tagPBResultRes

// int32 nFlag = 1;
inline void tagPBResultRes::clear_nflag() {
  nflag_ = 0;
}
inline ::google::protobuf::int32 tagPBResultRes::nflag() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.nFlag)
  return nflag_;
}
inline void tagPBResultRes::set_nflag(::google::protobuf::int32 value) {
  
  nflag_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultRes.nFlag)
}

// .tagPBBox stPBBox = 2;
inline bool tagPBResultRes::has_stpbbox() const {
  return this != internal_default_instance() && stpbbox_ != NULL;
}
inline void tagPBResultRes::clear_stpbbox() {
  if (GetArenaNoVirtual() == NULL && stpbbox_ != NULL) delete stpbbox_;
  stpbbox_ = NULL;
}
inline const ::tagPBBox& tagPBResultRes::stpbbox() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBox)
  return stpbbox_ != NULL ? *stpbbox_
                         : *::tagPBBox::internal_default_instance();
}
inline ::tagPBBox* tagPBResultRes::mutable_stpbbox() {
  
  if (stpbbox_ == NULL) {
    stpbbox_ = new ::tagPBBox;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBox)
  return stpbbox_;
}
inline ::tagPBBox* tagPBResultRes::release_stpbbox() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBBox)
  
  ::tagPBBox* temp = stpbbox_;
  stpbbox_ = NULL;
  return temp;
}
inline void tagPBResultRes::set_allocated_stpbbox(::tagPBBox* stpbbox) {
  delete stpbbox_;
  stpbbox_ = stpbbox;
  if (stpbbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBBox)
}

// repeated .tagPBBox stPBBoxs = 3;
inline int tagPBResultRes::stpbboxs_size() const {
  return stpbboxs_.size();
}
inline void tagPBResultRes::clear_stpbboxs() {
  stpbboxs_.Clear();
}
inline const ::tagPBBox& tagPBResultRes::stpbboxs(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Get(index);
}
inline ::tagPBBox* tagPBResultRes::mutable_stpbboxs(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Mutable(index);
}
inline ::tagPBBox* tagPBResultRes::add_stpbboxs() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBBox >*
tagPBResultRes::mutable_stpbboxs() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBBoxs)
  return &stpbboxs_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBBox >&
tagPBResultRes::stpbboxs() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBBoxs)
  return stpbboxs_;
}

// repeated .tagPBPoint stPBPoints = 4;
inline int tagPBResultRes::stpbpoints_size() const {
  return stpbpoints_.size();
}
inline void tagPBResultRes::clear_stpbpoints() {
  stpbpoints_.Clear();
}
inline const ::tagPBPoint& tagPBResultRes::stpbpoints(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBPoints)
  return stpbpoints_.Get(index);
}
inline ::tagPBPoint* tagPBResultRes::mutable_stpbpoints(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBPoints)
  return stpbpoints_.Mutable(index);
}
inline ::tagPBPoint* tagPBResultRes::add_stpbpoints() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBPoints)
  return stpbpoints_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBPoint >*
tagPBResultRes::mutable_stpbpoints() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBPoints)
  return &stpbpoints_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBPoint >&
tagPBResultRes::stpbpoints() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBPoints)
  return stpbpoints_;
}

// float fNum = 5;
inline void tagPBResultRes::clear_fnum() {
  fnum_ = 0;
}
inline float tagPBResultRes::fnum() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.fNum)
  return fnum_;
}
inline void tagPBResultRes::set_fnum(float value) {
  
  fnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultRes.fNum)
}

// .tagPBRect stPBROI = 6;
inline bool tagPBResultRes::has_stpbroi() const {
  return this != internal_default_instance() && stpbroi_ != NULL;
}
inline void tagPBResultRes::clear_stpbroi() {
  if (GetArenaNoVirtual() == NULL && stpbroi_ != NULL) delete stpbroi_;
  stpbroi_ = NULL;
}
inline const ::tagPBRect& tagPBResultRes::stpbroi() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBROI)
  return stpbroi_ != NULL ? *stpbroi_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBResultRes::mutable_stpbroi() {
  
  if (stpbroi_ == NULL) {
    stpbroi_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBROI)
  return stpbroi_;
}
inline ::tagPBRect* tagPBResultRes::release_stpbroi() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBROI)
  
  ::tagPBRect* temp = stpbroi_;
  stpbroi_ = NULL;
  return temp;
}
inline void tagPBResultRes::set_allocated_stpbroi(::tagPBRect* stpbroi) {
  delete stpbroi_;
  stpbroi_ = stpbroi;
  if (stpbroi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBROI)
}

// .tagPBRect stPBRect = 7;
inline bool tagPBResultRes::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
inline void tagPBResultRes::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
inline const ::tagPBRect& tagPBResultRes::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBResultRes::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBRect)
  return stpbrect_;
}
inline ::tagPBRect* tagPBResultRes::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
inline void tagPBResultRes::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBRect)
}

// repeated .tagPBBlood stPBBloods = 8;
inline int tagPBResultRes::stpbbloods_size() const {
  return stpbbloods_.size();
}
inline void tagPBResultRes::clear_stpbbloods() {
  stpbbloods_.Clear();
}
inline const ::tagPBBlood& tagPBResultRes::stpbbloods(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBloods)
  return stpbbloods_.Get(index);
}
inline ::tagPBBlood* tagPBResultRes::mutable_stpbbloods(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBloods)
  return stpbbloods_.Mutable(index);
}
inline ::tagPBBlood* tagPBResultRes::add_stpbbloods() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBBloods)
  return stpbbloods_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBBlood >*
tagPBResultRes::mutable_stpbbloods() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBBloods)
  return &stpbbloods_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBBlood >&
tagPBResultRes::stpbbloods() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBBloods)
  return stpbbloods_;
}

// .tagPBPoint stPBViewAnglePoint = 9;
inline bool tagPBResultRes::has_stpbviewanglepoint() const {
  return this != internal_default_instance() && stpbviewanglepoint_ != NULL;
}
inline void tagPBResultRes::clear_stpbviewanglepoint() {
  if (GetArenaNoVirtual() == NULL && stpbviewanglepoint_ != NULL) delete stpbviewanglepoint_;
  stpbviewanglepoint_ = NULL;
}
inline const ::tagPBPoint& tagPBResultRes::stpbviewanglepoint() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBViewAnglePoint)
  return stpbviewanglepoint_ != NULL ? *stpbviewanglepoint_
                         : *::tagPBPoint::internal_default_instance();
}
inline ::tagPBPoint* tagPBResultRes::mutable_stpbviewanglepoint() {
  
  if (stpbviewanglepoint_ == NULL) {
    stpbviewanglepoint_ = new ::tagPBPoint;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBViewAnglePoint)
  return stpbviewanglepoint_;
}
inline ::tagPBPoint* tagPBResultRes::release_stpbviewanglepoint() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBViewAnglePoint)
  
  ::tagPBPoint* temp = stpbviewanglepoint_;
  stpbviewanglepoint_ = NULL;
  return temp;
}
inline void tagPBResultRes::set_allocated_stpbviewanglepoint(::tagPBPoint* stpbviewanglepoint) {
  delete stpbviewanglepoint_;
  stpbviewanglepoint_ = stpbviewanglepoint;
  if (stpbviewanglepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBViewAnglePoint)
}

// .tagPBPoint stPBMyLocPoint = 10;
inline bool tagPBResultRes::has_stpbmylocpoint() const {
  return this != internal_default_instance() && stpbmylocpoint_ != NULL;
}
inline void tagPBResultRes::clear_stpbmylocpoint() {
  if (GetArenaNoVirtual() == NULL && stpbmylocpoint_ != NULL) delete stpbmylocpoint_;
  stpbmylocpoint_ = NULL;
}
inline const ::tagPBPoint& tagPBResultRes::stpbmylocpoint() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBMyLocPoint)
  return stpbmylocpoint_ != NULL ? *stpbmylocpoint_
                         : *::tagPBPoint::internal_default_instance();
}
inline ::tagPBPoint* tagPBResultRes::mutable_stpbmylocpoint() {
  
  if (stpbmylocpoint_ == NULL) {
    stpbmylocpoint_ = new ::tagPBPoint;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBMyLocPoint)
  return stpbmylocpoint_;
}
inline ::tagPBPoint* tagPBResultRes::release_stpbmylocpoint() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBMyLocPoint)
  
  ::tagPBPoint* temp = stpbmylocpoint_;
  stpbmylocpoint_ = NULL;
  return temp;
}
inline void tagPBResultRes::set_allocated_stpbmylocpoint(::tagPBPoint* stpbmylocpoint) {
  delete stpbmylocpoint_;
  stpbmylocpoint_ = stpbmylocpoint;
  if (stpbmylocpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBMyLocPoint)
}

// repeated float fColorMeanVars = 11;
inline int tagPBResultRes::fcolormeanvars_size() const {
  return fcolormeanvars_.size();
}
inline void tagPBResultRes::clear_fcolormeanvars() {
  fcolormeanvars_.Clear();
}
inline float tagPBResultRes::fcolormeanvars(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.fColorMeanVars)
  return fcolormeanvars_.Get(index);
}
inline void tagPBResultRes::set_fcolormeanvars(int index, float value) {
  fcolormeanvars_.Set(index, value);
  // @@protoc_insertion_point(field_set:tagPBResultRes.fColorMeanVars)
}
inline void tagPBResultRes::add_fcolormeanvars(float value) {
  fcolormeanvars_.Add(value);
  // @@protoc_insertion_point(field_add:tagPBResultRes.fColorMeanVars)
}
inline const ::google::protobuf::RepeatedField< float >&
tagPBResultRes::fcolormeanvars() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.fColorMeanVars)
  return fcolormeanvars_;
}
inline ::google::protobuf::RepeatedField< float >*
tagPBResultRes::mutable_fcolormeanvars() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.fColorMeanVars)
  return &fcolormeanvars_;
}

// bytes byImage = 12;
inline void tagPBResultRes::clear_byimage() {
  byimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBResultRes::byimage() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.byImage)
  return byimage_.GetNoArena();
}
inline void tagPBResultRes::set_byimage(const ::std::string& value) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultRes.byImage)
}
#if LANG_CXX11
inline void tagPBResultRes::set_byimage(::std::string&& value) {
  
  byimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultRes.byImage)
}
#endif
inline void tagPBResultRes::set_byimage(const char* value) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultRes.byImage)
}
inline void tagPBResultRes::set_byimage(const void* value, size_t size) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultRes.byImage)
}
inline ::std::string* tagPBResultRes::mutable_byimage() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.byImage)
  return byimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBResultRes::release_byimage() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.byImage)
  
  return byimage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBResultRes::set_allocated_byimage(::std::string* byimage) {
  if (byimage != NULL) {
    
  } else {
    
  }
  byimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byimage);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.byImage)
}

// -------------------------------------------------------------------

// tagPBPoint

// int32 nX = 1;
inline void tagPBPoint::clear_nx() {
  nx_ = 0;
}
inline ::google::protobuf::int32 tagPBPoint::nx() const {
  // @@protoc_insertion_point(field_get:tagPBPoint.nX)
  return nx_;
}
inline void tagPBPoint::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagPBPoint.nX)
}

// int32 nY = 2;
inline void tagPBPoint::clear_ny() {
  ny_ = 0;
}
inline ::google::protobuf::int32 tagPBPoint::ny() const {
  // @@protoc_insertion_point(field_get:tagPBPoint.nY)
  return ny_;
}
inline void tagPBPoint::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagPBPoint.nY)
}

// -------------------------------------------------------------------

// tagPBBlood

// int32 nLevel = 1;
inline void tagPBBlood::clear_nlevel() {
  nlevel_ = 0;
}
inline ::google::protobuf::int32 tagPBBlood::nlevel() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.nLevel)
  return nlevel_;
}
inline void tagPBBlood::set_nlevel(::google::protobuf::int32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.nLevel)
}

// float fScore = 2;
inline void tagPBBlood::clear_fscore() {
  fscore_ = 0;
}
inline float tagPBBlood::fscore() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.fScore)
  return fscore_;
}
inline void tagPBBlood::set_fscore(float value) {
  
  fscore_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.fScore)
}

// float fPercent = 3;
inline void tagPBBlood::clear_fpercent() {
  fpercent_ = 0;
}
inline float tagPBBlood::fpercent() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.fPercent)
  return fpercent_;
}
inline void tagPBBlood::set_fpercent(float value) {
  
  fpercent_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.fPercent)
}

// int32 nClassID = 4;
inline void tagPBBlood::clear_nclassid() {
  nclassid_ = 0;
}
inline ::google::protobuf::int32 tagPBBlood::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.nClassID)
  return nclassid_;
}
inline void tagPBBlood::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.nClassID)
}

// string strName = 5;
inline void tagPBBlood::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBBlood::strname() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.strName)
  return strname_.GetNoArena();
}
inline void tagPBBlood::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBBlood.strName)
}
#if LANG_CXX11
inline void tagPBBlood::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBBlood.strName)
}
#endif
inline void tagPBBlood::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBBlood.strName)
}
inline void tagPBBlood::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBBlood.strName)
}
inline ::std::string* tagPBBlood::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBBlood.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBBlood::release_strname() {
  // @@protoc_insertion_point(field_release:tagPBBlood.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBBlood::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:tagPBBlood.strName)
}

// .tagPBRect stPBRect = 6;
inline bool tagPBBlood::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
inline void tagPBBlood::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
inline const ::tagPBRect& tagPBBlood::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBBlood::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBBlood.stPBRect)
  return stpbrect_;
}
inline ::tagPBRect* tagPBBlood::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBBlood.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
inline void tagPBBlood::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBBlood.stPBRect)
}

// -------------------------------------------------------------------

// tagPBBox

// string strTmplName = 1;
inline void tagPBBox::clear_strtmplname() {
  strtmplname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBBox::strtmplname() const {
  // @@protoc_insertion_point(field_get:tagPBBox.strTmplName)
  return strtmplname_.GetNoArena();
}
inline void tagPBBox::set_strtmplname(const ::std::string& value) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBBox.strTmplName)
}
#if LANG_CXX11
inline void tagPBBox::set_strtmplname(::std::string&& value) {
  
  strtmplname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBBox.strTmplName)
}
#endif
inline void tagPBBox::set_strtmplname(const char* value) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBBox.strTmplName)
}
inline void tagPBBox::set_strtmplname(const char* value, size_t size) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBBox.strTmplName)
}
inline ::std::string* tagPBBox::mutable_strtmplname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBBox.strTmplName)
  return strtmplname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBBox::release_strtmplname() {
  // @@protoc_insertion_point(field_release:tagPBBox.strTmplName)
  
  return strtmplname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBBox::set_allocated_strtmplname(::std::string* strtmplname) {
  if (strtmplname != NULL) {
    
  } else {
    
  }
  strtmplname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtmplname);
  // @@protoc_insertion_point(field_set_allocated:tagPBBox.strTmplName)
}

// int32 nClassID = 2;
inline void tagPBBox::clear_nclassid() {
  nclassid_ = 0;
}
inline ::google::protobuf::int32 tagPBBox::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBBox.nClassID)
  return nclassid_;
}
inline void tagPBBox::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.nClassID)
}

// float fScore = 3;
inline void tagPBBox::clear_fscore() {
  fscore_ = 0;
}
inline float tagPBBox::fscore() const {
  // @@protoc_insertion_point(field_get:tagPBBox.fScore)
  return fscore_;
}
inline void tagPBBox::set_fscore(float value) {
  
  fscore_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.fScore)
}

// float fScale = 4;
inline void tagPBBox::clear_fscale() {
  fscale_ = 0;
}
inline float tagPBBox::fscale() const {
  // @@protoc_insertion_point(field_get:tagPBBox.fScale)
  return fscale_;
}
inline void tagPBBox::set_fscale(float value) {
  
  fscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.fScale)
}

// .tagPBRect stPBRect = 5;
inline bool tagPBBox::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
inline void tagPBBox::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
inline const ::tagPBRect& tagPBBox::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBBox.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBBox::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBBox.stPBRect)
  return stpbrect_;
}
inline ::tagPBRect* tagPBBox::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBBox.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
inline void tagPBBox::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBBox.stPBRect)
}

// -------------------------------------------------------------------

// tagPBAgentTaskValue

// uint32 uGroupID = 1;
inline void tagPBAgentTaskValue::clear_ugroupid() {
  ugroupid_ = 0u;
}
inline ::google::protobuf::uint32 tagPBAgentTaskValue::ugroupid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskValue.uGroupID)
  return ugroupid_;
}
inline void tagPBAgentTaskValue::set_ugroupid(::google::protobuf::uint32 value) {
  
  ugroupid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskValue.uGroupID)
}

// repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
inline int tagPBAgentTaskValue::stpbagenttasktsks_size() const {
  return stpbagenttasktsks_.size();
}
inline void tagPBAgentTaskValue::clear_stpbagenttasktsks() {
  stpbagenttasktsks_.Clear();
}
inline const ::tagPBAgentTaskTsk& tagPBAgentTaskValue::stpbagenttasktsks(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Get(index);
}
inline ::tagPBAgentTaskTsk* tagPBAgentTaskValue::mutable_stpbagenttasktsks(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Mutable(index);
}
inline ::tagPBAgentTaskTsk* tagPBAgentTaskValue::add_stpbagenttasktsks() {
  // @@protoc_insertion_point(field_add:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >*
tagPBAgentTaskValue::mutable_stpbagenttasktsks() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return &stpbagenttasktsks_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >&
tagPBAgentTaskValue::stpbagenttasktsks() const {
  // @@protoc_insertion_point(field_list:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_;
}

// -------------------------------------------------------------------

// tagPBAgentTaskTsk

// int32 nTaskID = 1;
inline void tagPBAgentTaskTsk::clear_ntaskid() {
  ntaskid_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskTsk::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.nTaskID)
  return ntaskid_;
}
inline void tagPBAgentTaskTsk::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.nTaskID)
}

// .EREGTYPE eType = 2;
inline void tagPBAgentTaskTsk::clear_etype() {
  etype_ = 0;
}
inline ::EREGTYPE tagPBAgentTaskTsk::etype() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.eType)
  return static_cast< ::EREGTYPE >(etype_);
}
inline void tagPBAgentTaskTsk::set_etype(::EREGTYPE value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.eType)
}

// int32 nSkipFrame = 3;
inline void tagPBAgentTaskTsk::clear_nskipframe() {
  nskipframe_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskTsk::nskipframe() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.nSkipFrame)
  return nskipframe_;
}
inline void tagPBAgentTaskTsk::set_nskipframe(::google::protobuf::int32 value) {
  
  nskipframe_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.nSkipFrame)
}

// repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
inline int tagPBAgentTaskTsk::stpbagenttaskelements_size() const {
  return stpbagenttaskelements_.size();
}
inline void tagPBAgentTaskTsk::clear_stpbagenttaskelements() {
  stpbagenttaskelements_.Clear();
}
inline const ::tagPBAgentTaskElement& tagPBAgentTaskTsk::stpbagenttaskelements(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Get(index);
}
inline ::tagPBAgentTaskElement* tagPBAgentTaskTsk::mutable_stpbagenttaskelements(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Mutable(index);
}
inline ::tagPBAgentTaskElement* tagPBAgentTaskTsk::add_stpbagenttaskelements() {
  // @@protoc_insertion_point(field_add:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >*
tagPBAgentTaskTsk::mutable_stpbagenttaskelements() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return &stpbagenttaskelements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >&
tagPBAgentTaskTsk::stpbagenttaskelements() const {
  // @@protoc_insertion_point(field_list:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_;
}

// -------------------------------------------------------------------

// tagPBAgentTaskElement

// .tagPBRect stPBRect = 1;
inline bool tagPBAgentTaskElement::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
inline void tagPBAgentTaskElement::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
inline const ::tagPBRect& tagPBAgentTaskElement::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBAgentTaskElement::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.stPBRect)
  return stpbrect_;
}
inline ::tagPBRect* tagPBAgentTaskElement::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
inline void tagPBAgentTaskElement::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.stPBRect)
}

// string strAlgorithm = 2;
inline void tagPBAgentTaskElement::clear_stralgorithm() {
  stralgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::stralgorithm() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strAlgorithm)
  return stralgorithm_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_stralgorithm(const ::std::string& value) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strAlgorithm)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_stralgorithm(::std::string&& value) {
  
  stralgorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strAlgorithm)
}
#endif
inline void tagPBAgentTaskElement::set_stralgorithm(const char* value) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strAlgorithm)
}
inline void tagPBAgentTaskElement::set_stralgorithm(const char* value, size_t size) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strAlgorithm)
}
inline ::std::string* tagPBAgentTaskElement::mutable_stralgorithm() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strAlgorithm)
  return stralgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_stralgorithm() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strAlgorithm)
  
  return stralgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_stralgorithm(::std::string* stralgorithm) {
  if (stralgorithm != NULL) {
    
  } else {
    
  }
  stralgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stralgorithm);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strAlgorithm)
}

// float fMinScale = 3;
inline void tagPBAgentTaskElement::clear_fminscale() {
  fminscale_ = 0;
}
inline float tagPBAgentTaskElement::fminscale() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fMinScale)
  return fminscale_;
}
inline void tagPBAgentTaskElement::set_fminscale(float value) {
  
  fminscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fMinScale)
}

// float fMaxScale = 4;
inline void tagPBAgentTaskElement::clear_fmaxscale() {
  fmaxscale_ = 0;
}
inline float tagPBAgentTaskElement::fmaxscale() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fMaxScale)
  return fmaxscale_;
}
inline void tagPBAgentTaskElement::set_fmaxscale(float value) {
  
  fmaxscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fMaxScale)
}

// int32 nScaleLevel = 5;
inline void tagPBAgentTaskElement::clear_nscalelevel() {
  nscalelevel_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nscalelevel() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nScaleLevel)
  return nscalelevel_;
}
inline void tagPBAgentTaskElement::set_nscalelevel(::google::protobuf::int32 value) {
  
  nscalelevel_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nScaleLevel)
}

// string strCondition = 6;
inline void tagPBAgentTaskElement::clear_strcondition() {
  strcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strcondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strCondition)
  return strcondition_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strcondition(const ::std::string& value) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strCondition)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strcondition(::std::string&& value) {
  
  strcondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strCondition)
}
#endif
inline void tagPBAgentTaskElement::set_strcondition(const char* value) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strCondition)
}
inline void tagPBAgentTaskElement::set_strcondition(const char* value, size_t size) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strCondition)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strcondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strCondition)
  return strcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strcondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strCondition)
  
  return strcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strcondition(::std::string* strcondition) {
  if (strcondition != NULL) {
    
  } else {
    
  }
  strcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strCondition)
}

// int32 nFilterSize = 7;
inline void tagPBAgentTaskElement::clear_nfiltersize() {
  nfiltersize_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nfiltersize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nFilterSize)
  return nfiltersize_;
}
inline void tagPBAgentTaskElement::set_nfiltersize(::google::protobuf::int32 value) {
  
  nfiltersize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nFilterSize)
}

// .tagPBTemplates stPBTemplates = 8;
inline bool tagPBAgentTaskElement::has_stpbtemplates() const {
  return this != internal_default_instance() && stpbtemplates_ != NULL;
}
inline void tagPBAgentTaskElement::clear_stpbtemplates() {
  if (GetArenaNoVirtual() == NULL && stpbtemplates_ != NULL) delete stpbtemplates_;
  stpbtemplates_ = NULL;
}
inline const ::tagPBTemplates& tagPBAgentTaskElement::stpbtemplates() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.stPBTemplates)
  return stpbtemplates_ != NULL ? *stpbtemplates_
                         : *::tagPBTemplates::internal_default_instance();
}
inline ::tagPBTemplates* tagPBAgentTaskElement::mutable_stpbtemplates() {
  
  if (stpbtemplates_ == NULL) {
    stpbtemplates_ = new ::tagPBTemplates;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.stPBTemplates)
  return stpbtemplates_;
}
inline ::tagPBTemplates* tagPBAgentTaskElement::release_stpbtemplates() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.stPBTemplates)
  
  ::tagPBTemplates* temp = stpbtemplates_;
  stpbtemplates_ = NULL;
  return temp;
}
inline void tagPBAgentTaskElement::set_allocated_stpbtemplates(::tagPBTemplates* stpbtemplates) {
  delete stpbtemplates_;
  stpbtemplates_ = stpbtemplates;
  if (stpbtemplates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.stPBTemplates)
}

// float fIntervalTime = 9;
inline void tagPBAgentTaskElement::clear_fintervaltime() {
  fintervaltime_ = 0;
}
inline float tagPBAgentTaskElement::fintervaltime() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fIntervalTime)
  return fintervaltime_;
}
inline void tagPBAgentTaskElement::set_fintervaltime(float value) {
  
  fintervaltime_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fIntervalTime)
}

// float fThreshold = 10;
inline void tagPBAgentTaskElement::clear_fthreshold() {
  fthreshold_ = 0;
}
inline float tagPBAgentTaskElement::fthreshold() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fThreshold)
  return fthreshold_;
}
inline void tagPBAgentTaskElement::set_fthreshold(float value) {
  
  fthreshold_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fThreshold)
}

// string strCfgPath = 11;
inline void tagPBAgentTaskElement::clear_strcfgpath() {
  strcfgpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strcfgpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strCfgPath)
  return strcfgpath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strcfgpath(const ::std::string& value) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strCfgPath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strcfgpath(::std::string&& value) {
  
  strcfgpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strCfgPath)
}
#endif
inline void tagPBAgentTaskElement::set_strcfgpath(const char* value) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strCfgPath)
}
inline void tagPBAgentTaskElement::set_strcfgpath(const char* value, size_t size) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strCfgPath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strcfgpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strCfgPath)
  return strcfgpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strcfgpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strCfgPath)
  
  return strcfgpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strcfgpath(::std::string* strcfgpath) {
  if (strcfgpath != NULL) {
    
  } else {
    
  }
  strcfgpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcfgpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strCfgPath)
}

// string strWeightPath = 12;
inline void tagPBAgentTaskElement::clear_strweightpath() {
  strweightpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strweightpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strWeightPath)
  return strweightpath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strweightpath(const ::std::string& value) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strWeightPath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strweightpath(::std::string&& value) {
  
  strweightpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strWeightPath)
}
#endif
inline void tagPBAgentTaskElement::set_strweightpath(const char* value) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strWeightPath)
}
inline void tagPBAgentTaskElement::set_strweightpath(const char* value, size_t size) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strWeightPath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strweightpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strWeightPath)
  return strweightpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strweightpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strWeightPath)
  
  return strweightpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strweightpath(::std::string* strweightpath) {
  if (strweightpath != NULL) {
    
  } else {
    
  }
  strweightpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strweightpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strWeightPath)
}

// string strNamePath = 13;
inline void tagPBAgentTaskElement::clear_strnamepath() {
  strnamepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strnamepath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strNamePath)
  return strnamepath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strnamepath(const ::std::string& value) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strNamePath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strnamepath(::std::string&& value) {
  
  strnamepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strNamePath)
}
#endif
inline void tagPBAgentTaskElement::set_strnamepath(const char* value) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strNamePath)
}
inline void tagPBAgentTaskElement::set_strnamepath(const char* value, size_t size) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strNamePath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strnamepath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strNamePath)
  return strnamepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strnamepath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strNamePath)
  
  return strnamepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strnamepath(::std::string* strnamepath) {
  if (strnamepath != NULL) {
    
  } else {
    
  }
  strnamepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnamepath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strNamePath)
}

// int32 nBloodLength = 14;
inline void tagPBAgentTaskElement::clear_nbloodlength() {
  nbloodlength_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nbloodlength() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nBloodLength)
  return nbloodlength_;
}
inline void tagPBAgentTaskElement::set_nbloodlength(::google::protobuf::int32 value) {
  
  nbloodlength_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nBloodLength)
}

// int32 nMaxPointNum = 15;
inline void tagPBAgentTaskElement::clear_nmaxpointnum() {
  nmaxpointnum_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nmaxpointnum() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nMaxPointNum)
  return nmaxpointnum_;
}
inline void tagPBAgentTaskElement::set_nmaxpointnum(::google::protobuf::int32 value) {
  
  nmaxpointnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nMaxPointNum)
}

// string strMaskPath = 16;
inline void tagPBAgentTaskElement::clear_strmaskpath() {
  strmaskpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strmaskpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMaskPath)
  return strmaskpath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strmaskpath(const ::std::string& value) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMaskPath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strmaskpath(::std::string&& value) {
  
  strmaskpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMaskPath)
}
#endif
inline void tagPBAgentTaskElement::set_strmaskpath(const char* value) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMaskPath)
}
inline void tagPBAgentTaskElement::set_strmaskpath(const char* value, size_t size) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMaskPath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strmaskpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMaskPath)
  return strmaskpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strmaskpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMaskPath)
  
  return strmaskpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strmaskpath(::std::string* strmaskpath) {
  if (strmaskpath != NULL) {
    
  } else {
    
  }
  strmaskpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmaskpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMaskPath)
}

// string strMyLocCondition = 17;
inline void tagPBAgentTaskElement::clear_strmyloccondition() {
  strmyloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strmyloccondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMyLocCondition)
  return strmyloccondition_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strmyloccondition(const ::std::string& value) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMyLocCondition)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strmyloccondition(::std::string&& value) {
  
  strmyloccondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMyLocCondition)
}
#endif
inline void tagPBAgentTaskElement::set_strmyloccondition(const char* value) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMyLocCondition)
}
inline void tagPBAgentTaskElement::set_strmyloccondition(const char* value, size_t size) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMyLocCondition)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strmyloccondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMyLocCondition)
  return strmyloccondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strmyloccondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMyLocCondition)
  
  return strmyloccondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strmyloccondition(::std::string* strmyloccondition) {
  if (strmyloccondition != NULL) {
    
  } else {
    
  }
  strmyloccondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmyloccondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMyLocCondition)
}

// string strFriendsCondition = 18;
inline void tagPBAgentTaskElement::clear_strfriendscondition() {
  strfriendscondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strfriendscondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strFriendsCondition)
  return strfriendscondition_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strfriendscondition(const ::std::string& value) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strFriendsCondition)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strfriendscondition(::std::string&& value) {
  
  strfriendscondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strFriendsCondition)
}
#endif
inline void tagPBAgentTaskElement::set_strfriendscondition(const char* value) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strFriendsCondition)
}
inline void tagPBAgentTaskElement::set_strfriendscondition(const char* value, size_t size) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strFriendsCondition)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strfriendscondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strFriendsCondition)
  return strfriendscondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strfriendscondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strFriendsCondition)
  
  return strfriendscondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strfriendscondition(::std::string* strfriendscondition) {
  if (strfriendscondition != NULL) {
    
  } else {
    
  }
  strfriendscondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfriendscondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strFriendsCondition)
}

// string strViewLocCondition = 19;
inline void tagPBAgentTaskElement::clear_strviewloccondition() {
  strviewloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strviewloccondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strViewLocCondition)
  return strviewloccondition_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strviewloccondition(const ::std::string& value) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strViewLocCondition)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strviewloccondition(::std::string&& value) {
  
  strviewloccondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strViewLocCondition)
}
#endif
inline void tagPBAgentTaskElement::set_strviewloccondition(const char* value) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strViewLocCondition)
}
inline void tagPBAgentTaskElement::set_strviewloccondition(const char* value, size_t size) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strViewLocCondition)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strviewloccondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strViewLocCondition)
  return strviewloccondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strviewloccondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strViewLocCondition)
  
  return strviewloccondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strviewloccondition(::std::string* strviewloccondition) {
  if (strviewloccondition != NULL) {
    
  } else {
    
  }
  strviewloccondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strviewloccondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strViewLocCondition)
}

// string strMapPath = 20;
inline void tagPBAgentTaskElement::clear_strmappath() {
  strmappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strmappath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMapPath)
  return strmappath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strmappath(const ::std::string& value) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMapPath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strmappath(::std::string&& value) {
  
  strmappath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMapPath)
}
#endif
inline void tagPBAgentTaskElement::set_strmappath(const char* value) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMapPath)
}
inline void tagPBAgentTaskElement::set_strmappath(const char* value, size_t size) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMapPath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strmappath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMapPath)
  return strmappath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strmappath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMapPath)
  
  return strmappath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strmappath(::std::string* strmappath) {
  if (strmappath != NULL) {
    
  } else {
    
  }
  strmappath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmappath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMapPath)
}

// string strImgFilePath = 21;
inline void tagPBAgentTaskElement::clear_strimgfilepath() {
  strimgfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBAgentTaskElement::strimgfilepath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strImgFilePath)
  return strimgfilepath_.GetNoArena();
}
inline void tagPBAgentTaskElement::set_strimgfilepath(const ::std::string& value) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strImgFilePath)
}
#if LANG_CXX11
inline void tagPBAgentTaskElement::set_strimgfilepath(::std::string&& value) {
  
  strimgfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strImgFilePath)
}
#endif
inline void tagPBAgentTaskElement::set_strimgfilepath(const char* value) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strImgFilePath)
}
inline void tagPBAgentTaskElement::set_strimgfilepath(const char* value, size_t size) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strImgFilePath)
}
inline ::std::string* tagPBAgentTaskElement::mutable_strimgfilepath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strImgFilePath)
  return strimgfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBAgentTaskElement::release_strimgfilepath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strImgFilePath)
  
  return strimgfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBAgentTaskElement::set_allocated_strimgfilepath(::std::string* strimgfilepath) {
  if (strimgfilepath != NULL) {
    
  } else {
    
  }
  strimgfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strimgfilepath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strImgFilePath)
}

// int32 nMaxBBoxNum = 22;
inline void tagPBAgentTaskElement::clear_nmaxbboxnum() {
  nmaxbboxnum_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nmaxbboxnum() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nMaxBBoxNum)
  return nmaxbboxnum_;
}
inline void tagPBAgentTaskElement::set_nmaxbboxnum(::google::protobuf::int32 value) {
  
  nmaxbboxnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nMaxBBoxNum)
}

// int32 nDilateSize = 23;
inline void tagPBAgentTaskElement::clear_ndilatesize() {
  ndilatesize_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::ndilatesize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nDilateSize)
  return ndilatesize_;
}
inline void tagPBAgentTaskElement::set_ndilatesize(::google::protobuf::int32 value) {
  
  ndilatesize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nDilateSize)
}

// int32 nErodeSize = 24;
inline void tagPBAgentTaskElement::clear_nerodesize() {
  nerodesize_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nerodesize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nErodeSize)
  return nerodesize_;
}
inline void tagPBAgentTaskElement::set_nerodesize(::google::protobuf::int32 value) {
  
  nerodesize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nErodeSize)
}

// int32 nRegionSize = 25;
inline void tagPBAgentTaskElement::clear_nregionsize() {
  nregionsize_ = 0;
}
inline ::google::protobuf::int32 tagPBAgentTaskElement::nregionsize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nRegionSize)
  return nregionsize_;
}
inline void tagPBAgentTaskElement::set_nregionsize(::google::protobuf::int32 value) {
  
  nregionsize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nRegionSize)
}

// -------------------------------------------------------------------

// tagPBRect

// int32 nX = 1;
inline void tagPBRect::clear_nx() {
  nx_ = 0;
}
inline ::google::protobuf::int32 tagPBRect::nx() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nX)
  return nx_;
}
inline void tagPBRect::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nX)
}

// int32 nY = 2;
inline void tagPBRect::clear_ny() {
  ny_ = 0;
}
inline ::google::protobuf::int32 tagPBRect::ny() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nY)
  return ny_;
}
inline void tagPBRect::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nY)
}

// int32 nW = 3;
inline void tagPBRect::clear_nw() {
  nw_ = 0;
}
inline ::google::protobuf::int32 tagPBRect::nw() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nW)
  return nw_;
}
inline void tagPBRect::set_nw(::google::protobuf::int32 value) {
  
  nw_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nW)
}

// int32 nH = 4;
inline void tagPBRect::clear_nh() {
  nh_ = 0;
}
inline ::google::protobuf::int32 tagPBRect::nh() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nH)
  return nh_;
}
inline void tagPBRect::set_nh(::google::protobuf::int32 value) {
  
  nh_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nH)
}

// -------------------------------------------------------------------

// tagPBTemplates

// repeated .tagPBTemplate stPBTemplates = 1;
inline int tagPBTemplates::stpbtemplates_size() const {
  return stpbtemplates_.size();
}
inline void tagPBTemplates::clear_stpbtemplates() {
  stpbtemplates_.Clear();
}
inline const ::tagPBTemplate& tagPBTemplates::stpbtemplates(int index) const {
  // @@protoc_insertion_point(field_get:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Get(index);
}
inline ::tagPBTemplate* tagPBTemplates::mutable_stpbtemplates(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Mutable(index);
}
inline ::tagPBTemplate* tagPBTemplates::add_stpbtemplates() {
  // @@protoc_insertion_point(field_add:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::tagPBTemplate >*
tagPBTemplates::mutable_stpbtemplates() {
  // @@protoc_insertion_point(field_mutable_list:tagPBTemplates.stPBTemplates)
  return &stpbtemplates_;
}
inline const ::google::protobuf::RepeatedPtrField< ::tagPBTemplate >&
tagPBTemplates::stpbtemplates() const {
  // @@protoc_insertion_point(field_list:tagPBTemplates.stPBTemplates)
  return stpbtemplates_;
}

// -------------------------------------------------------------------

// tagPBTemplate

// string strPath = 1;
inline void tagPBTemplate::clear_strpath() {
  strpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBTemplate::strpath() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.strPath)
  return strpath_.GetNoArena();
}
inline void tagPBTemplate::set_strpath(const ::std::string& value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBTemplate.strPath)
}
#if LANG_CXX11
inline void tagPBTemplate::set_strpath(::std::string&& value) {
  
  strpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBTemplate.strPath)
}
#endif
inline void tagPBTemplate::set_strpath(const char* value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBTemplate.strPath)
}
inline void tagPBTemplate::set_strpath(const char* value, size_t size) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBTemplate.strPath)
}
inline ::std::string* tagPBTemplate::mutable_strpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.strPath)
  return strpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBTemplate::release_strpath() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.strPath)
  
  return strpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBTemplate::set_allocated_strpath(::std::string* strpath) {
  if (strpath != NULL) {
    
  } else {
    
  }
  strpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.strPath)
}

// string strName = 2;
inline void tagPBTemplate::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& tagPBTemplate::strname() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.strName)
  return strname_.GetNoArena();
}
inline void tagPBTemplate::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBTemplate.strName)
}
#if LANG_CXX11
inline void tagPBTemplate::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBTemplate.strName)
}
#endif
inline void tagPBTemplate::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBTemplate.strName)
}
inline void tagPBTemplate::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBTemplate.strName)
}
inline ::std::string* tagPBTemplate::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* tagPBTemplate::release_strname() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void tagPBTemplate::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.strName)
}

// .tagPBRect stPBRect = 3;
inline bool tagPBTemplate::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
inline void tagPBTemplate::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
inline const ::tagPBRect& tagPBTemplate::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
inline ::tagPBRect* tagPBTemplate::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.stPBRect)
  return stpbrect_;
}
inline ::tagPBRect* tagPBTemplate::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
inline void tagPBTemplate::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.stPBRect)
}

// float fThreshold = 4;
inline void tagPBTemplate::clear_fthreshold() {
  fthreshold_ = 0;
}
inline float tagPBTemplate::fthreshold() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.fThreshold)
  return fthreshold_;
}
inline void tagPBTemplate::set_fthreshold(float value) {
  
  fthreshold_ = value;
  // @@protoc_insertion_point(field_set:tagPBTemplate.fThreshold)
}

// int32 nClassID = 5;
inline void tagPBTemplate::clear_nclassid() {
  nclassid_ = 0;
}
inline ::google::protobuf::int32 tagPBTemplate::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.nClassID)
  return nclassid_;
}
inline void tagPBTemplate::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBTemplate.nClassID)
}

// -------------------------------------------------------------------

// tagPBTaskFlagMap

// int32 nTaskID = 1;
inline void tagPBTaskFlagMap::clear_ntaskid() {
  ntaskid_ = 0;
}
inline ::google::protobuf::int32 tagPBTaskFlagMap::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBTaskFlagMap.nTaskID)
  return ntaskid_;
}
inline void tagPBTaskFlagMap::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBTaskFlagMap.nTaskID)
}

// bool bFlag = 2;
inline void tagPBTaskFlagMap::clear_bflag() {
  bflag_ = false;
}
inline bool tagPBTaskFlagMap::bflag() const {
  // @@protoc_insertion_point(field_get:tagPBTaskFlagMap.bFlag)
  return bflag_;
}
inline void tagPBTaskFlagMap::set_bflag(bool value) {
  
  bflag_ = value;
  // @@protoc_insertion_point(field_set:tagPBTaskFlagMap.bFlag)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::EREGTYPE> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EREGTYPE>() {
  return ::EREGTYPE_descriptor();
}
template <> struct is_proto_enum< ::EAgentMsgID> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EAgentMsgID>() {
  return ::EAgentMsgID_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_gameregProtoc_2eproto__INCLUDED
