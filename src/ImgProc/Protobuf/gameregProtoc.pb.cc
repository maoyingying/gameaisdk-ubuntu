// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameregProtoc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameregProtoc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class tagPBAgentMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBAgentMsg> {
} _tagPBAgentMsg_default_instance_;
class tagPBResultValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBResultValue> {
} _tagPBResultValue_default_instance_;
class tagPBResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBResult> {
} _tagPBResult_default_instance_;
class tagPBResultResDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBResultRes> {
} _tagPBResultRes_default_instance_;
class tagPBPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBPoint> {
} _tagPBPoint_default_instance_;
class tagPBBloodDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBBlood> {
} _tagPBBlood_default_instance_;
class tagPBBoxDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBBox> {
} _tagPBBox_default_instance_;
class tagPBAgentTaskValueDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBAgentTaskValue> {
} _tagPBAgentTaskValue_default_instance_;
class tagPBAgentTaskTskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBAgentTaskTsk> {
} _tagPBAgentTaskTsk_default_instance_;
class tagPBAgentTaskElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBAgentTaskElement> {
} _tagPBAgentTaskElement_default_instance_;
class tagPBRectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBRect> {
} _tagPBRect_default_instance_;
class tagPBTemplatesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBTemplates> {
} _tagPBTemplates_default_instance_;
class tagPBTemplateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBTemplate> {
} _tagPBTemplate_default_instance_;
class tagPBTaskFlagMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<tagPBTaskFlagMap> {
} _tagPBTaskFlagMap_default_instance_;

namespace protobuf_gameregProtoc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, eagentmsgid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, stpbresultvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, stpbagenttaskvalue_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, stpbtaskflagmaps_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, ndeltaskids_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentMsg, strconffilename_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, nframeseq_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, ndeviceindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, byimgdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, nwidth_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, nheight_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, strjsondata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultValue, stpbresult_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResult, ntaskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResult, eregtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResult, stpbresultres_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, nflag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbbox_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbboxs_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbpoints_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, fnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbroi_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbrect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbbloods_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbviewanglepoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, stpbmylocpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, fcolormeanvars_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBResultRes, byimage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBPoint, nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBPoint, ny_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, nlevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, fscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, fpercent_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, nclassid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, strname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBlood, stpbrect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, strtmplname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, nclassid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, fscore_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, fscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBBox, stpbrect_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskValue, ugroupid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskValue, stpbagenttasktsks_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskTsk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskTsk, ntaskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskTsk, etype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskTsk, nskipframe_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskTsk, stpbagenttaskelements_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, stpbrect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, stralgorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, fminscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, fmaxscale_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nscalelevel_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strcondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nfiltersize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, stpbtemplates_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, fintervaltime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, fthreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strcfgpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strweightpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strnamepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nbloodlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nmaxpointnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strmaskpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strmyloccondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strfriendscondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strviewloccondition_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strmappath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, strimgfilepath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nmaxbboxnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, ndilatesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nerodesize_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBAgentTaskElement, nregionsize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBRect, nx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBRect, ny_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBRect, nw_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBRect, nh_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplates, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplates, stpbtemplates_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, strpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, strname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, stpbrect_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, fthreshold_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTemplate, nclassid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTaskFlagMap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTaskFlagMap, ntaskid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(tagPBTaskFlagMap, bflag_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(tagPBAgentMsg)},
  { 10, -1, sizeof(tagPBResultValue)},
  { 21, -1, sizeof(tagPBResult)},
  { 28, -1, sizeof(tagPBResultRes)},
  { 44, -1, sizeof(tagPBPoint)},
  { 50, -1, sizeof(tagPBBlood)},
  { 60, -1, sizeof(tagPBBox)},
  { 69, -1, sizeof(tagPBAgentTaskValue)},
  { 75, -1, sizeof(tagPBAgentTaskTsk)},
  { 83, -1, sizeof(tagPBAgentTaskElement)},
  { 112, -1, sizeof(tagPBRect)},
  { 120, -1, sizeof(tagPBTemplates)},
  { 125, -1, sizeof(tagPBTemplate)},
  { 134, -1, sizeof(tagPBTaskFlagMap)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBAgentMsg_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBResultValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBResultRes_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBBlood_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBBox_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBAgentTaskValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBAgentTaskTsk_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBAgentTaskElement_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBRect_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBTemplates_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBTemplate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_tagPBTaskFlagMap_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gameregProtoc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _tagPBAgentMsg_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _tagPBResultValue_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _tagPBResult_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _tagPBResultRes_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _tagPBPoint_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _tagPBBlood_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _tagPBBox_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _tagPBAgentTaskValue_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _tagPBAgentTaskTsk_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _tagPBAgentTaskElement_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _tagPBRect_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _tagPBTemplates_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _tagPBTemplate_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _tagPBTaskFlagMap_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _tagPBAgentMsg_default_instance_.DefaultConstruct();
  _tagPBResultValue_default_instance_.DefaultConstruct();
  _tagPBResult_default_instance_.DefaultConstruct();
  _tagPBResultRes_default_instance_.DefaultConstruct();
  _tagPBPoint_default_instance_.DefaultConstruct();
  _tagPBBlood_default_instance_.DefaultConstruct();
  _tagPBBox_default_instance_.DefaultConstruct();
  _tagPBAgentTaskValue_default_instance_.DefaultConstruct();
  _tagPBAgentTaskTsk_default_instance_.DefaultConstruct();
  _tagPBAgentTaskElement_default_instance_.DefaultConstruct();
  _tagPBRect_default_instance_.DefaultConstruct();
  _tagPBTemplates_default_instance_.DefaultConstruct();
  _tagPBTemplate_default_instance_.DefaultConstruct();
  _tagPBTaskFlagMap_default_instance_.DefaultConstruct();
  _tagPBAgentMsg_default_instance_.get_mutable()->stpbresultvalue_ = const_cast< ::tagPBResultValue*>(
      ::tagPBResultValue::internal_default_instance());
  _tagPBAgentMsg_default_instance_.get_mutable()->stpbagenttaskvalue_ = const_cast< ::tagPBAgentTaskValue*>(
      ::tagPBAgentTaskValue::internal_default_instance());
  _tagPBResultRes_default_instance_.get_mutable()->stpbbox_ = const_cast< ::tagPBBox*>(
      ::tagPBBox::internal_default_instance());
  _tagPBResultRes_default_instance_.get_mutable()->stpbroi_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
  _tagPBResultRes_default_instance_.get_mutable()->stpbrect_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
  _tagPBResultRes_default_instance_.get_mutable()->stpbviewanglepoint_ = const_cast< ::tagPBPoint*>(
      ::tagPBPoint::internal_default_instance());
  _tagPBResultRes_default_instance_.get_mutable()->stpbmylocpoint_ = const_cast< ::tagPBPoint*>(
      ::tagPBPoint::internal_default_instance());
  _tagPBBlood_default_instance_.get_mutable()->stpbrect_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
  _tagPBBox_default_instance_.get_mutable()->stpbrect_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
  _tagPBAgentTaskElement_default_instance_.get_mutable()->stpbrect_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
  _tagPBAgentTaskElement_default_instance_.get_mutable()->stpbtemplates_ = const_cast< ::tagPBTemplates*>(
      ::tagPBTemplates::internal_default_instance());
  _tagPBTemplate_default_instance_.get_mutable()->stpbrect_ = const_cast< ::tagPBRect*>(
      ::tagPBRect::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\023gameregProtoc.proto\"\353\001\n\rtagPBAgentMsg\022"
      "!\n\013eAgentMsgID\030\001 \001(\0162\014.EAgentMsgID\022*\n\017st"
      "PBResultValue\030\002 \001(\0132\021.tagPBResultValue\0220"
      "\n\022stPBAgentTaskValue\030\003 \001(\0132\024.tagPBAgentT"
      "askValue\022+\n\020stPBTaskFlagMaps\030\004 \003(\0132\021.tag"
      "PBTaskFlagMap\022\023\n\013nDelTaskIDs\030\005 \003(\005\022\027\n\017st"
      "rConfFileName\030\006 \003(\t\"\246\001\n\020tagPBResultValue"
      "\022\021\n\tnFrameSeq\030\001 \001(\005\022\024\n\014nDeviceIndex\030\002 \001("
      "\005\022\021\n\tbyImgData\030\003 \001(\014\022\016\n\006nWidth\030\004 \001(\005\022\017\n\007"
      "nHeight\030\005 \001(\005\022\023\n\013strJsonData\030\006 \001(\t\022 \n\nst"
      "PBResult\030\007 \003(\0132\014.tagPBResult\"c\n\013tagPBRes"
      "ult\022\017\n\007nTaskID\030\001 \001(\005\022\033\n\010eRegType\030\002 \001(\0162\t"
      ".EREGTYPE\022&\n\rstPBResultRes\030\003 \003(\0132\017.tagPB"
      "ResultRes\"\332\002\n\016tagPBResultRes\022\r\n\005nFlag\030\001 "
      "\001(\005\022\032\n\007stPBBox\030\002 \001(\0132\t.tagPBBox\022\033\n\010stPBB"
      "oxs\030\003 \003(\0132\t.tagPBBox\022\037\n\nstPBPoints\030\004 \003(\013"
      "2\013.tagPBPoint\022\014\n\004fNum\030\005 \001(\002\022\033\n\007stPBROI\030\006"
      " \001(\0132\n.tagPBRect\022\034\n\010stPBRect\030\007 \001(\0132\n.tag"
      "PBRect\022\037\n\nstPBBloods\030\010 \003(\0132\013.tagPBBlood\022"
      "\'\n\022stPBViewAnglePoint\030\t \001(\0132\013.tagPBPoint"
      "\022#\n\016stPBMyLocPoint\030\n \001(\0132\013.tagPBPoint\022\026\n"
      "\016fColorMeanVars\030\013 \003(\002\022\017\n\007byImage\030\014 \001(\014\"$"
      "\n\ntagPBPoint\022\n\n\002nX\030\001 \001(\005\022\n\n\002nY\030\002 \001(\005\"\177\n\n"
      "tagPBBlood\022\016\n\006nLevel\030\001 \001(\005\022\016\n\006fScore\030\002 \001"
      "(\002\022\020\n\010fPercent\030\003 \001(\002\022\020\n\010nClassID\030\004 \001(\005\022\017"
      "\n\007strName\030\005 \001(\t\022\034\n\010stPBRect\030\006 \001(\0132\n.tagP"
      "BRect\"o\n\010tagPBBox\022\023\n\013strTmplName\030\001 \001(\t\022\020"
      "\n\010nClassID\030\002 \001(\005\022\016\n\006fScore\030\003 \001(\002\022\016\n\006fSca"
      "le\030\004 \001(\002\022\034\n\010stPBRect\030\005 \001(\0132\n.tagPBRect\"V"
      "\n\023tagPBAgentTaskValue\022\020\n\010uGroupID\030\001 \001(\r\022"
      "-\n\021stPBAgentTaskTsks\030\002 \003(\0132\022.tagPBAgentT"
      "askTsk\"\211\001\n\021tagPBAgentTaskTsk\022\017\n\007nTaskID\030"
      "\001 \001(\005\022\030\n\005eType\030\002 \001(\0162\t.EREGTYPE\022\022\n\nnSkip"
      "Frame\030\003 \001(\005\0225\n\025stPBAgentTaskElements\030\004 \003"
      "(\0132\026.tagPBAgentTaskElement\"\331\004\n\025tagPBAgen"
      "tTaskElement\022\034\n\010stPBRect\030\001 \001(\0132\n.tagPBRe"
      "ct\022\024\n\014strAlgorithm\030\002 \001(\t\022\021\n\tfMinScale\030\003 "
      "\001(\002\022\021\n\tfMaxScale\030\004 \001(\002\022\023\n\013nScaleLevel\030\005 "
      "\001(\005\022\024\n\014strCondition\030\006 \001(\t\022\023\n\013nFilterSize"
      "\030\007 \001(\005\022&\n\rstPBTemplates\030\010 \001(\0132\017.tagPBTem"
      "plates\022\025\n\rfIntervalTime\030\t \001(\002\022\022\n\nfThresh"
      "old\030\n \001(\002\022\022\n\nstrCfgPath\030\013 \001(\t\022\025\n\rstrWeig"
      "htPath\030\014 \001(\t\022\023\n\013strNamePath\030\r \001(\t\022\024\n\014nBl"
      "oodLength\030\016 \001(\005\022\024\n\014nMaxPointNum\030\017 \001(\005\022\023\n"
      "\013strMaskPath\030\020 \001(\t\022\031\n\021strMyLocCondition\030"
      "\021 \001(\t\022\033\n\023strFriendsCondition\030\022 \001(\t\022\033\n\023st"
      "rViewLocCondition\030\023 \001(\t\022\022\n\nstrMapPath\030\024 "
      "\001(\t\022\026\n\016strImgFilePath\030\025 \001(\t\022\023\n\013nMaxBBoxN"
      "um\030\026 \001(\005\022\023\n\013nDilateSize\030\027 \001(\005\022\022\n\nnErodeS"
      "ize\030\030 \001(\005\022\023\n\013nRegionSize\030\031 \001(\005\";\n\ttagPBR"
      "ect\022\n\n\002nX\030\001 \001(\005\022\n\n\002nY\030\002 \001(\005\022\n\n\002nW\030\003 \001(\005\022"
      "\n\n\002nH\030\004 \001(\005\"7\n\016tagPBTemplates\022%\n\rstPBTem"
      "plates\030\001 \003(\0132\016.tagPBTemplate\"u\n\rtagPBTem"
      "plate\022\017\n\007strPath\030\001 \001(\t\022\017\n\007strName\030\002 \001(\t\022"
      "\034\n\010stPBRect\030\003 \001(\0132\n.tagPBRect\022\022\n\nfThresh"
      "old\030\004 \001(\002\022\020\n\010nClassID\030\005 \001(\005\"2\n\020tagPBTask"
      "FlagMap\022\017\n\007nTaskID\030\001 \001(\005\022\r\n\005bFlag\030\002 \001(\010*"
      "\316\002\n\010EREGTYPE\022\016\n\nTYPE_BEGIN\020\000\022\021\n\rTYPE_STU"
      "CKREG\020\001\022\022\n\016TYPE_FIXOBJREG\020\002\022\017\n\013TYPE_PIXR"
      "EG\020\003\022\022\n\016TYPE_DEFORMOBJ\020\004\022\017\n\013TYPE_NUMBER\020"
      "\005\022\021\n\rTYPE_FIXBLOOD\020\006\022\027\n\023TYPE_KINGGLORYBL"
      "OOD\020\007\022\017\n\013TYPE_MAPREG\020\010\022\025\n\021TYPE_MULTCOLOR"
      "VAR\020\t\022\023\n\017TYPE_SHOOTBLOOD\020\n\022\022\n\016TYPE_SHOOT"
      "HURT\020\013\022\030\n\024TYPE_MAPDIRECTIONREG\020\014\022\027\n\023TYPE"
      "_REFER_LOCATION\0202\022\027\n\023TYPE_REFER_BLOODREG"
      "\0203\022\014\n\010TYPE_MAX\020d*\200\002\n\013EAgentMsgID\022\022\n\016MSG_"
      "RECV_BEGIN\020\000\022\027\n\021MSG_RECV_ID_START\020\300\270\002\022\027\n"
      "\021MSG_RECV_GROUP_ID\020\301\270\002\022\030\n\022MSG_RECV_TASK_"
      "FLAG\020\302\270\002\022\027\n\021MSG_RECV_ADD_TASK\020\303\270\002\022\027\n\021MSG"
      "_RECV_DEL_TASK\020\304\270\002\022\027\n\021MSG_RECV_CHG_TASK\020"
      "\305\270\002\022\030\n\022MSG_RECV_CONF_TASK\020\306\270\002\022\025\n\017MSG_REC"
      "V_ID_Max\020\307\270\002\022\025\n\017MSG_SEND_RESULT\020\310\337\002b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameregProtoc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gameregProtoc_2eproto

const ::google::protobuf::EnumDescriptor* EREGTYPE_descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_enum_descriptors[0];
}
bool EREGTYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 50:
    case 51:
    case 100:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EAgentMsgID_descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_enum_descriptors[1];
}
bool EAgentMsgID_IsValid(int value) {
  switch (value) {
    case 0:
    case 40000:
    case 40001:
    case 40002:
    case 40003:
    case 40004:
    case 40005:
    case 40006:
    case 40007:
    case 45000:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBAgentMsg::kEAgentMsgIDFieldNumber;
const int tagPBAgentMsg::kStPBResultValueFieldNumber;
const int tagPBAgentMsg::kStPBAgentTaskValueFieldNumber;
const int tagPBAgentMsg::kStPBTaskFlagMapsFieldNumber;
const int tagPBAgentMsg::kNDelTaskIDsFieldNumber;
const int tagPBAgentMsg::kStrConfFileNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBAgentMsg::tagPBAgentMsg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBAgentMsg)
}
tagPBAgentMsg::tagPBAgentMsg(const tagPBAgentMsg& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbtaskflagmaps_(from.stpbtaskflagmaps_),
      ndeltaskids_(from.ndeltaskids_),
      strconffilename_(from.strconffilename_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stpbresultvalue()) {
    stpbresultvalue_ = new ::tagPBResultValue(*from.stpbresultvalue_);
  } else {
    stpbresultvalue_ = NULL;
  }
  if (from.has_stpbagenttaskvalue()) {
    stpbagenttaskvalue_ = new ::tagPBAgentTaskValue(*from.stpbagenttaskvalue_);
  } else {
    stpbagenttaskvalue_ = NULL;
  }
  eagentmsgid_ = from.eagentmsgid_;
  // @@protoc_insertion_point(copy_constructor:tagPBAgentMsg)
}

void tagPBAgentMsg::SharedCtor() {
  ::memset(&stpbresultvalue_, 0, reinterpret_cast<char*>(&eagentmsgid_) -
    reinterpret_cast<char*>(&stpbresultvalue_) + sizeof(eagentmsgid_));
  _cached_size_ = 0;
}

tagPBAgentMsg::~tagPBAgentMsg() {
  // @@protoc_insertion_point(destructor:tagPBAgentMsg)
  SharedDtor();
}

void tagPBAgentMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stpbresultvalue_;
  }
  if (this != internal_default_instance()) {
    delete stpbagenttaskvalue_;
  }
}

void tagPBAgentMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBAgentMsg::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[0].descriptor;
}

const tagPBAgentMsg& tagPBAgentMsg::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBAgentMsg* tagPBAgentMsg::New(::google::protobuf::Arena* arena) const {
  tagPBAgentMsg* n = new tagPBAgentMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBAgentMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBAgentMsg)
  stpbtaskflagmaps_.Clear();
  ndeltaskids_.Clear();
  strconffilename_.Clear();
  if (GetArenaNoVirtual() == NULL && stpbresultvalue_ != NULL) {
    delete stpbresultvalue_;
  }
  stpbresultvalue_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbagenttaskvalue_ != NULL) {
    delete stpbagenttaskvalue_;
  }
  stpbagenttaskvalue_ = NULL;
  eagentmsgid_ = 0;
}

bool tagPBAgentMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBAgentMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .EAgentMsgID eAgentMsgID = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eagentmsgid(static_cast< ::EAgentMsgID >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBResultValue stPBResultValue = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbresultvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBAgentTaskValue stPBAgentTaskValue = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbagenttaskvalue()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbtaskflagmaps()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated int32 nDelTaskIDs = 5;
      case 5: {
        if (tag == 42u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ndeltaskids())));
        } else if (tag == 40u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 42u, input, this->mutable_ndeltaskids())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string strConfFileName = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_strconffilename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strconffilename(this->strconffilename_size() - 1).data(),
            this->strconffilename(this->strconffilename_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentMsg.strConfFileName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBAgentMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBAgentMsg)
  return false;
#undef DO_
}

void tagPBAgentMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBAgentMsg)
  // .EAgentMsgID eAgentMsgID = 1;
  if (this->eagentmsgid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eagentmsgid(), output);
  }

  // .tagPBResultValue stPBResultValue = 2;
  if (this->has_stpbresultvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stpbresultvalue_, output);
  }

  // .tagPBAgentTaskValue stPBAgentTaskValue = 3;
  if (this->has_stpbagenttaskvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stpbagenttaskvalue_, output);
  }

  // repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
  for (unsigned int i = 0, n = this->stpbtaskflagmaps_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpbtaskflagmaps(i), output);
  }

  // repeated int32 nDelTaskIDs = 5;
  if (this->ndeltaskids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_ndeltaskids_cached_byte_size_);
  }
  for (int i = 0; i < this->ndeltaskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->ndeltaskids(i), output);
  }

  // repeated string strConfFileName = 6;
  for (int i = 0; i < this->strconffilename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strconffilename(i).data(), this->strconffilename(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentMsg.strConfFileName");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->strconffilename(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBAgentMsg)
}

::google::protobuf::uint8* tagPBAgentMsg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBAgentMsg)
  // .EAgentMsgID eAgentMsgID = 1;
  if (this->eagentmsgid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eagentmsgid(), target);
  }

  // .tagPBResultValue stPBResultValue = 2;
  if (this->has_stpbresultvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stpbresultvalue_, false, target);
  }

  // .tagPBAgentTaskValue stPBAgentTaskValue = 3;
  if (this->has_stpbagenttaskvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stpbagenttaskvalue_, false, target);
  }

  // repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
  for (unsigned int i = 0, n = this->stpbtaskflagmaps_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stpbtaskflagmaps(i), false, target);
  }

  // repeated int32 nDelTaskIDs = 5;
  if (this->ndeltaskids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _ndeltaskids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->ndeltaskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->ndeltaskids(i), target);
  }

  // repeated string strConfFileName = 6;
  for (int i = 0; i < this->strconffilename_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strconffilename(i).data(), this->strconffilename(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentMsg.strConfFileName");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->strconffilename(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBAgentMsg)
  return target;
}

size_t tagPBAgentMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBAgentMsg)
  size_t total_size = 0;

  // repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
  {
    unsigned int count = this->stpbtaskflagmaps_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbtaskflagmaps(i));
    }
  }

  // repeated int32 nDelTaskIDs = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->ndeltaskids_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _ndeltaskids_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated string strConfFileName = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->strconffilename_size());
  for (int i = 0; i < this->strconffilename_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->strconffilename(i));
  }

  // .tagPBResultValue stPBResultValue = 2;
  if (this->has_stpbresultvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbresultvalue_);
  }

  // .tagPBAgentTaskValue stPBAgentTaskValue = 3;
  if (this->has_stpbagenttaskvalue()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbagenttaskvalue_);
  }

  // .EAgentMsgID eAgentMsgID = 1;
  if (this->eagentmsgid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eagentmsgid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBAgentMsg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBAgentMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBAgentMsg* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBAgentMsg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBAgentMsg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBAgentMsg)
    MergeFrom(*source);
  }
}

void tagPBAgentMsg::MergeFrom(const tagPBAgentMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBAgentMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbtaskflagmaps_.MergeFrom(from.stpbtaskflagmaps_);
  ndeltaskids_.MergeFrom(from.ndeltaskids_);
  strconffilename_.MergeFrom(from.strconffilename_);
  if (from.has_stpbresultvalue()) {
    mutable_stpbresultvalue()->::tagPBResultValue::MergeFrom(from.stpbresultvalue());
  }
  if (from.has_stpbagenttaskvalue()) {
    mutable_stpbagenttaskvalue()->::tagPBAgentTaskValue::MergeFrom(from.stpbagenttaskvalue());
  }
  if (from.eagentmsgid() != 0) {
    set_eagentmsgid(from.eagentmsgid());
  }
}

void tagPBAgentMsg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBAgentMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBAgentMsg::CopyFrom(const tagPBAgentMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBAgentMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBAgentMsg::IsInitialized() const {
  return true;
}

void tagPBAgentMsg::Swap(tagPBAgentMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBAgentMsg::InternalSwap(tagPBAgentMsg* other) {
  stpbtaskflagmaps_.UnsafeArenaSwap(&other->stpbtaskflagmaps_);
  ndeltaskids_.UnsafeArenaSwap(&other->ndeltaskids_);
  strconffilename_.UnsafeArenaSwap(&other->strconffilename_);
  std::swap(stpbresultvalue_, other->stpbresultvalue_);
  std::swap(stpbagenttaskvalue_, other->stpbagenttaskvalue_);
  std::swap(eagentmsgid_, other->eagentmsgid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBAgentMsg::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBAgentMsg

// .EAgentMsgID eAgentMsgID = 1;
void tagPBAgentMsg::clear_eagentmsgid() {
  eagentmsgid_ = 0;
}
::EAgentMsgID tagPBAgentMsg::eagentmsgid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.eAgentMsgID)
  return static_cast< ::EAgentMsgID >(eagentmsgid_);
}
void tagPBAgentMsg::set_eagentmsgid(::EAgentMsgID value) {
  
  eagentmsgid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.eAgentMsgID)
}

// .tagPBResultValue stPBResultValue = 2;
bool tagPBAgentMsg::has_stpbresultvalue() const {
  return this != internal_default_instance() && stpbresultvalue_ != NULL;
}
void tagPBAgentMsg::clear_stpbresultvalue() {
  if (GetArenaNoVirtual() == NULL && stpbresultvalue_ != NULL) delete stpbresultvalue_;
  stpbresultvalue_ = NULL;
}
const ::tagPBResultValue& tagPBAgentMsg::stpbresultvalue() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBResultValue)
  return stpbresultvalue_ != NULL ? *stpbresultvalue_
                         : *::tagPBResultValue::internal_default_instance();
}
::tagPBResultValue* tagPBAgentMsg::mutable_stpbresultvalue() {
  
  if (stpbresultvalue_ == NULL) {
    stpbresultvalue_ = new ::tagPBResultValue;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBResultValue)
  return stpbresultvalue_;
}
::tagPBResultValue* tagPBAgentMsg::release_stpbresultvalue() {
  // @@protoc_insertion_point(field_release:tagPBAgentMsg.stPBResultValue)
  
  ::tagPBResultValue* temp = stpbresultvalue_;
  stpbresultvalue_ = NULL;
  return temp;
}
void tagPBAgentMsg::set_allocated_stpbresultvalue(::tagPBResultValue* stpbresultvalue) {
  delete stpbresultvalue_;
  stpbresultvalue_ = stpbresultvalue;
  if (stpbresultvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentMsg.stPBResultValue)
}

// .tagPBAgentTaskValue stPBAgentTaskValue = 3;
bool tagPBAgentMsg::has_stpbagenttaskvalue() const {
  return this != internal_default_instance() && stpbagenttaskvalue_ != NULL;
}
void tagPBAgentMsg::clear_stpbagenttaskvalue() {
  if (GetArenaNoVirtual() == NULL && stpbagenttaskvalue_ != NULL) delete stpbagenttaskvalue_;
  stpbagenttaskvalue_ = NULL;
}
const ::tagPBAgentTaskValue& tagPBAgentMsg::stpbagenttaskvalue() const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBAgentTaskValue)
  return stpbagenttaskvalue_ != NULL ? *stpbagenttaskvalue_
                         : *::tagPBAgentTaskValue::internal_default_instance();
}
::tagPBAgentTaskValue* tagPBAgentMsg::mutable_stpbagenttaskvalue() {
  
  if (stpbagenttaskvalue_ == NULL) {
    stpbagenttaskvalue_ = new ::tagPBAgentTaskValue;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBAgentTaskValue)
  return stpbagenttaskvalue_;
}
::tagPBAgentTaskValue* tagPBAgentMsg::release_stpbagenttaskvalue() {
  // @@protoc_insertion_point(field_release:tagPBAgentMsg.stPBAgentTaskValue)
  
  ::tagPBAgentTaskValue* temp = stpbagenttaskvalue_;
  stpbagenttaskvalue_ = NULL;
  return temp;
}
void tagPBAgentMsg::set_allocated_stpbagenttaskvalue(::tagPBAgentTaskValue* stpbagenttaskvalue) {
  delete stpbagenttaskvalue_;
  stpbagenttaskvalue_ = stpbagenttaskvalue;
  if (stpbagenttaskvalue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentMsg.stPBAgentTaskValue)
}

// repeated .tagPBTaskFlagMap stPBTaskFlagMaps = 4;
int tagPBAgentMsg::stpbtaskflagmaps_size() const {
  return stpbtaskflagmaps_.size();
}
void tagPBAgentMsg::clear_stpbtaskflagmaps() {
  stpbtaskflagmaps_.Clear();
}
const ::tagPBTaskFlagMap& tagPBAgentMsg::stpbtaskflagmaps(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Get(index);
}
::tagPBTaskFlagMap* tagPBAgentMsg::mutable_stpbtaskflagmaps(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Mutable(index);
}
::tagPBTaskFlagMap* tagPBAgentMsg::add_stpbtaskflagmaps() {
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >*
tagPBAgentMsg::mutable_stpbtaskflagmaps() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.stPBTaskFlagMaps)
  return &stpbtaskflagmaps_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBTaskFlagMap >&
tagPBAgentMsg::stpbtaskflagmaps() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.stPBTaskFlagMaps)
  return stpbtaskflagmaps_;
}

// repeated int32 nDelTaskIDs = 5;
int tagPBAgentMsg::ndeltaskids_size() const {
  return ndeltaskids_.size();
}
void tagPBAgentMsg::clear_ndeltaskids() {
  ndeltaskids_.Clear();
}
::google::protobuf::int32 tagPBAgentMsg::ndeltaskids(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.nDelTaskIDs)
  return ndeltaskids_.Get(index);
}
void tagPBAgentMsg::set_ndeltaskids(int index, ::google::protobuf::int32 value) {
  ndeltaskids_.Set(index, value);
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.nDelTaskIDs)
}
void tagPBAgentMsg::add_ndeltaskids(::google::protobuf::int32 value) {
  ndeltaskids_.Add(value);
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.nDelTaskIDs)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
tagPBAgentMsg::ndeltaskids() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.nDelTaskIDs)
  return ndeltaskids_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
tagPBAgentMsg::mutable_ndeltaskids() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.nDelTaskIDs)
  return &ndeltaskids_;
}

// repeated string strConfFileName = 6;
int tagPBAgentMsg::strconffilename_size() const {
  return strconffilename_.size();
}
void tagPBAgentMsg::clear_strconffilename() {
  strconffilename_.Clear();
}
const ::std::string& tagPBAgentMsg::strconffilename(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Get(index);
}
::std::string* tagPBAgentMsg::mutable_strconffilename(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Mutable(index);
}
void tagPBAgentMsg::set_strconffilename(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:tagPBAgentMsg.strConfFileName)
  strconffilename_.Mutable(index)->assign(value);
}
void tagPBAgentMsg::set_strconffilename(int index, const char* value) {
  strconffilename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:tagPBAgentMsg.strConfFileName)
}
void tagPBAgentMsg::set_strconffilename(int index, const char* value, size_t size) {
  strconffilename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentMsg.strConfFileName)
}
::std::string* tagPBAgentMsg::add_strconffilename() {
  // @@protoc_insertion_point(field_add_mutable:tagPBAgentMsg.strConfFileName)
  return strconffilename_.Add();
}
void tagPBAgentMsg::add_strconffilename(const ::std::string& value) {
  strconffilename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:tagPBAgentMsg.strConfFileName)
}
void tagPBAgentMsg::add_strconffilename(const char* value) {
  strconffilename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:tagPBAgentMsg.strConfFileName)
}
void tagPBAgentMsg::add_strconffilename(const char* value, size_t size) {
  strconffilename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:tagPBAgentMsg.strConfFileName)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
tagPBAgentMsg::strconffilename() const {
  // @@protoc_insertion_point(field_list:tagPBAgentMsg.strConfFileName)
  return strconffilename_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
tagPBAgentMsg::mutable_strconffilename() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentMsg.strConfFileName)
  return &strconffilename_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBResultValue::kNFrameSeqFieldNumber;
const int tagPBResultValue::kNDeviceIndexFieldNumber;
const int tagPBResultValue::kByImgDataFieldNumber;
const int tagPBResultValue::kNWidthFieldNumber;
const int tagPBResultValue::kNHeightFieldNumber;
const int tagPBResultValue::kStrJsonDataFieldNumber;
const int tagPBResultValue::kStPBResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBResultValue::tagPBResultValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBResultValue)
}
tagPBResultValue::tagPBResultValue(const tagPBResultValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbresult_(from.stpbresult_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byimgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.byimgdata().size() > 0) {
    byimgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimgdata_);
  }
  strjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strjsondata().size() > 0) {
    strjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strjsondata_);
  }
  ::memcpy(&nframeseq_, &from.nframeseq_,
    reinterpret_cast<char*>(&nheight_) -
    reinterpret_cast<char*>(&nframeseq_) + sizeof(nheight_));
  // @@protoc_insertion_point(copy_constructor:tagPBResultValue)
}

void tagPBResultValue::SharedCtor() {
  byimgdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nframeseq_, 0, reinterpret_cast<char*>(&nheight_) -
    reinterpret_cast<char*>(&nframeseq_) + sizeof(nheight_));
  _cached_size_ = 0;
}

tagPBResultValue::~tagPBResultValue() {
  // @@protoc_insertion_point(destructor:tagPBResultValue)
  SharedDtor();
}

void tagPBResultValue::SharedDtor() {
  byimgdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void tagPBResultValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBResultValue::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[1].descriptor;
}

const tagPBResultValue& tagPBResultValue::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBResultValue* tagPBResultValue::New(::google::protobuf::Arena* arena) const {
  tagPBResultValue* n = new tagPBResultValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBResultValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBResultValue)
  stpbresult_.Clear();
  byimgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strjsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nframeseq_, 0, reinterpret_cast<char*>(&nheight_) -
    reinterpret_cast<char*>(&nframeseq_) + sizeof(nheight_));
}

bool tagPBResultValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBResultValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nFrameSeq = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nframeseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nDeviceIndex = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndeviceindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byImgData = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byimgdata()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nWidth = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nHeight = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nheight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strJsonData = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strjsondata()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strjsondata().data(), this->strjsondata().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBResultValue.strJsonData"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBResult stPBResult = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbresult()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBResultValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBResultValue)
  return false;
#undef DO_
}

void tagPBResultValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBResultValue)
  // int32 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nframeseq(), output);
  }

  // int32 nDeviceIndex = 2;
  if (this->ndeviceindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ndeviceindex(), output);
  }

  // bytes byImgData = 3;
  if (this->byimgdata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->byimgdata(), output);
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nwidth(), output);
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nheight(), output);
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strjsondata().data(), this->strjsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBResultValue.strJsonData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strjsondata(), output);
  }

  // repeated .tagPBResult stPBResult = 7;
  for (unsigned int i = 0, n = this->stpbresult_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stpbresult(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBResultValue)
}

::google::protobuf::uint8* tagPBResultValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBResultValue)
  // int32 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nframeseq(), target);
  }

  // int32 nDeviceIndex = 2;
  if (this->ndeviceindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ndeviceindex(), target);
  }

  // bytes byImgData = 3;
  if (this->byimgdata().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->byimgdata(), target);
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nwidth(), target);
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nheight(), target);
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strjsondata().data(), this->strjsondata().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBResultValue.strJsonData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strjsondata(), target);
  }

  // repeated .tagPBResult stPBResult = 7;
  for (unsigned int i = 0, n = this->stpbresult_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, this->stpbresult(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBResultValue)
  return target;
}

size_t tagPBResultValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBResultValue)
  size_t total_size = 0;

  // repeated .tagPBResult stPBResult = 7;
  {
    unsigned int count = this->stpbresult_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbresult(i));
    }
  }

  // bytes byImgData = 3;
  if (this->byimgdata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byimgdata());
  }

  // string strJsonData = 6;
  if (this->strjsondata().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strjsondata());
  }

  // int32 nFrameSeq = 1;
  if (this->nframeseq() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nframeseq());
  }

  // int32 nDeviceIndex = 2;
  if (this->ndeviceindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ndeviceindex());
  }

  // int32 nWidth = 4;
  if (this->nwidth() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nwidth());
  }

  // int32 nHeight = 5;
  if (this->nheight() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nheight());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBResultValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBResultValue)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBResultValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBResultValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBResultValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBResultValue)
    MergeFrom(*source);
  }
}

void tagPBResultValue::MergeFrom(const tagPBResultValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBResultValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbresult_.MergeFrom(from.stpbresult_);
  if (from.byimgdata().size() > 0) {

    byimgdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimgdata_);
  }
  if (from.strjsondata().size() > 0) {

    strjsondata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strjsondata_);
  }
  if (from.nframeseq() != 0) {
    set_nframeseq(from.nframeseq());
  }
  if (from.ndeviceindex() != 0) {
    set_ndeviceindex(from.ndeviceindex());
  }
  if (from.nwidth() != 0) {
    set_nwidth(from.nwidth());
  }
  if (from.nheight() != 0) {
    set_nheight(from.nheight());
  }
}

void tagPBResultValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBResultValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBResultValue::CopyFrom(const tagPBResultValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBResultValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBResultValue::IsInitialized() const {
  return true;
}

void tagPBResultValue::Swap(tagPBResultValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBResultValue::InternalSwap(tagPBResultValue* other) {
  stpbresult_.UnsafeArenaSwap(&other->stpbresult_);
  byimgdata_.Swap(&other->byimgdata_);
  strjsondata_.Swap(&other->strjsondata_);
  std::swap(nframeseq_, other->nframeseq_);
  std::swap(ndeviceindex_, other->ndeviceindex_);
  std::swap(nwidth_, other->nwidth_);
  std::swap(nheight_, other->nheight_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBResultValue::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBResultValue

// int32 nFrameSeq = 1;
void tagPBResultValue::clear_nframeseq() {
  nframeseq_ = 0;
}
::google::protobuf::int32 tagPBResultValue::nframeseq() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nFrameSeq)
  return nframeseq_;
}
void tagPBResultValue::set_nframeseq(::google::protobuf::int32 value) {
  
  nframeseq_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nFrameSeq)
}

// int32 nDeviceIndex = 2;
void tagPBResultValue::clear_ndeviceindex() {
  ndeviceindex_ = 0;
}
::google::protobuf::int32 tagPBResultValue::ndeviceindex() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nDeviceIndex)
  return ndeviceindex_;
}
void tagPBResultValue::set_ndeviceindex(::google::protobuf::int32 value) {
  
  ndeviceindex_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nDeviceIndex)
}

// bytes byImgData = 3;
void tagPBResultValue::clear_byimgdata() {
  byimgdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBResultValue::byimgdata() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.byImgData)
  return byimgdata_.GetNoArena();
}
void tagPBResultValue::set_byimgdata(const ::std::string& value) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultValue.byImgData)
}
#if LANG_CXX11
void tagPBResultValue::set_byimgdata(::std::string&& value) {
  
  byimgdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultValue.byImgData)
}
#endif
void tagPBResultValue::set_byimgdata(const char* value) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultValue.byImgData)
}
void tagPBResultValue::set_byimgdata(const void* value, size_t size) {
  
  byimgdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultValue.byImgData)
}
::std::string* tagPBResultValue::mutable_byimgdata() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.byImgData)
  return byimgdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBResultValue::release_byimgdata() {
  // @@protoc_insertion_point(field_release:tagPBResultValue.byImgData)
  
  return byimgdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBResultValue::set_allocated_byimgdata(::std::string* byimgdata) {
  if (byimgdata != NULL) {
    
  } else {
    
  }
  byimgdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byimgdata);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultValue.byImgData)
}

// int32 nWidth = 4;
void tagPBResultValue::clear_nwidth() {
  nwidth_ = 0;
}
::google::protobuf::int32 tagPBResultValue::nwidth() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nWidth)
  return nwidth_;
}
void tagPBResultValue::set_nwidth(::google::protobuf::int32 value) {
  
  nwidth_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nWidth)
}

// int32 nHeight = 5;
void tagPBResultValue::clear_nheight() {
  nheight_ = 0;
}
::google::protobuf::int32 tagPBResultValue::nheight() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.nHeight)
  return nheight_;
}
void tagPBResultValue::set_nheight(::google::protobuf::int32 value) {
  
  nheight_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultValue.nHeight)
}

// string strJsonData = 6;
void tagPBResultValue::clear_strjsondata() {
  strjsondata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBResultValue::strjsondata() const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.strJsonData)
  return strjsondata_.GetNoArena();
}
void tagPBResultValue::set_strjsondata(const ::std::string& value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultValue.strJsonData)
}
#if LANG_CXX11
void tagPBResultValue::set_strjsondata(::std::string&& value) {
  
  strjsondata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultValue.strJsonData)
}
#endif
void tagPBResultValue::set_strjsondata(const char* value) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultValue.strJsonData)
}
void tagPBResultValue::set_strjsondata(const char* value, size_t size) {
  
  strjsondata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultValue.strJsonData)
}
::std::string* tagPBResultValue::mutable_strjsondata() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.strJsonData)
  return strjsondata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBResultValue::release_strjsondata() {
  // @@protoc_insertion_point(field_release:tagPBResultValue.strJsonData)
  
  return strjsondata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBResultValue::set_allocated_strjsondata(::std::string* strjsondata) {
  if (strjsondata != NULL) {
    
  } else {
    
  }
  strjsondata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strjsondata);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultValue.strJsonData)
}

// repeated .tagPBResult stPBResult = 7;
int tagPBResultValue::stpbresult_size() const {
  return stpbresult_.size();
}
void tagPBResultValue::clear_stpbresult() {
  stpbresult_.Clear();
}
const ::tagPBResult& tagPBResultValue::stpbresult(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultValue.stPBResult)
  return stpbresult_.Get(index);
}
::tagPBResult* tagPBResultValue::mutable_stpbresult(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultValue.stPBResult)
  return stpbresult_.Mutable(index);
}
::tagPBResult* tagPBResultValue::add_stpbresult() {
  // @@protoc_insertion_point(field_add:tagPBResultValue.stPBResult)
  return stpbresult_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBResult >*
tagPBResultValue::mutable_stpbresult() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultValue.stPBResult)
  return &stpbresult_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBResult >&
tagPBResultValue::stpbresult() const {
  // @@protoc_insertion_point(field_list:tagPBResultValue.stPBResult)
  return stpbresult_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBResult::kNTaskIDFieldNumber;
const int tagPBResult::kERegTypeFieldNumber;
const int tagPBResult::kStPBResultResFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBResult::tagPBResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBResult)
}
tagPBResult::tagPBResult(const tagPBResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbresultres_(from.stpbresultres_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ntaskid_, &from.ntaskid_,
    reinterpret_cast<char*>(&eregtype_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(eregtype_));
  // @@protoc_insertion_point(copy_constructor:tagPBResult)
}

void tagPBResult::SharedCtor() {
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&eregtype_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(eregtype_));
  _cached_size_ = 0;
}

tagPBResult::~tagPBResult() {
  // @@protoc_insertion_point(destructor:tagPBResult)
  SharedDtor();
}

void tagPBResult::SharedDtor() {
}

void tagPBResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBResult::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[2].descriptor;
}

const tagPBResult& tagPBResult::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBResult* tagPBResult::New(::google::protobuf::Arena* arena) const {
  tagPBResult* n = new tagPBResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBResult::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBResult)
  stpbresultres_.Clear();
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&eregtype_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(eregtype_));
}

bool tagPBResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nTaskID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EREGTYPE eRegType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_eregtype(static_cast< ::EREGTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBResultRes stPBResultRes = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbresultres()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBResult)
  return false;
#undef DO_
}

void tagPBResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBResult)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntaskid(), output);
  }

  // .EREGTYPE eRegType = 2;
  if (this->eregtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->eregtype(), output);
  }

  // repeated .tagPBResultRes stPBResultRes = 3;
  for (unsigned int i = 0, n = this->stpbresultres_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stpbresultres(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBResult)
}

::google::protobuf::uint8* tagPBResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBResult)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntaskid(), target);
  }

  // .EREGTYPE eRegType = 2;
  if (this->eregtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->eregtype(), target);
  }

  // repeated .tagPBResultRes stPBResultRes = 3;
  for (unsigned int i = 0, n = this->stpbresultres_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stpbresultres(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBResult)
  return target;
}

size_t tagPBResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBResult)
  size_t total_size = 0;

  // repeated .tagPBResultRes stPBResultRes = 3;
  {
    unsigned int count = this->stpbresultres_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbresultres(i));
    }
  }

  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntaskid());
  }

  // .EREGTYPE eRegType = 2;
  if (this->eregtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->eregtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBResult)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBResult)
    MergeFrom(*source);
  }
}

void tagPBResult::MergeFrom(const tagPBResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbresultres_.MergeFrom(from.stpbresultres_);
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.eregtype() != 0) {
    set_eregtype(from.eregtype());
  }
}

void tagPBResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBResult::CopyFrom(const tagPBResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBResult::IsInitialized() const {
  return true;
}

void tagPBResult::Swap(tagPBResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBResult::InternalSwap(tagPBResult* other) {
  stpbresultres_.UnsafeArenaSwap(&other->stpbresultres_);
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(eregtype_, other->eregtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBResult::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBResult

// int32 nTaskID = 1;
void tagPBResult::clear_ntaskid() {
  ntaskid_ = 0;
}
::google::protobuf::int32 tagPBResult::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBResult.nTaskID)
  return ntaskid_;
}
void tagPBResult::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBResult.nTaskID)
}

// .EREGTYPE eRegType = 2;
void tagPBResult::clear_eregtype() {
  eregtype_ = 0;
}
::EREGTYPE tagPBResult::eregtype() const {
  // @@protoc_insertion_point(field_get:tagPBResult.eRegType)
  return static_cast< ::EREGTYPE >(eregtype_);
}
void tagPBResult::set_eregtype(::EREGTYPE value) {
  
  eregtype_ = value;
  // @@protoc_insertion_point(field_set:tagPBResult.eRegType)
}

// repeated .tagPBResultRes stPBResultRes = 3;
int tagPBResult::stpbresultres_size() const {
  return stpbresultres_.size();
}
void tagPBResult::clear_stpbresultres() {
  stpbresultres_.Clear();
}
const ::tagPBResultRes& tagPBResult::stpbresultres(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResult.stPBResultRes)
  return stpbresultres_.Get(index);
}
::tagPBResultRes* tagPBResult::mutable_stpbresultres(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResult.stPBResultRes)
  return stpbresultres_.Mutable(index);
}
::tagPBResultRes* tagPBResult::add_stpbresultres() {
  // @@protoc_insertion_point(field_add:tagPBResult.stPBResultRes)
  return stpbresultres_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBResultRes >*
tagPBResult::mutable_stpbresultres() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResult.stPBResultRes)
  return &stpbresultres_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBResultRes >&
tagPBResult::stpbresultres() const {
  // @@protoc_insertion_point(field_list:tagPBResult.stPBResultRes)
  return stpbresultres_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBResultRes::kNFlagFieldNumber;
const int tagPBResultRes::kStPBBoxFieldNumber;
const int tagPBResultRes::kStPBBoxsFieldNumber;
const int tagPBResultRes::kStPBPointsFieldNumber;
const int tagPBResultRes::kFNumFieldNumber;
const int tagPBResultRes::kStPBROIFieldNumber;
const int tagPBResultRes::kStPBRectFieldNumber;
const int tagPBResultRes::kStPBBloodsFieldNumber;
const int tagPBResultRes::kStPBViewAnglePointFieldNumber;
const int tagPBResultRes::kStPBMyLocPointFieldNumber;
const int tagPBResultRes::kFColorMeanVarsFieldNumber;
const int tagPBResultRes::kByImageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBResultRes::tagPBResultRes()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBResultRes)
}
tagPBResultRes::tagPBResultRes(const tagPBResultRes& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbboxs_(from.stpbboxs_),
      stpbpoints_(from.stpbpoints_),
      stpbbloods_(from.stpbbloods_),
      fcolormeanvars_(from.fcolormeanvars_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  byimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.byimage().size() > 0) {
    byimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimage_);
  }
  if (from.has_stpbbox()) {
    stpbbox_ = new ::tagPBBox(*from.stpbbox_);
  } else {
    stpbbox_ = NULL;
  }
  if (from.has_stpbroi()) {
    stpbroi_ = new ::tagPBRect(*from.stpbroi_);
  } else {
    stpbroi_ = NULL;
  }
  if (from.has_stpbrect()) {
    stpbrect_ = new ::tagPBRect(*from.stpbrect_);
  } else {
    stpbrect_ = NULL;
  }
  if (from.has_stpbviewanglepoint()) {
    stpbviewanglepoint_ = new ::tagPBPoint(*from.stpbviewanglepoint_);
  } else {
    stpbviewanglepoint_ = NULL;
  }
  if (from.has_stpbmylocpoint()) {
    stpbmylocpoint_ = new ::tagPBPoint(*from.stpbmylocpoint_);
  } else {
    stpbmylocpoint_ = NULL;
  }
  ::memcpy(&nflag_, &from.nflag_,
    reinterpret_cast<char*>(&fnum_) -
    reinterpret_cast<char*>(&nflag_) + sizeof(fnum_));
  // @@protoc_insertion_point(copy_constructor:tagPBResultRes)
}

void tagPBResultRes::SharedCtor() {
  byimage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stpbbox_, 0, reinterpret_cast<char*>(&fnum_) -
    reinterpret_cast<char*>(&stpbbox_) + sizeof(fnum_));
  _cached_size_ = 0;
}

tagPBResultRes::~tagPBResultRes() {
  // @@protoc_insertion_point(destructor:tagPBResultRes)
  SharedDtor();
}

void tagPBResultRes::SharedDtor() {
  byimage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stpbbox_;
  }
  if (this != internal_default_instance()) {
    delete stpbroi_;
  }
  if (this != internal_default_instance()) {
    delete stpbrect_;
  }
  if (this != internal_default_instance()) {
    delete stpbviewanglepoint_;
  }
  if (this != internal_default_instance()) {
    delete stpbmylocpoint_;
  }
}

void tagPBResultRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBResultRes::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[3].descriptor;
}

const tagPBResultRes& tagPBResultRes::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBResultRes* tagPBResultRes::New(::google::protobuf::Arena* arena) const {
  tagPBResultRes* n = new tagPBResultRes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBResultRes::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBResultRes)
  stpbboxs_.Clear();
  stpbpoints_.Clear();
  stpbbloods_.Clear();
  fcolormeanvars_.Clear();
  byimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stpbbox_ != NULL) {
    delete stpbbox_;
  }
  stpbbox_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbroi_ != NULL) {
    delete stpbroi_;
  }
  stpbroi_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) {
    delete stpbrect_;
  }
  stpbrect_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbviewanglepoint_ != NULL) {
    delete stpbviewanglepoint_;
  }
  stpbviewanglepoint_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbmylocpoint_ != NULL) {
    delete stpbmylocpoint_;
  }
  stpbmylocpoint_ = NULL;
  ::memset(&nflag_, 0, reinterpret_cast<char*>(&fnum_) -
    reinterpret_cast<char*>(&nflag_) + sizeof(fnum_));
}

bool tagPBResultRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBResultRes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nFlag = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBBox stPBBox = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbbox()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBBox stPBBoxs = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbboxs()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .tagPBPoint stPBPoints = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbpoints()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // float fNum = 5;
      case 5: {
        if (tag == 45u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBRect stPBROI = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbroi()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBRect stPBRect = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbrect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBBlood stPBBloods = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbbloods()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // .tagPBPoint stPBViewAnglePoint = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbviewanglepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBPoint stPBMyLocPoint = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbmylocpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated float fColorMeanVars = 11;
      case 11: {
        if (tag == 90u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_fcolormeanvars())));
        } else if (tag == 93u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 90u, input, this->mutable_fcolormeanvars())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes byImage = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byimage()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBResultRes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBResultRes)
  return false;
#undef DO_
}

void tagPBResultRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBResultRes)
  // int32 nFlag = 1;
  if (this->nflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nflag(), output);
  }

  // .tagPBBox stPBBox = 2;
  if (this->has_stpbbox()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->stpbbox_, output);
  }

  // repeated .tagPBBox stPBBoxs = 3;
  for (unsigned int i = 0, n = this->stpbboxs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->stpbboxs(i), output);
  }

  // repeated .tagPBPoint stPBPoints = 4;
  for (unsigned int i = 0, n = this->stpbpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpbpoints(i), output);
  }

  // float fNum = 5;
  if (this->fnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fnum(), output);
  }

  // .tagPBRect stPBROI = 6;
  if (this->has_stpbroi()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stpbroi_, output);
  }

  // .tagPBRect stPBRect = 7;
  if (this->has_stpbrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->stpbrect_, output);
  }

  // repeated .tagPBBlood stPBBloods = 8;
  for (unsigned int i = 0, n = this->stpbbloods_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stpbbloods(i), output);
  }

  // .tagPBPoint stPBViewAnglePoint = 9;
  if (this->has_stpbviewanglepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->stpbviewanglepoint_, output);
  }

  // .tagPBPoint stPBMyLocPoint = 10;
  if (this->has_stpbmylocpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->stpbmylocpoint_, output);
  }

  // repeated float fColorMeanVars = 11;
  if (this->fcolormeanvars_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(11, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_fcolormeanvars_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFloatArray(
      this->fcolormeanvars().data(), this->fcolormeanvars_size(), output);
  }

  // bytes byImage = 12;
  if (this->byimage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      12, this->byimage(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBResultRes)
}

::google::protobuf::uint8* tagPBResultRes::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBResultRes)
  // int32 nFlag = 1;
  if (this->nflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nflag(), target);
  }

  // .tagPBBox stPBBox = 2;
  if (this->has_stpbbox()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->stpbbox_, false, target);
  }

  // repeated .tagPBBox stPBBoxs = 3;
  for (unsigned int i = 0, n = this->stpbboxs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, this->stpbboxs(i), false, target);
  }

  // repeated .tagPBPoint stPBPoints = 4;
  for (unsigned int i = 0, n = this->stpbpoints_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stpbpoints(i), false, target);
  }

  // float fNum = 5;
  if (this->fnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->fnum(), target);
  }

  // .tagPBRect stPBROI = 6;
  if (this->has_stpbroi()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stpbroi_, false, target);
  }

  // .tagPBRect stPBRect = 7;
  if (this->has_stpbrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->stpbrect_, false, target);
  }

  // repeated .tagPBBlood stPBBloods = 8;
  for (unsigned int i = 0, n = this->stpbbloods_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, this->stpbbloods(i), false, target);
  }

  // .tagPBPoint stPBViewAnglePoint = 9;
  if (this->has_stpbviewanglepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->stpbviewanglepoint_, false, target);
  }

  // .tagPBPoint stPBMyLocPoint = 10;
  if (this->has_stpbmylocpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->stpbmylocpoint_, false, target);
  }

  // repeated float fColorMeanVars = 11;
  if (this->fcolormeanvars_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      11,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _fcolormeanvars_cached_byte_size_, target);
  }
  for (int i = 0; i < this->fcolormeanvars_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->fcolormeanvars(i), target);
  }

  // bytes byImage = 12;
  if (this->byimage().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        12, this->byimage(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBResultRes)
  return target;
}

size_t tagPBResultRes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBResultRes)
  size_t total_size = 0;

  // repeated .tagPBBox stPBBoxs = 3;
  {
    unsigned int count = this->stpbboxs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbboxs(i));
    }
  }

  // repeated .tagPBPoint stPBPoints = 4;
  {
    unsigned int count = this->stpbpoints_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbpoints(i));
    }
  }

  // repeated .tagPBBlood stPBBloods = 8;
  {
    unsigned int count = this->stpbbloods_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbbloods(i));
    }
  }

  // repeated float fColorMeanVars = 11;
  {
    unsigned int count = this->fcolormeanvars_size();
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _fcolormeanvars_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // bytes byImage = 12;
  if (this->byimage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->byimage());
  }

  // .tagPBBox stPBBox = 2;
  if (this->has_stpbbox()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbbox_);
  }

  // .tagPBRect stPBROI = 6;
  if (this->has_stpbroi()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbroi_);
  }

  // .tagPBRect stPBRect = 7;
  if (this->has_stpbrect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbrect_);
  }

  // .tagPBPoint stPBViewAnglePoint = 9;
  if (this->has_stpbviewanglepoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbviewanglepoint_);
  }

  // .tagPBPoint stPBMyLocPoint = 10;
  if (this->has_stpbmylocpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbmylocpoint_);
  }

  // int32 nFlag = 1;
  if (this->nflag() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nflag());
  }

  // float fNum = 5;
  if (this->fnum() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBResultRes::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBResultRes)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBResultRes* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBResultRes>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBResultRes)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBResultRes)
    MergeFrom(*source);
  }
}

void tagPBResultRes::MergeFrom(const tagPBResultRes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBResultRes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbboxs_.MergeFrom(from.stpbboxs_);
  stpbpoints_.MergeFrom(from.stpbpoints_);
  stpbbloods_.MergeFrom(from.stpbbloods_);
  fcolormeanvars_.MergeFrom(from.fcolormeanvars_);
  if (from.byimage().size() > 0) {

    byimage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.byimage_);
  }
  if (from.has_stpbbox()) {
    mutable_stpbbox()->::tagPBBox::MergeFrom(from.stpbbox());
  }
  if (from.has_stpbroi()) {
    mutable_stpbroi()->::tagPBRect::MergeFrom(from.stpbroi());
  }
  if (from.has_stpbrect()) {
    mutable_stpbrect()->::tagPBRect::MergeFrom(from.stpbrect());
  }
  if (from.has_stpbviewanglepoint()) {
    mutable_stpbviewanglepoint()->::tagPBPoint::MergeFrom(from.stpbviewanglepoint());
  }
  if (from.has_stpbmylocpoint()) {
    mutable_stpbmylocpoint()->::tagPBPoint::MergeFrom(from.stpbmylocpoint());
  }
  if (from.nflag() != 0) {
    set_nflag(from.nflag());
  }
  if (from.fnum() != 0) {
    set_fnum(from.fnum());
  }
}

void tagPBResultRes::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBResultRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBResultRes::CopyFrom(const tagPBResultRes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBResultRes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBResultRes::IsInitialized() const {
  return true;
}

void tagPBResultRes::Swap(tagPBResultRes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBResultRes::InternalSwap(tagPBResultRes* other) {
  stpbboxs_.UnsafeArenaSwap(&other->stpbboxs_);
  stpbpoints_.UnsafeArenaSwap(&other->stpbpoints_);
  stpbbloods_.UnsafeArenaSwap(&other->stpbbloods_);
  fcolormeanvars_.UnsafeArenaSwap(&other->fcolormeanvars_);
  byimage_.Swap(&other->byimage_);
  std::swap(stpbbox_, other->stpbbox_);
  std::swap(stpbroi_, other->stpbroi_);
  std::swap(stpbrect_, other->stpbrect_);
  std::swap(stpbviewanglepoint_, other->stpbviewanglepoint_);
  std::swap(stpbmylocpoint_, other->stpbmylocpoint_);
  std::swap(nflag_, other->nflag_);
  std::swap(fnum_, other->fnum_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBResultRes::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBResultRes

// int32 nFlag = 1;
void tagPBResultRes::clear_nflag() {
  nflag_ = 0;
}
::google::protobuf::int32 tagPBResultRes::nflag() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.nFlag)
  return nflag_;
}
void tagPBResultRes::set_nflag(::google::protobuf::int32 value) {
  
  nflag_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultRes.nFlag)
}

// .tagPBBox stPBBox = 2;
bool tagPBResultRes::has_stpbbox() const {
  return this != internal_default_instance() && stpbbox_ != NULL;
}
void tagPBResultRes::clear_stpbbox() {
  if (GetArenaNoVirtual() == NULL && stpbbox_ != NULL) delete stpbbox_;
  stpbbox_ = NULL;
}
const ::tagPBBox& tagPBResultRes::stpbbox() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBox)
  return stpbbox_ != NULL ? *stpbbox_
                         : *::tagPBBox::internal_default_instance();
}
::tagPBBox* tagPBResultRes::mutable_stpbbox() {
  
  if (stpbbox_ == NULL) {
    stpbbox_ = new ::tagPBBox;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBox)
  return stpbbox_;
}
::tagPBBox* tagPBResultRes::release_stpbbox() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBBox)
  
  ::tagPBBox* temp = stpbbox_;
  stpbbox_ = NULL;
  return temp;
}
void tagPBResultRes::set_allocated_stpbbox(::tagPBBox* stpbbox) {
  delete stpbbox_;
  stpbbox_ = stpbbox;
  if (stpbbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBBox)
}

// repeated .tagPBBox stPBBoxs = 3;
int tagPBResultRes::stpbboxs_size() const {
  return stpbboxs_.size();
}
void tagPBResultRes::clear_stpbboxs() {
  stpbboxs_.Clear();
}
const ::tagPBBox& tagPBResultRes::stpbboxs(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Get(index);
}
::tagPBBox* tagPBResultRes::mutable_stpbboxs(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Mutable(index);
}
::tagPBBox* tagPBResultRes::add_stpbboxs() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBBoxs)
  return stpbboxs_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBBox >*
tagPBResultRes::mutable_stpbboxs() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBBoxs)
  return &stpbboxs_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBBox >&
tagPBResultRes::stpbboxs() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBBoxs)
  return stpbboxs_;
}

// repeated .tagPBPoint stPBPoints = 4;
int tagPBResultRes::stpbpoints_size() const {
  return stpbpoints_.size();
}
void tagPBResultRes::clear_stpbpoints() {
  stpbpoints_.Clear();
}
const ::tagPBPoint& tagPBResultRes::stpbpoints(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBPoints)
  return stpbpoints_.Get(index);
}
::tagPBPoint* tagPBResultRes::mutable_stpbpoints(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBPoints)
  return stpbpoints_.Mutable(index);
}
::tagPBPoint* tagPBResultRes::add_stpbpoints() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBPoints)
  return stpbpoints_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBPoint >*
tagPBResultRes::mutable_stpbpoints() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBPoints)
  return &stpbpoints_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBPoint >&
tagPBResultRes::stpbpoints() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBPoints)
  return stpbpoints_;
}

// float fNum = 5;
void tagPBResultRes::clear_fnum() {
  fnum_ = 0;
}
float tagPBResultRes::fnum() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.fNum)
  return fnum_;
}
void tagPBResultRes::set_fnum(float value) {
  
  fnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBResultRes.fNum)
}

// .tagPBRect stPBROI = 6;
bool tagPBResultRes::has_stpbroi() const {
  return this != internal_default_instance() && stpbroi_ != NULL;
}
void tagPBResultRes::clear_stpbroi() {
  if (GetArenaNoVirtual() == NULL && stpbroi_ != NULL) delete stpbroi_;
  stpbroi_ = NULL;
}
const ::tagPBRect& tagPBResultRes::stpbroi() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBROI)
  return stpbroi_ != NULL ? *stpbroi_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBResultRes::mutable_stpbroi() {
  
  if (stpbroi_ == NULL) {
    stpbroi_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBROI)
  return stpbroi_;
}
::tagPBRect* tagPBResultRes::release_stpbroi() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBROI)
  
  ::tagPBRect* temp = stpbroi_;
  stpbroi_ = NULL;
  return temp;
}
void tagPBResultRes::set_allocated_stpbroi(::tagPBRect* stpbroi) {
  delete stpbroi_;
  stpbroi_ = stpbroi;
  if (stpbroi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBROI)
}

// .tagPBRect stPBRect = 7;
bool tagPBResultRes::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
void tagPBResultRes::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
const ::tagPBRect& tagPBResultRes::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBResultRes::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBRect)
  return stpbrect_;
}
::tagPBRect* tagPBResultRes::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
void tagPBResultRes::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBRect)
}

// repeated .tagPBBlood stPBBloods = 8;
int tagPBResultRes::stpbbloods_size() const {
  return stpbbloods_.size();
}
void tagPBResultRes::clear_stpbbloods() {
  stpbbloods_.Clear();
}
const ::tagPBBlood& tagPBResultRes::stpbbloods(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBBloods)
  return stpbbloods_.Get(index);
}
::tagPBBlood* tagPBResultRes::mutable_stpbbloods(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBBloods)
  return stpbbloods_.Mutable(index);
}
::tagPBBlood* tagPBResultRes::add_stpbbloods() {
  // @@protoc_insertion_point(field_add:tagPBResultRes.stPBBloods)
  return stpbbloods_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBBlood >*
tagPBResultRes::mutable_stpbbloods() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.stPBBloods)
  return &stpbbloods_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBBlood >&
tagPBResultRes::stpbbloods() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.stPBBloods)
  return stpbbloods_;
}

// .tagPBPoint stPBViewAnglePoint = 9;
bool tagPBResultRes::has_stpbviewanglepoint() const {
  return this != internal_default_instance() && stpbviewanglepoint_ != NULL;
}
void tagPBResultRes::clear_stpbviewanglepoint() {
  if (GetArenaNoVirtual() == NULL && stpbviewanglepoint_ != NULL) delete stpbviewanglepoint_;
  stpbviewanglepoint_ = NULL;
}
const ::tagPBPoint& tagPBResultRes::stpbviewanglepoint() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBViewAnglePoint)
  return stpbviewanglepoint_ != NULL ? *stpbviewanglepoint_
                         : *::tagPBPoint::internal_default_instance();
}
::tagPBPoint* tagPBResultRes::mutable_stpbviewanglepoint() {
  
  if (stpbviewanglepoint_ == NULL) {
    stpbviewanglepoint_ = new ::tagPBPoint;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBViewAnglePoint)
  return stpbviewanglepoint_;
}
::tagPBPoint* tagPBResultRes::release_stpbviewanglepoint() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBViewAnglePoint)
  
  ::tagPBPoint* temp = stpbviewanglepoint_;
  stpbviewanglepoint_ = NULL;
  return temp;
}
void tagPBResultRes::set_allocated_stpbviewanglepoint(::tagPBPoint* stpbviewanglepoint) {
  delete stpbviewanglepoint_;
  stpbviewanglepoint_ = stpbviewanglepoint;
  if (stpbviewanglepoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBViewAnglePoint)
}

// .tagPBPoint stPBMyLocPoint = 10;
bool tagPBResultRes::has_stpbmylocpoint() const {
  return this != internal_default_instance() && stpbmylocpoint_ != NULL;
}
void tagPBResultRes::clear_stpbmylocpoint() {
  if (GetArenaNoVirtual() == NULL && stpbmylocpoint_ != NULL) delete stpbmylocpoint_;
  stpbmylocpoint_ = NULL;
}
const ::tagPBPoint& tagPBResultRes::stpbmylocpoint() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.stPBMyLocPoint)
  return stpbmylocpoint_ != NULL ? *stpbmylocpoint_
                         : *::tagPBPoint::internal_default_instance();
}
::tagPBPoint* tagPBResultRes::mutable_stpbmylocpoint() {
  
  if (stpbmylocpoint_ == NULL) {
    stpbmylocpoint_ = new ::tagPBPoint;
  }
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.stPBMyLocPoint)
  return stpbmylocpoint_;
}
::tagPBPoint* tagPBResultRes::release_stpbmylocpoint() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.stPBMyLocPoint)
  
  ::tagPBPoint* temp = stpbmylocpoint_;
  stpbmylocpoint_ = NULL;
  return temp;
}
void tagPBResultRes::set_allocated_stpbmylocpoint(::tagPBPoint* stpbmylocpoint) {
  delete stpbmylocpoint_;
  stpbmylocpoint_ = stpbmylocpoint;
  if (stpbmylocpoint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.stPBMyLocPoint)
}

// repeated float fColorMeanVars = 11;
int tagPBResultRes::fcolormeanvars_size() const {
  return fcolormeanvars_.size();
}
void tagPBResultRes::clear_fcolormeanvars() {
  fcolormeanvars_.Clear();
}
float tagPBResultRes::fcolormeanvars(int index) const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.fColorMeanVars)
  return fcolormeanvars_.Get(index);
}
void tagPBResultRes::set_fcolormeanvars(int index, float value) {
  fcolormeanvars_.Set(index, value);
  // @@protoc_insertion_point(field_set:tagPBResultRes.fColorMeanVars)
}
void tagPBResultRes::add_fcolormeanvars(float value) {
  fcolormeanvars_.Add(value);
  // @@protoc_insertion_point(field_add:tagPBResultRes.fColorMeanVars)
}
const ::google::protobuf::RepeatedField< float >&
tagPBResultRes::fcolormeanvars() const {
  // @@protoc_insertion_point(field_list:tagPBResultRes.fColorMeanVars)
  return fcolormeanvars_;
}
::google::protobuf::RepeatedField< float >*
tagPBResultRes::mutable_fcolormeanvars() {
  // @@protoc_insertion_point(field_mutable_list:tagPBResultRes.fColorMeanVars)
  return &fcolormeanvars_;
}

// bytes byImage = 12;
void tagPBResultRes::clear_byimage() {
  byimage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBResultRes::byimage() const {
  // @@protoc_insertion_point(field_get:tagPBResultRes.byImage)
  return byimage_.GetNoArena();
}
void tagPBResultRes::set_byimage(const ::std::string& value) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBResultRes.byImage)
}
#if LANG_CXX11
void tagPBResultRes::set_byimage(::std::string&& value) {
  
  byimage_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBResultRes.byImage)
}
#endif
void tagPBResultRes::set_byimage(const char* value) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBResultRes.byImage)
}
void tagPBResultRes::set_byimage(const void* value, size_t size) {
  
  byimage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBResultRes.byImage)
}
::std::string* tagPBResultRes::mutable_byimage() {
  
  // @@protoc_insertion_point(field_mutable:tagPBResultRes.byImage)
  return byimage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBResultRes::release_byimage() {
  // @@protoc_insertion_point(field_release:tagPBResultRes.byImage)
  
  return byimage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBResultRes::set_allocated_byimage(::std::string* byimage) {
  if (byimage != NULL) {
    
  } else {
    
  }
  byimage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), byimage);
  // @@protoc_insertion_point(field_set_allocated:tagPBResultRes.byImage)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBPoint::kNXFieldNumber;
const int tagPBPoint::kNYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBPoint::tagPBPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBPoint)
}
tagPBPoint::tagPBPoint(const tagPBPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nx_, &from.nx_,
    reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  // @@protoc_insertion_point(copy_constructor:tagPBPoint)
}

void tagPBPoint::SharedCtor() {
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
  _cached_size_ = 0;
}

tagPBPoint::~tagPBPoint() {
  // @@protoc_insertion_point(destructor:tagPBPoint)
  SharedDtor();
}

void tagPBPoint::SharedDtor() {
}

void tagPBPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBPoint::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[4].descriptor;
}

const tagPBPoint& tagPBPoint::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBPoint* tagPBPoint::New(::google::protobuf::Arena* arena) const {
  tagPBPoint* n = new tagPBPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBPoint)
  ::memset(&nx_, 0, reinterpret_cast<char*>(&ny_) -
    reinterpret_cast<char*>(&nx_) + sizeof(ny_));
}

bool tagPBPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nX = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nY = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBPoint)
  return false;
#undef DO_
}

void tagPBPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBPoint)
}

::google::protobuf::uint8* tagPBPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBPoint)
  // int32 nX = 1;
  if (this->nx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBPoint)
  return target;
}

size_t tagPBPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBPoint)
  size_t total_size = 0;

  // int32 nX = 1;
  if (this->nx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nx());
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ny());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBPoint)
    MergeFrom(*source);
  }
}

void tagPBPoint::MergeFrom(const tagPBPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nx() != 0) {
    set_nx(from.nx());
  }
  if (from.ny() != 0) {
    set_ny(from.ny());
  }
}

void tagPBPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBPoint::CopyFrom(const tagPBPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBPoint::IsInitialized() const {
  return true;
}

void tagPBPoint::Swap(tagPBPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBPoint::InternalSwap(tagPBPoint* other) {
  std::swap(nx_, other->nx_);
  std::swap(ny_, other->ny_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBPoint::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBPoint

// int32 nX = 1;
void tagPBPoint::clear_nx() {
  nx_ = 0;
}
::google::protobuf::int32 tagPBPoint::nx() const {
  // @@protoc_insertion_point(field_get:tagPBPoint.nX)
  return nx_;
}
void tagPBPoint::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagPBPoint.nX)
}

// int32 nY = 2;
void tagPBPoint::clear_ny() {
  ny_ = 0;
}
::google::protobuf::int32 tagPBPoint::ny() const {
  // @@protoc_insertion_point(field_get:tagPBPoint.nY)
  return ny_;
}
void tagPBPoint::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagPBPoint.nY)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBBlood::kNLevelFieldNumber;
const int tagPBBlood::kFScoreFieldNumber;
const int tagPBBlood::kFPercentFieldNumber;
const int tagPBBlood::kNClassIDFieldNumber;
const int tagPBBlood::kStrNameFieldNumber;
const int tagPBBlood::kStPBRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBBlood::tagPBBlood()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBBlood)
}
tagPBBlood::tagPBBlood(const tagPBBlood& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.has_stpbrect()) {
    stpbrect_ = new ::tagPBRect(*from.stpbrect_);
  } else {
    stpbrect_ = NULL;
  }
  ::memcpy(&nlevel_, &from.nlevel_,
    reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&nlevel_) + sizeof(nclassid_));
  // @@protoc_insertion_point(copy_constructor:tagPBBlood)
}

void tagPBBlood::SharedCtor() {
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stpbrect_, 0, reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&stpbrect_) + sizeof(nclassid_));
  _cached_size_ = 0;
}

tagPBBlood::~tagPBBlood() {
  // @@protoc_insertion_point(destructor:tagPBBlood)
  SharedDtor();
}

void tagPBBlood::SharedDtor() {
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stpbrect_;
  }
}

void tagPBBlood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBBlood::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[5].descriptor;
}

const tagPBBlood& tagPBBlood::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBBlood* tagPBBlood::New(::google::protobuf::Arena* arena) const {
  tagPBBlood* n = new tagPBBlood;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBBlood::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBBlood)
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) {
    delete stpbrect_;
  }
  stpbrect_ = NULL;
  ::memset(&nlevel_, 0, reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&nlevel_) + sizeof(nclassid_));
}

bool tagPBBlood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBBlood)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nLevel = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fScore = 2;
      case 2: {
        if (tag == 21u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fPercent = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fpercent_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nClassID = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nclassid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strName = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBBlood.strName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBRect stPBRect = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbrect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBBlood)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBBlood)
  return false;
#undef DO_
}

void tagPBBlood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBBlood)
  // int32 nLevel = 1;
  if (this->nlevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nlevel(), output);
  }

  // float fScore = 2;
  if (this->fscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->fscore(), output);
  }

  // float fPercent = 3;
  if (this->fpercent() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fpercent(), output);
  }

  // int32 nClassID = 4;
  if (this->nclassid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nclassid(), output);
  }

  // string strName = 5;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBBlood.strName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->strname(), output);
  }

  // .tagPBRect stPBRect = 6;
  if (this->has_stpbrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *this->stpbrect_, output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBBlood)
}

::google::protobuf::uint8* tagPBBlood::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBBlood)
  // int32 nLevel = 1;
  if (this->nlevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nlevel(), target);
  }

  // float fScore = 2;
  if (this->fscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->fscore(), target);
  }

  // float fPercent = 3;
  if (this->fpercent() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fpercent(), target);
  }

  // int32 nClassID = 4;
  if (this->nclassid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nclassid(), target);
  }

  // string strName = 5;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBBlood.strName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->strname(), target);
  }

  // .tagPBRect stPBRect = 6;
  if (this->has_stpbrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *this->stpbrect_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBBlood)
  return target;
}

size_t tagPBBlood::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBBlood)
  size_t total_size = 0;

  // string strName = 5;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strname());
  }

  // .tagPBRect stPBRect = 6;
  if (this->has_stpbrect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbrect_);
  }

  // int32 nLevel = 1;
  if (this->nlevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nlevel());
  }

  // float fScore = 2;
  if (this->fscore() != 0) {
    total_size += 1 + 4;
  }

  // float fPercent = 3;
  if (this->fpercent() != 0) {
    total_size += 1 + 4;
  }

  // int32 nClassID = 4;
  if (this->nclassid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nclassid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBBlood::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBBlood)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBBlood* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBBlood>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBBlood)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBBlood)
    MergeFrom(*source);
  }
}

void tagPBBlood::MergeFrom(const tagPBBlood& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBBlood)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.has_stpbrect()) {
    mutable_stpbrect()->::tagPBRect::MergeFrom(from.stpbrect());
  }
  if (from.nlevel() != 0) {
    set_nlevel(from.nlevel());
  }
  if (from.fscore() != 0) {
    set_fscore(from.fscore());
  }
  if (from.fpercent() != 0) {
    set_fpercent(from.fpercent());
  }
  if (from.nclassid() != 0) {
    set_nclassid(from.nclassid());
  }
}

void tagPBBlood::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBBlood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBBlood::CopyFrom(const tagPBBlood& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBBlood)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBBlood::IsInitialized() const {
  return true;
}

void tagPBBlood::Swap(tagPBBlood* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBBlood::InternalSwap(tagPBBlood* other) {
  strname_.Swap(&other->strname_);
  std::swap(stpbrect_, other->stpbrect_);
  std::swap(nlevel_, other->nlevel_);
  std::swap(fscore_, other->fscore_);
  std::swap(fpercent_, other->fpercent_);
  std::swap(nclassid_, other->nclassid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBBlood::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBBlood

// int32 nLevel = 1;
void tagPBBlood::clear_nlevel() {
  nlevel_ = 0;
}
::google::protobuf::int32 tagPBBlood::nlevel() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.nLevel)
  return nlevel_;
}
void tagPBBlood::set_nlevel(::google::protobuf::int32 value) {
  
  nlevel_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.nLevel)
}

// float fScore = 2;
void tagPBBlood::clear_fscore() {
  fscore_ = 0;
}
float tagPBBlood::fscore() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.fScore)
  return fscore_;
}
void tagPBBlood::set_fscore(float value) {
  
  fscore_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.fScore)
}

// float fPercent = 3;
void tagPBBlood::clear_fpercent() {
  fpercent_ = 0;
}
float tagPBBlood::fpercent() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.fPercent)
  return fpercent_;
}
void tagPBBlood::set_fpercent(float value) {
  
  fpercent_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.fPercent)
}

// int32 nClassID = 4;
void tagPBBlood::clear_nclassid() {
  nclassid_ = 0;
}
::google::protobuf::int32 tagPBBlood::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.nClassID)
  return nclassid_;
}
void tagPBBlood::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBBlood.nClassID)
}

// string strName = 5;
void tagPBBlood::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBBlood::strname() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.strName)
  return strname_.GetNoArena();
}
void tagPBBlood::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBBlood.strName)
}
#if LANG_CXX11
void tagPBBlood::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBBlood.strName)
}
#endif
void tagPBBlood::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBBlood.strName)
}
void tagPBBlood::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBBlood.strName)
}
::std::string* tagPBBlood::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBBlood.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBBlood::release_strname() {
  // @@protoc_insertion_point(field_release:tagPBBlood.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBBlood::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:tagPBBlood.strName)
}

// .tagPBRect stPBRect = 6;
bool tagPBBlood::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
void tagPBBlood::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
const ::tagPBRect& tagPBBlood::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBBlood.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBBlood::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBBlood.stPBRect)
  return stpbrect_;
}
::tagPBRect* tagPBBlood::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBBlood.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
void tagPBBlood::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBBlood.stPBRect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBBox::kStrTmplNameFieldNumber;
const int tagPBBox::kNClassIDFieldNumber;
const int tagPBBox::kFScoreFieldNumber;
const int tagPBBox::kFScaleFieldNumber;
const int tagPBBox::kStPBRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBBox::tagPBBox()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBBox)
}
tagPBBox::tagPBBox(const tagPBBox& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strtmplname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strtmplname().size() > 0) {
    strtmplname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtmplname_);
  }
  if (from.has_stpbrect()) {
    stpbrect_ = new ::tagPBRect(*from.stpbrect_);
  } else {
    stpbrect_ = NULL;
  }
  ::memcpy(&nclassid_, &from.nclassid_,
    reinterpret_cast<char*>(&fscale_) -
    reinterpret_cast<char*>(&nclassid_) + sizeof(fscale_));
  // @@protoc_insertion_point(copy_constructor:tagPBBox)
}

void tagPBBox::SharedCtor() {
  strtmplname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stpbrect_, 0, reinterpret_cast<char*>(&fscale_) -
    reinterpret_cast<char*>(&stpbrect_) + sizeof(fscale_));
  _cached_size_ = 0;
}

tagPBBox::~tagPBBox() {
  // @@protoc_insertion_point(destructor:tagPBBox)
  SharedDtor();
}

void tagPBBox::SharedDtor() {
  strtmplname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stpbrect_;
  }
}

void tagPBBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBBox::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[6].descriptor;
}

const tagPBBox& tagPBBox::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBBox* tagPBBox::New(::google::protobuf::Arena* arena) const {
  tagPBBox* n = new tagPBBox;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBBox::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBBox)
  strtmplname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) {
    delete stpbrect_;
  }
  stpbrect_ = NULL;
  ::memset(&nclassid_, 0, reinterpret_cast<char*>(&fscale_) -
    reinterpret_cast<char*>(&nclassid_) + sizeof(fscale_));
}

bool tagPBBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBBox)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strTmplName = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strtmplname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strtmplname().data(), this->strtmplname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBBox.strTmplName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nClassID = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nclassid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fScore = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fScale = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBRect stPBRect = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbrect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBBox)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBBox)
  return false;
#undef DO_
}

void tagPBBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBBox)
  // string strTmplName = 1;
  if (this->strtmplname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtmplname().data(), this->strtmplname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBBox.strTmplName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strtmplname(), output);
  }

  // int32 nClassID = 2;
  if (this->nclassid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nclassid(), output);
  }

  // float fScore = 3;
  if (this->fscore() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fscore(), output);
  }

  // float fScale = 4;
  if (this->fscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fscale(), output);
  }

  // .tagPBRect stPBRect = 5;
  if (this->has_stpbrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->stpbrect_, output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBBox)
}

::google::protobuf::uint8* tagPBBox::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBBox)
  // string strTmplName = 1;
  if (this->strtmplname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strtmplname().data(), this->strtmplname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBBox.strTmplName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strtmplname(), target);
  }

  // int32 nClassID = 2;
  if (this->nclassid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nclassid(), target);
  }

  // float fScore = 3;
  if (this->fscore() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fscore(), target);
  }

  // float fScale = 4;
  if (this->fscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fscale(), target);
  }

  // .tagPBRect stPBRect = 5;
  if (this->has_stpbrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->stpbrect_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBBox)
  return target;
}

size_t tagPBBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBBox)
  size_t total_size = 0;

  // string strTmplName = 1;
  if (this->strtmplname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strtmplname());
  }

  // .tagPBRect stPBRect = 5;
  if (this->has_stpbrect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbrect_);
  }

  // int32 nClassID = 2;
  if (this->nclassid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nclassid());
  }

  // float fScore = 3;
  if (this->fscore() != 0) {
    total_size += 1 + 4;
  }

  // float fScale = 4;
  if (this->fscale() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBBox::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBBox)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBBox* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBBox>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBBox)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBBox)
    MergeFrom(*source);
  }
}

void tagPBBox::MergeFrom(const tagPBBox& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBBox)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strtmplname().size() > 0) {

    strtmplname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strtmplname_);
  }
  if (from.has_stpbrect()) {
    mutable_stpbrect()->::tagPBRect::MergeFrom(from.stpbrect());
  }
  if (from.nclassid() != 0) {
    set_nclassid(from.nclassid());
  }
  if (from.fscore() != 0) {
    set_fscore(from.fscore());
  }
  if (from.fscale() != 0) {
    set_fscale(from.fscale());
  }
}

void tagPBBox::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBBox::CopyFrom(const tagPBBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBBox::IsInitialized() const {
  return true;
}

void tagPBBox::Swap(tagPBBox* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBBox::InternalSwap(tagPBBox* other) {
  strtmplname_.Swap(&other->strtmplname_);
  std::swap(stpbrect_, other->stpbrect_);
  std::swap(nclassid_, other->nclassid_);
  std::swap(fscore_, other->fscore_);
  std::swap(fscale_, other->fscale_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBBox::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBBox

// string strTmplName = 1;
void tagPBBox::clear_strtmplname() {
  strtmplname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBBox::strtmplname() const {
  // @@protoc_insertion_point(field_get:tagPBBox.strTmplName)
  return strtmplname_.GetNoArena();
}
void tagPBBox::set_strtmplname(const ::std::string& value) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBBox.strTmplName)
}
#if LANG_CXX11
void tagPBBox::set_strtmplname(::std::string&& value) {
  
  strtmplname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBBox.strTmplName)
}
#endif
void tagPBBox::set_strtmplname(const char* value) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBBox.strTmplName)
}
void tagPBBox::set_strtmplname(const char* value, size_t size) {
  
  strtmplname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBBox.strTmplName)
}
::std::string* tagPBBox::mutable_strtmplname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBBox.strTmplName)
  return strtmplname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBBox::release_strtmplname() {
  // @@protoc_insertion_point(field_release:tagPBBox.strTmplName)
  
  return strtmplname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBBox::set_allocated_strtmplname(::std::string* strtmplname) {
  if (strtmplname != NULL) {
    
  } else {
    
  }
  strtmplname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strtmplname);
  // @@protoc_insertion_point(field_set_allocated:tagPBBox.strTmplName)
}

// int32 nClassID = 2;
void tagPBBox::clear_nclassid() {
  nclassid_ = 0;
}
::google::protobuf::int32 tagPBBox::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBBox.nClassID)
  return nclassid_;
}
void tagPBBox::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.nClassID)
}

// float fScore = 3;
void tagPBBox::clear_fscore() {
  fscore_ = 0;
}
float tagPBBox::fscore() const {
  // @@protoc_insertion_point(field_get:tagPBBox.fScore)
  return fscore_;
}
void tagPBBox::set_fscore(float value) {
  
  fscore_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.fScore)
}

// float fScale = 4;
void tagPBBox::clear_fscale() {
  fscale_ = 0;
}
float tagPBBox::fscale() const {
  // @@protoc_insertion_point(field_get:tagPBBox.fScale)
  return fscale_;
}
void tagPBBox::set_fscale(float value) {
  
  fscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBBox.fScale)
}

// .tagPBRect stPBRect = 5;
bool tagPBBox::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
void tagPBBox::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
const ::tagPBRect& tagPBBox::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBBox.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBBox::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBBox.stPBRect)
  return stpbrect_;
}
::tagPBRect* tagPBBox::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBBox.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
void tagPBBox::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBBox.stPBRect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBAgentTaskValue::kUGroupIDFieldNumber;
const int tagPBAgentTaskValue::kStPBAgentTaskTsksFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBAgentTaskValue::tagPBAgentTaskValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBAgentTaskValue)
}
tagPBAgentTaskValue::tagPBAgentTaskValue(const tagPBAgentTaskValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbagenttasktsks_(from.stpbagenttasktsks_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ugroupid_ = from.ugroupid_;
  // @@protoc_insertion_point(copy_constructor:tagPBAgentTaskValue)
}

void tagPBAgentTaskValue::SharedCtor() {
  ugroupid_ = 0u;
  _cached_size_ = 0;
}

tagPBAgentTaskValue::~tagPBAgentTaskValue() {
  // @@protoc_insertion_point(destructor:tagPBAgentTaskValue)
  SharedDtor();
}

void tagPBAgentTaskValue::SharedDtor() {
}

void tagPBAgentTaskValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBAgentTaskValue::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[7].descriptor;
}

const tagPBAgentTaskValue& tagPBAgentTaskValue::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBAgentTaskValue* tagPBAgentTaskValue::New(::google::protobuf::Arena* arena) const {
  tagPBAgentTaskValue* n = new tagPBAgentTaskValue;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBAgentTaskValue::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBAgentTaskValue)
  stpbagenttasktsks_.Clear();
  ugroupid_ = 0u;
}

bool tagPBAgentTaskValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBAgentTaskValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 uGroupID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ugroupid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbagenttasktsks()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBAgentTaskValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBAgentTaskValue)
  return false;
#undef DO_
}

void tagPBAgentTaskValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBAgentTaskValue)
  // uint32 uGroupID = 1;
  if (this->ugroupid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ugroupid(), output);
  }

  // repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
  for (unsigned int i = 0, n = this->stpbagenttasktsks_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->stpbagenttasktsks(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBAgentTaskValue)
}

::google::protobuf::uint8* tagPBAgentTaskValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBAgentTaskValue)
  // uint32 uGroupID = 1;
  if (this->ugroupid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ugroupid(), target);
  }

  // repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
  for (unsigned int i = 0, n = this->stpbagenttasktsks_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->stpbagenttasktsks(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBAgentTaskValue)
  return target;
}

size_t tagPBAgentTaskValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBAgentTaskValue)
  size_t total_size = 0;

  // repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
  {
    unsigned int count = this->stpbagenttasktsks_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbagenttasktsks(i));
    }
  }

  // uint32 uGroupID = 1;
  if (this->ugroupid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ugroupid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBAgentTaskValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBAgentTaskValue)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBAgentTaskValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBAgentTaskValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBAgentTaskValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBAgentTaskValue)
    MergeFrom(*source);
  }
}

void tagPBAgentTaskValue::MergeFrom(const tagPBAgentTaskValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBAgentTaskValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbagenttasktsks_.MergeFrom(from.stpbagenttasktsks_);
  if (from.ugroupid() != 0) {
    set_ugroupid(from.ugroupid());
  }
}

void tagPBAgentTaskValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBAgentTaskValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBAgentTaskValue::CopyFrom(const tagPBAgentTaskValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBAgentTaskValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBAgentTaskValue::IsInitialized() const {
  return true;
}

void tagPBAgentTaskValue::Swap(tagPBAgentTaskValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBAgentTaskValue::InternalSwap(tagPBAgentTaskValue* other) {
  stpbagenttasktsks_.UnsafeArenaSwap(&other->stpbagenttasktsks_);
  std::swap(ugroupid_, other->ugroupid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBAgentTaskValue::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBAgentTaskValue

// uint32 uGroupID = 1;
void tagPBAgentTaskValue::clear_ugroupid() {
  ugroupid_ = 0u;
}
::google::protobuf::uint32 tagPBAgentTaskValue::ugroupid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskValue.uGroupID)
  return ugroupid_;
}
void tagPBAgentTaskValue::set_ugroupid(::google::protobuf::uint32 value) {
  
  ugroupid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskValue.uGroupID)
}

// repeated .tagPBAgentTaskTsk stPBAgentTaskTsks = 2;
int tagPBAgentTaskValue::stpbagenttasktsks_size() const {
  return stpbagenttasktsks_.size();
}
void tagPBAgentTaskValue::clear_stpbagenttasktsks() {
  stpbagenttasktsks_.Clear();
}
const ::tagPBAgentTaskTsk& tagPBAgentTaskValue::stpbagenttasktsks(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Get(index);
}
::tagPBAgentTaskTsk* tagPBAgentTaskValue::mutable_stpbagenttasktsks(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Mutable(index);
}
::tagPBAgentTaskTsk* tagPBAgentTaskValue::add_stpbagenttasktsks() {
  // @@protoc_insertion_point(field_add:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >*
tagPBAgentTaskValue::mutable_stpbagenttasktsks() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return &stpbagenttasktsks_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskTsk >&
tagPBAgentTaskValue::stpbagenttasktsks() const {
  // @@protoc_insertion_point(field_list:tagPBAgentTaskValue.stPBAgentTaskTsks)
  return stpbagenttasktsks_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBAgentTaskTsk::kNTaskIDFieldNumber;
const int tagPBAgentTaskTsk::kETypeFieldNumber;
const int tagPBAgentTaskTsk::kNSkipFrameFieldNumber;
const int tagPBAgentTaskTsk::kStPBAgentTaskElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBAgentTaskTsk::tagPBAgentTaskTsk()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBAgentTaskTsk)
}
tagPBAgentTaskTsk::tagPBAgentTaskTsk(const tagPBAgentTaskTsk& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbagenttaskelements_(from.stpbagenttaskelements_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ntaskid_, &from.ntaskid_,
    reinterpret_cast<char*>(&nskipframe_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(nskipframe_));
  // @@protoc_insertion_point(copy_constructor:tagPBAgentTaskTsk)
}

void tagPBAgentTaskTsk::SharedCtor() {
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&nskipframe_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(nskipframe_));
  _cached_size_ = 0;
}

tagPBAgentTaskTsk::~tagPBAgentTaskTsk() {
  // @@protoc_insertion_point(destructor:tagPBAgentTaskTsk)
  SharedDtor();
}

void tagPBAgentTaskTsk::SharedDtor() {
}

void tagPBAgentTaskTsk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBAgentTaskTsk::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[8].descriptor;
}

const tagPBAgentTaskTsk& tagPBAgentTaskTsk::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBAgentTaskTsk* tagPBAgentTaskTsk::New(::google::protobuf::Arena* arena) const {
  tagPBAgentTaskTsk* n = new tagPBAgentTaskTsk;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBAgentTaskTsk::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBAgentTaskTsk)
  stpbagenttaskelements_.Clear();
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&nskipframe_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(nskipframe_));
}

bool tagPBAgentTaskTsk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBAgentTaskTsk)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nTaskID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EREGTYPE eType = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_etype(static_cast< ::EREGTYPE >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nSkipFrame = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nskipframe_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
      case 4: {
        if (tag == 34u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbagenttaskelements()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBAgentTaskTsk)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBAgentTaskTsk)
  return false;
#undef DO_
}

void tagPBAgentTaskTsk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBAgentTaskTsk)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntaskid(), output);
  }

  // .EREGTYPE eType = 2;
  if (this->etype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  // int32 nSkipFrame = 3;
  if (this->nskipframe() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nskipframe(), output);
  }

  // repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
  for (unsigned int i = 0, n = this->stpbagenttaskelements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->stpbagenttaskelements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBAgentTaskTsk)
}

::google::protobuf::uint8* tagPBAgentTaskTsk::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBAgentTaskTsk)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntaskid(), target);
  }

  // .EREGTYPE eType = 2;
  if (this->etype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  // int32 nSkipFrame = 3;
  if (this->nskipframe() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nskipframe(), target);
  }

  // repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
  for (unsigned int i = 0, n = this->stpbagenttaskelements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->stpbagenttaskelements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBAgentTaskTsk)
  return target;
}

size_t tagPBAgentTaskTsk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBAgentTaskTsk)
  size_t total_size = 0;

  // repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
  {
    unsigned int count = this->stpbagenttaskelements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbagenttaskelements(i));
    }
  }

  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntaskid());
  }

  // .EREGTYPE eType = 2;
  if (this->etype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
  }

  // int32 nSkipFrame = 3;
  if (this->nskipframe() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nskipframe());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBAgentTaskTsk::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBAgentTaskTsk)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBAgentTaskTsk* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBAgentTaskTsk>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBAgentTaskTsk)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBAgentTaskTsk)
    MergeFrom(*source);
  }
}

void tagPBAgentTaskTsk::MergeFrom(const tagPBAgentTaskTsk& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBAgentTaskTsk)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbagenttaskelements_.MergeFrom(from.stpbagenttaskelements_);
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.etype() != 0) {
    set_etype(from.etype());
  }
  if (from.nskipframe() != 0) {
    set_nskipframe(from.nskipframe());
  }
}

void tagPBAgentTaskTsk::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBAgentTaskTsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBAgentTaskTsk::CopyFrom(const tagPBAgentTaskTsk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBAgentTaskTsk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBAgentTaskTsk::IsInitialized() const {
  return true;
}

void tagPBAgentTaskTsk::Swap(tagPBAgentTaskTsk* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBAgentTaskTsk::InternalSwap(tagPBAgentTaskTsk* other) {
  stpbagenttaskelements_.UnsafeArenaSwap(&other->stpbagenttaskelements_);
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(etype_, other->etype_);
  std::swap(nskipframe_, other->nskipframe_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBAgentTaskTsk::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBAgentTaskTsk

// int32 nTaskID = 1;
void tagPBAgentTaskTsk::clear_ntaskid() {
  ntaskid_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskTsk::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.nTaskID)
  return ntaskid_;
}
void tagPBAgentTaskTsk::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.nTaskID)
}

// .EREGTYPE eType = 2;
void tagPBAgentTaskTsk::clear_etype() {
  etype_ = 0;
}
::EREGTYPE tagPBAgentTaskTsk::etype() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.eType)
  return static_cast< ::EREGTYPE >(etype_);
}
void tagPBAgentTaskTsk::set_etype(::EREGTYPE value) {
  
  etype_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.eType)
}

// int32 nSkipFrame = 3;
void tagPBAgentTaskTsk::clear_nskipframe() {
  nskipframe_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskTsk::nskipframe() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.nSkipFrame)
  return nskipframe_;
}
void tagPBAgentTaskTsk::set_nskipframe(::google::protobuf::int32 value) {
  
  nskipframe_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskTsk.nSkipFrame)
}

// repeated .tagPBAgentTaskElement stPBAgentTaskElements = 4;
int tagPBAgentTaskTsk::stpbagenttaskelements_size() const {
  return stpbagenttaskelements_.size();
}
void tagPBAgentTaskTsk::clear_stpbagenttaskelements() {
  stpbagenttaskelements_.Clear();
}
const ::tagPBAgentTaskElement& tagPBAgentTaskTsk::stpbagenttaskelements(int index) const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Get(index);
}
::tagPBAgentTaskElement* tagPBAgentTaskTsk::mutable_stpbagenttaskelements(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Mutable(index);
}
::tagPBAgentTaskElement* tagPBAgentTaskTsk::add_stpbagenttaskelements() {
  // @@protoc_insertion_point(field_add:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >*
tagPBAgentTaskTsk::mutable_stpbagenttaskelements() {
  // @@protoc_insertion_point(field_mutable_list:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return &stpbagenttaskelements_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBAgentTaskElement >&
tagPBAgentTaskTsk::stpbagenttaskelements() const {
  // @@protoc_insertion_point(field_list:tagPBAgentTaskTsk.stPBAgentTaskElements)
  return stpbagenttaskelements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBAgentTaskElement::kStPBRectFieldNumber;
const int tagPBAgentTaskElement::kStrAlgorithmFieldNumber;
const int tagPBAgentTaskElement::kFMinScaleFieldNumber;
const int tagPBAgentTaskElement::kFMaxScaleFieldNumber;
const int tagPBAgentTaskElement::kNScaleLevelFieldNumber;
const int tagPBAgentTaskElement::kStrConditionFieldNumber;
const int tagPBAgentTaskElement::kNFilterSizeFieldNumber;
const int tagPBAgentTaskElement::kStPBTemplatesFieldNumber;
const int tagPBAgentTaskElement::kFIntervalTimeFieldNumber;
const int tagPBAgentTaskElement::kFThresholdFieldNumber;
const int tagPBAgentTaskElement::kStrCfgPathFieldNumber;
const int tagPBAgentTaskElement::kStrWeightPathFieldNumber;
const int tagPBAgentTaskElement::kStrNamePathFieldNumber;
const int tagPBAgentTaskElement::kNBloodLengthFieldNumber;
const int tagPBAgentTaskElement::kNMaxPointNumFieldNumber;
const int tagPBAgentTaskElement::kStrMaskPathFieldNumber;
const int tagPBAgentTaskElement::kStrMyLocConditionFieldNumber;
const int tagPBAgentTaskElement::kStrFriendsConditionFieldNumber;
const int tagPBAgentTaskElement::kStrViewLocConditionFieldNumber;
const int tagPBAgentTaskElement::kStrMapPathFieldNumber;
const int tagPBAgentTaskElement::kStrImgFilePathFieldNumber;
const int tagPBAgentTaskElement::kNMaxBBoxNumFieldNumber;
const int tagPBAgentTaskElement::kNDilateSizeFieldNumber;
const int tagPBAgentTaskElement::kNErodeSizeFieldNumber;
const int tagPBAgentTaskElement::kNRegionSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBAgentTaskElement::tagPBAgentTaskElement()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBAgentTaskElement)
}
tagPBAgentTaskElement::tagPBAgentTaskElement(const tagPBAgentTaskElement& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stralgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.stralgorithm().size() > 0) {
    stralgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stralgorithm_);
  }
  strcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strcondition().size() > 0) {
    strcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcondition_);
  }
  strcfgpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strcfgpath().size() > 0) {
    strcfgpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcfgpath_);
  }
  strweightpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strweightpath().size() > 0) {
    strweightpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strweightpath_);
  }
  strnamepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strnamepath().size() > 0) {
    strnamepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnamepath_);
  }
  strmaskpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmaskpath().size() > 0) {
    strmaskpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmaskpath_);
  }
  strmyloccondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmyloccondition().size() > 0) {
    strmyloccondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmyloccondition_);
  }
  strfriendscondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strfriendscondition().size() > 0) {
    strfriendscondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfriendscondition_);
  }
  strviewloccondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strviewloccondition().size() > 0) {
    strviewloccondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strviewloccondition_);
  }
  strmappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strmappath().size() > 0) {
    strmappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmappath_);
  }
  strimgfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strimgfilepath().size() > 0) {
    strimgfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strimgfilepath_);
  }
  if (from.has_stpbrect()) {
    stpbrect_ = new ::tagPBRect(*from.stpbrect_);
  } else {
    stpbrect_ = NULL;
  }
  if (from.has_stpbtemplates()) {
    stpbtemplates_ = new ::tagPBTemplates(*from.stpbtemplates_);
  } else {
    stpbtemplates_ = NULL;
  }
  ::memcpy(&fminscale_, &from.fminscale_,
    reinterpret_cast<char*>(&nregionsize_) -
    reinterpret_cast<char*>(&fminscale_) + sizeof(nregionsize_));
  // @@protoc_insertion_point(copy_constructor:tagPBAgentTaskElement)
}

void tagPBAgentTaskElement::SharedCtor() {
  stralgorithm_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcfgpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweightpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strnamepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmaskpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmyloccondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strfriendscondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strviewloccondition_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmappath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strimgfilepath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stpbrect_, 0, reinterpret_cast<char*>(&nregionsize_) -
    reinterpret_cast<char*>(&stpbrect_) + sizeof(nregionsize_));
  _cached_size_ = 0;
}

tagPBAgentTaskElement::~tagPBAgentTaskElement() {
  // @@protoc_insertion_point(destructor:tagPBAgentTaskElement)
  SharedDtor();
}

void tagPBAgentTaskElement::SharedDtor() {
  stralgorithm_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcfgpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweightpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strnamepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmaskpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmyloccondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strfriendscondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strviewloccondition_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmappath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strimgfilepath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stpbrect_;
  }
  if (this != internal_default_instance()) {
    delete stpbtemplates_;
  }
}

void tagPBAgentTaskElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBAgentTaskElement::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[9].descriptor;
}

const tagPBAgentTaskElement& tagPBAgentTaskElement::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBAgentTaskElement* tagPBAgentTaskElement::New(::google::protobuf::Arena* arena) const {
  tagPBAgentTaskElement* n = new tagPBAgentTaskElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBAgentTaskElement::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBAgentTaskElement)
  stralgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strcfgpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strweightpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strnamepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmaskpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmyloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strfriendscondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strviewloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strmappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strimgfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) {
    delete stpbrect_;
  }
  stpbrect_ = NULL;
  if (GetArenaNoVirtual() == NULL && stpbtemplates_ != NULL) {
    delete stpbtemplates_;
  }
  stpbtemplates_ = NULL;
  ::memset(&fminscale_, 0, reinterpret_cast<char*>(&nregionsize_) -
    reinterpret_cast<char*>(&fminscale_) + sizeof(nregionsize_));
}

bool tagPBAgentTaskElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBAgentTaskElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .tagPBRect stPBRect = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbrect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strAlgorithm = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_stralgorithm()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->stralgorithm().data(), this->stralgorithm().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strAlgorithm"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMinScale = 3;
      case 3: {
        if (tag == 29u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fminscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fMaxScale = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fmaxscale_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nScaleLevel = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nscalelevel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strCondition = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strcondition().data(), this->strcondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nFilterSize = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nfiltersize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBTemplates stPBTemplates = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbtemplates()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fIntervalTime = 9;
      case 9: {
        if (tag == 77u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fintervaltime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fThreshold = 10;
      case 10: {
        if (tag == 85u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strCfgPath = 11;
      case 11: {
        if (tag == 90u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strcfgpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strcfgpath().data(), this->strcfgpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strCfgPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strWeightPath = 12;
      case 12: {
        if (tag == 98u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strweightpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strweightpath().data(), this->strweightpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strWeightPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strNamePath = 13;
      case 13: {
        if (tag == 106u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strnamepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strnamepath().data(), this->strnamepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strNamePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nBloodLength = 14;
      case 14: {
        if (tag == 112u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nbloodlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nMaxPointNum = 15;
      case 15: {
        if (tag == 120u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmaxpointnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strMaskPath = 16;
      case 16: {
        if (tag == 130u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmaskpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strmaskpath().data(), this->strmaskpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strMaskPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strMyLocCondition = 17;
      case 17: {
        if (tag == 138u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmyloccondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strmyloccondition().data(), this->strmyloccondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strMyLocCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strFriendsCondition = 18;
      case 18: {
        if (tag == 146u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strfriendscondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strfriendscondition().data(), this->strfriendscondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strFriendsCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strViewLocCondition = 19;
      case 19: {
        if (tag == 154u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strviewloccondition()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strviewloccondition().data(), this->strviewloccondition().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strViewLocCondition"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strMapPath = 20;
      case 20: {
        if (tag == 162u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strmappath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strmappath().data(), this->strmappath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strMapPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strImgFilePath = 21;
      case 21: {
        if (tag == 170u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strimgfilepath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strimgfilepath().data(), this->strimgfilepath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBAgentTaskElement.strImgFilePath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nMaxBBoxNum = 22;
      case 22: {
        if (tag == 176u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmaxbboxnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nDilateSize = 23;
      case 23: {
        if (tag == 184u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndilatesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nErodeSize = 24;
      case 24: {
        if (tag == 192u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nerodesize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nRegionSize = 25;
      case 25: {
        if (tag == 200u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nregionsize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBAgentTaskElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBAgentTaskElement)
  return false;
#undef DO_
}

void tagPBAgentTaskElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBAgentTaskElement)
  // .tagPBRect stPBRect = 1;
  if (this->has_stpbrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->stpbrect_, output);
  }

  // string strAlgorithm = 2;
  if (this->stralgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stralgorithm().data(), this->stralgorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strAlgorithm");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->stralgorithm(), output);
  }

  // float fMinScale = 3;
  if (this->fminscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fminscale(), output);
  }

  // float fMaxScale = 4;
  if (this->fmaxscale() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fmaxscale(), output);
  }

  // int32 nScaleLevel = 5;
  if (this->nscalelevel() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nscalelevel(), output);
  }

  // string strCondition = 6;
  if (this->strcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcondition().data(), this->strcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->strcondition(), output);
  }

  // int32 nFilterSize = 7;
  if (this->nfiltersize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nfiltersize(), output);
  }

  // .tagPBTemplates stPBTemplates = 8;
  if (this->has_stpbtemplates()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->stpbtemplates_, output);
  }

  // float fIntervalTime = 9;
  if (this->fintervaltime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fintervaltime(), output);
  }

  // float fThreshold = 10;
  if (this->fthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fthreshold(), output);
  }

  // string strCfgPath = 11;
  if (this->strcfgpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcfgpath().data(), this->strcfgpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strCfgPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->strcfgpath(), output);
  }

  // string strWeightPath = 12;
  if (this->strweightpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strweightpath().data(), this->strweightpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strWeightPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->strweightpath(), output);
  }

  // string strNamePath = 13;
  if (this->strnamepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnamepath().data(), this->strnamepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strNamePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->strnamepath(), output);
  }

  // int32 nBloodLength = 14;
  if (this->nbloodlength() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nbloodlength(), output);
  }

  // int32 nMaxPointNum = 15;
  if (this->nmaxpointnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nmaxpointnum(), output);
  }

  // string strMaskPath = 16;
  if (this->strmaskpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmaskpath().data(), this->strmaskpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMaskPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->strmaskpath(), output);
  }

  // string strMyLocCondition = 17;
  if (this->strmyloccondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmyloccondition().data(), this->strmyloccondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMyLocCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->strmyloccondition(), output);
  }

  // string strFriendsCondition = 18;
  if (this->strfriendscondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfriendscondition().data(), this->strfriendscondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strFriendsCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      18, this->strfriendscondition(), output);
  }

  // string strViewLocCondition = 19;
  if (this->strviewloccondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strviewloccondition().data(), this->strviewloccondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strViewLocCondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->strviewloccondition(), output);
  }

  // string strMapPath = 20;
  if (this->strmappath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmappath().data(), this->strmappath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMapPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      20, this->strmappath(), output);
  }

  // string strImgFilePath = 21;
  if (this->strimgfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strimgfilepath().data(), this->strimgfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strImgFilePath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->strimgfilepath(), output);
  }

  // int32 nMaxBBoxNum = 22;
  if (this->nmaxbboxnum() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->nmaxbboxnum(), output);
  }

  // int32 nDilateSize = 23;
  if (this->ndilatesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->ndilatesize(), output);
  }

  // int32 nErodeSize = 24;
  if (this->nerodesize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nerodesize(), output);
  }

  // int32 nRegionSize = 25;
  if (this->nregionsize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->nregionsize(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBAgentTaskElement)
}

::google::protobuf::uint8* tagPBAgentTaskElement::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBAgentTaskElement)
  // .tagPBRect stPBRect = 1;
  if (this->has_stpbrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->stpbrect_, false, target);
  }

  // string strAlgorithm = 2;
  if (this->stralgorithm().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->stralgorithm().data(), this->stralgorithm().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strAlgorithm");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->stralgorithm(), target);
  }

  // float fMinScale = 3;
  if (this->fminscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->fminscale(), target);
  }

  // float fMaxScale = 4;
  if (this->fmaxscale() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fmaxscale(), target);
  }

  // int32 nScaleLevel = 5;
  if (this->nscalelevel() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nscalelevel(), target);
  }

  // string strCondition = 6;
  if (this->strcondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcondition().data(), this->strcondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->strcondition(), target);
  }

  // int32 nFilterSize = 7;
  if (this->nfiltersize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nfiltersize(), target);
  }

  // .tagPBTemplates stPBTemplates = 8;
  if (this->has_stpbtemplates()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->stpbtemplates_, false, target);
  }

  // float fIntervalTime = 9;
  if (this->fintervaltime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->fintervaltime(), target);
  }

  // float fThreshold = 10;
  if (this->fthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->fthreshold(), target);
  }

  // string strCfgPath = 11;
  if (this->strcfgpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strcfgpath().data(), this->strcfgpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strCfgPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->strcfgpath(), target);
  }

  // string strWeightPath = 12;
  if (this->strweightpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strweightpath().data(), this->strweightpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strWeightPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->strweightpath(), target);
  }

  // string strNamePath = 13;
  if (this->strnamepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strnamepath().data(), this->strnamepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strNamePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->strnamepath(), target);
  }

  // int32 nBloodLength = 14;
  if (this->nbloodlength() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nbloodlength(), target);
  }

  // int32 nMaxPointNum = 15;
  if (this->nmaxpointnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->nmaxpointnum(), target);
  }

  // string strMaskPath = 16;
  if (this->strmaskpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmaskpath().data(), this->strmaskpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMaskPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->strmaskpath(), target);
  }

  // string strMyLocCondition = 17;
  if (this->strmyloccondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmyloccondition().data(), this->strmyloccondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMyLocCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->strmyloccondition(), target);
  }

  // string strFriendsCondition = 18;
  if (this->strfriendscondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strfriendscondition().data(), this->strfriendscondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strFriendsCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        18, this->strfriendscondition(), target);
  }

  // string strViewLocCondition = 19;
  if (this->strviewloccondition().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strviewloccondition().data(), this->strviewloccondition().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strViewLocCondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->strviewloccondition(), target);
  }

  // string strMapPath = 20;
  if (this->strmappath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strmappath().data(), this->strmappath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strMapPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->strmappath(), target);
  }

  // string strImgFilePath = 21;
  if (this->strimgfilepath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strimgfilepath().data(), this->strimgfilepath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBAgentTaskElement.strImgFilePath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->strimgfilepath(), target);
  }

  // int32 nMaxBBoxNum = 22;
  if (this->nmaxbboxnum() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->nmaxbboxnum(), target);
  }

  // int32 nDilateSize = 23;
  if (this->ndilatesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->ndilatesize(), target);
  }

  // int32 nErodeSize = 24;
  if (this->nerodesize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nerodesize(), target);
  }

  // int32 nRegionSize = 25;
  if (this->nregionsize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->nregionsize(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBAgentTaskElement)
  return target;
}

size_t tagPBAgentTaskElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBAgentTaskElement)
  size_t total_size = 0;

  // string strAlgorithm = 2;
  if (this->stralgorithm().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->stralgorithm());
  }

  // string strCondition = 6;
  if (this->strcondition().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strcondition());
  }

  // string strCfgPath = 11;
  if (this->strcfgpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strcfgpath());
  }

  // string strWeightPath = 12;
  if (this->strweightpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strweightpath());
  }

  // string strNamePath = 13;
  if (this->strnamepath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strnamepath());
  }

  // string strMaskPath = 16;
  if (this->strmaskpath().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strmaskpath());
  }

  // string strMyLocCondition = 17;
  if (this->strmyloccondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strmyloccondition());
  }

  // string strFriendsCondition = 18;
  if (this->strfriendscondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strfriendscondition());
  }

  // string strViewLocCondition = 19;
  if (this->strviewloccondition().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strviewloccondition());
  }

  // string strMapPath = 20;
  if (this->strmappath().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strmappath());
  }

  // string strImgFilePath = 21;
  if (this->strimgfilepath().size() > 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strimgfilepath());
  }

  // .tagPBRect stPBRect = 1;
  if (this->has_stpbrect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbrect_);
  }

  // .tagPBTemplates stPBTemplates = 8;
  if (this->has_stpbtemplates()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbtemplates_);
  }

  // float fMinScale = 3;
  if (this->fminscale() != 0) {
    total_size += 1 + 4;
  }

  // float fMaxScale = 4;
  if (this->fmaxscale() != 0) {
    total_size += 1 + 4;
  }

  // int32 nScaleLevel = 5;
  if (this->nscalelevel() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nscalelevel());
  }

  // int32 nFilterSize = 7;
  if (this->nfiltersize() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nfiltersize());
  }

  // float fIntervalTime = 9;
  if (this->fintervaltime() != 0) {
    total_size += 1 + 4;
  }

  // float fThreshold = 10;
  if (this->fthreshold() != 0) {
    total_size += 1 + 4;
  }

  // int32 nBloodLength = 14;
  if (this->nbloodlength() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nbloodlength());
  }

  // int32 nMaxPointNum = 15;
  if (this->nmaxpointnum() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmaxpointnum());
  }

  // int32 nMaxBBoxNum = 22;
  if (this->nmaxbboxnum() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nmaxbboxnum());
  }

  // int32 nDilateSize = 23;
  if (this->ndilatesize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ndilatesize());
  }

  // int32 nErodeSize = 24;
  if (this->nerodesize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nerodesize());
  }

  // int32 nRegionSize = 25;
  if (this->nregionsize() != 0) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nregionsize());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBAgentTaskElement::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBAgentTaskElement)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBAgentTaskElement* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBAgentTaskElement>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBAgentTaskElement)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBAgentTaskElement)
    MergeFrom(*source);
  }
}

void tagPBAgentTaskElement::MergeFrom(const tagPBAgentTaskElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBAgentTaskElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.stralgorithm().size() > 0) {

    stralgorithm_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.stralgorithm_);
  }
  if (from.strcondition().size() > 0) {

    strcondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcondition_);
  }
  if (from.strcfgpath().size() > 0) {

    strcfgpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strcfgpath_);
  }
  if (from.strweightpath().size() > 0) {

    strweightpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strweightpath_);
  }
  if (from.strnamepath().size() > 0) {

    strnamepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strnamepath_);
  }
  if (from.strmaskpath().size() > 0) {

    strmaskpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmaskpath_);
  }
  if (from.strmyloccondition().size() > 0) {

    strmyloccondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmyloccondition_);
  }
  if (from.strfriendscondition().size() > 0) {

    strfriendscondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strfriendscondition_);
  }
  if (from.strviewloccondition().size() > 0) {

    strviewloccondition_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strviewloccondition_);
  }
  if (from.strmappath().size() > 0) {

    strmappath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strmappath_);
  }
  if (from.strimgfilepath().size() > 0) {

    strimgfilepath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strimgfilepath_);
  }
  if (from.has_stpbrect()) {
    mutable_stpbrect()->::tagPBRect::MergeFrom(from.stpbrect());
  }
  if (from.has_stpbtemplates()) {
    mutable_stpbtemplates()->::tagPBTemplates::MergeFrom(from.stpbtemplates());
  }
  if (from.fminscale() != 0) {
    set_fminscale(from.fminscale());
  }
  if (from.fmaxscale() != 0) {
    set_fmaxscale(from.fmaxscale());
  }
  if (from.nscalelevel() != 0) {
    set_nscalelevel(from.nscalelevel());
  }
  if (from.nfiltersize() != 0) {
    set_nfiltersize(from.nfiltersize());
  }
  if (from.fintervaltime() != 0) {
    set_fintervaltime(from.fintervaltime());
  }
  if (from.fthreshold() != 0) {
    set_fthreshold(from.fthreshold());
  }
  if (from.nbloodlength() != 0) {
    set_nbloodlength(from.nbloodlength());
  }
  if (from.nmaxpointnum() != 0) {
    set_nmaxpointnum(from.nmaxpointnum());
  }
  if (from.nmaxbboxnum() != 0) {
    set_nmaxbboxnum(from.nmaxbboxnum());
  }
  if (from.ndilatesize() != 0) {
    set_ndilatesize(from.ndilatesize());
  }
  if (from.nerodesize() != 0) {
    set_nerodesize(from.nerodesize());
  }
  if (from.nregionsize() != 0) {
    set_nregionsize(from.nregionsize());
  }
}

void tagPBAgentTaskElement::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBAgentTaskElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBAgentTaskElement::CopyFrom(const tagPBAgentTaskElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBAgentTaskElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBAgentTaskElement::IsInitialized() const {
  return true;
}

void tagPBAgentTaskElement::Swap(tagPBAgentTaskElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBAgentTaskElement::InternalSwap(tagPBAgentTaskElement* other) {
  stralgorithm_.Swap(&other->stralgorithm_);
  strcondition_.Swap(&other->strcondition_);
  strcfgpath_.Swap(&other->strcfgpath_);
  strweightpath_.Swap(&other->strweightpath_);
  strnamepath_.Swap(&other->strnamepath_);
  strmaskpath_.Swap(&other->strmaskpath_);
  strmyloccondition_.Swap(&other->strmyloccondition_);
  strfriendscondition_.Swap(&other->strfriendscondition_);
  strviewloccondition_.Swap(&other->strviewloccondition_);
  strmappath_.Swap(&other->strmappath_);
  strimgfilepath_.Swap(&other->strimgfilepath_);
  std::swap(stpbrect_, other->stpbrect_);
  std::swap(stpbtemplates_, other->stpbtemplates_);
  std::swap(fminscale_, other->fminscale_);
  std::swap(fmaxscale_, other->fmaxscale_);
  std::swap(nscalelevel_, other->nscalelevel_);
  std::swap(nfiltersize_, other->nfiltersize_);
  std::swap(fintervaltime_, other->fintervaltime_);
  std::swap(fthreshold_, other->fthreshold_);
  std::swap(nbloodlength_, other->nbloodlength_);
  std::swap(nmaxpointnum_, other->nmaxpointnum_);
  std::swap(nmaxbboxnum_, other->nmaxbboxnum_);
  std::swap(ndilatesize_, other->ndilatesize_);
  std::swap(nerodesize_, other->nerodesize_);
  std::swap(nregionsize_, other->nregionsize_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBAgentTaskElement::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[9];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBAgentTaskElement

// .tagPBRect stPBRect = 1;
bool tagPBAgentTaskElement::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
void tagPBAgentTaskElement::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
const ::tagPBRect& tagPBAgentTaskElement::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBAgentTaskElement::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.stPBRect)
  return stpbrect_;
}
::tagPBRect* tagPBAgentTaskElement::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
void tagPBAgentTaskElement::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.stPBRect)
}

// string strAlgorithm = 2;
void tagPBAgentTaskElement::clear_stralgorithm() {
  stralgorithm_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::stralgorithm() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strAlgorithm)
  return stralgorithm_.GetNoArena();
}
void tagPBAgentTaskElement::set_stralgorithm(const ::std::string& value) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strAlgorithm)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_stralgorithm(::std::string&& value) {
  
  stralgorithm_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strAlgorithm)
}
#endif
void tagPBAgentTaskElement::set_stralgorithm(const char* value) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strAlgorithm)
}
void tagPBAgentTaskElement::set_stralgorithm(const char* value, size_t size) {
  
  stralgorithm_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strAlgorithm)
}
::std::string* tagPBAgentTaskElement::mutable_stralgorithm() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strAlgorithm)
  return stralgorithm_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_stralgorithm() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strAlgorithm)
  
  return stralgorithm_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_stralgorithm(::std::string* stralgorithm) {
  if (stralgorithm != NULL) {
    
  } else {
    
  }
  stralgorithm_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), stralgorithm);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strAlgorithm)
}

// float fMinScale = 3;
void tagPBAgentTaskElement::clear_fminscale() {
  fminscale_ = 0;
}
float tagPBAgentTaskElement::fminscale() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fMinScale)
  return fminscale_;
}
void tagPBAgentTaskElement::set_fminscale(float value) {
  
  fminscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fMinScale)
}

// float fMaxScale = 4;
void tagPBAgentTaskElement::clear_fmaxscale() {
  fmaxscale_ = 0;
}
float tagPBAgentTaskElement::fmaxscale() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fMaxScale)
  return fmaxscale_;
}
void tagPBAgentTaskElement::set_fmaxscale(float value) {
  
  fmaxscale_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fMaxScale)
}

// int32 nScaleLevel = 5;
void tagPBAgentTaskElement::clear_nscalelevel() {
  nscalelevel_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nscalelevel() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nScaleLevel)
  return nscalelevel_;
}
void tagPBAgentTaskElement::set_nscalelevel(::google::protobuf::int32 value) {
  
  nscalelevel_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nScaleLevel)
}

// string strCondition = 6;
void tagPBAgentTaskElement::clear_strcondition() {
  strcondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strcondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strCondition)
  return strcondition_.GetNoArena();
}
void tagPBAgentTaskElement::set_strcondition(const ::std::string& value) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strCondition)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strcondition(::std::string&& value) {
  
  strcondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strCondition)
}
#endif
void tagPBAgentTaskElement::set_strcondition(const char* value) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strCondition)
}
void tagPBAgentTaskElement::set_strcondition(const char* value, size_t size) {
  
  strcondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strCondition)
}
::std::string* tagPBAgentTaskElement::mutable_strcondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strCondition)
  return strcondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strcondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strCondition)
  
  return strcondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strcondition(::std::string* strcondition) {
  if (strcondition != NULL) {
    
  } else {
    
  }
  strcondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strCondition)
}

// int32 nFilterSize = 7;
void tagPBAgentTaskElement::clear_nfiltersize() {
  nfiltersize_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nfiltersize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nFilterSize)
  return nfiltersize_;
}
void tagPBAgentTaskElement::set_nfiltersize(::google::protobuf::int32 value) {
  
  nfiltersize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nFilterSize)
}

// .tagPBTemplates stPBTemplates = 8;
bool tagPBAgentTaskElement::has_stpbtemplates() const {
  return this != internal_default_instance() && stpbtemplates_ != NULL;
}
void tagPBAgentTaskElement::clear_stpbtemplates() {
  if (GetArenaNoVirtual() == NULL && stpbtemplates_ != NULL) delete stpbtemplates_;
  stpbtemplates_ = NULL;
}
const ::tagPBTemplates& tagPBAgentTaskElement::stpbtemplates() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.stPBTemplates)
  return stpbtemplates_ != NULL ? *stpbtemplates_
                         : *::tagPBTemplates::internal_default_instance();
}
::tagPBTemplates* tagPBAgentTaskElement::mutable_stpbtemplates() {
  
  if (stpbtemplates_ == NULL) {
    stpbtemplates_ = new ::tagPBTemplates;
  }
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.stPBTemplates)
  return stpbtemplates_;
}
::tagPBTemplates* tagPBAgentTaskElement::release_stpbtemplates() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.stPBTemplates)
  
  ::tagPBTemplates* temp = stpbtemplates_;
  stpbtemplates_ = NULL;
  return temp;
}
void tagPBAgentTaskElement::set_allocated_stpbtemplates(::tagPBTemplates* stpbtemplates) {
  delete stpbtemplates_;
  stpbtemplates_ = stpbtemplates;
  if (stpbtemplates) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.stPBTemplates)
}

// float fIntervalTime = 9;
void tagPBAgentTaskElement::clear_fintervaltime() {
  fintervaltime_ = 0;
}
float tagPBAgentTaskElement::fintervaltime() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fIntervalTime)
  return fintervaltime_;
}
void tagPBAgentTaskElement::set_fintervaltime(float value) {
  
  fintervaltime_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fIntervalTime)
}

// float fThreshold = 10;
void tagPBAgentTaskElement::clear_fthreshold() {
  fthreshold_ = 0;
}
float tagPBAgentTaskElement::fthreshold() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.fThreshold)
  return fthreshold_;
}
void tagPBAgentTaskElement::set_fthreshold(float value) {
  
  fthreshold_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.fThreshold)
}

// string strCfgPath = 11;
void tagPBAgentTaskElement::clear_strcfgpath() {
  strcfgpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strcfgpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strCfgPath)
  return strcfgpath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strcfgpath(const ::std::string& value) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strCfgPath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strcfgpath(::std::string&& value) {
  
  strcfgpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strCfgPath)
}
#endif
void tagPBAgentTaskElement::set_strcfgpath(const char* value) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strCfgPath)
}
void tagPBAgentTaskElement::set_strcfgpath(const char* value, size_t size) {
  
  strcfgpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strCfgPath)
}
::std::string* tagPBAgentTaskElement::mutable_strcfgpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strCfgPath)
  return strcfgpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strcfgpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strCfgPath)
  
  return strcfgpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strcfgpath(::std::string* strcfgpath) {
  if (strcfgpath != NULL) {
    
  } else {
    
  }
  strcfgpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strcfgpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strCfgPath)
}

// string strWeightPath = 12;
void tagPBAgentTaskElement::clear_strweightpath() {
  strweightpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strweightpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strWeightPath)
  return strweightpath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strweightpath(const ::std::string& value) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strWeightPath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strweightpath(::std::string&& value) {
  
  strweightpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strWeightPath)
}
#endif
void tagPBAgentTaskElement::set_strweightpath(const char* value) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strWeightPath)
}
void tagPBAgentTaskElement::set_strweightpath(const char* value, size_t size) {
  
  strweightpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strWeightPath)
}
::std::string* tagPBAgentTaskElement::mutable_strweightpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strWeightPath)
  return strweightpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strweightpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strWeightPath)
  
  return strweightpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strweightpath(::std::string* strweightpath) {
  if (strweightpath != NULL) {
    
  } else {
    
  }
  strweightpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strweightpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strWeightPath)
}

// string strNamePath = 13;
void tagPBAgentTaskElement::clear_strnamepath() {
  strnamepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strnamepath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strNamePath)
  return strnamepath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strnamepath(const ::std::string& value) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strNamePath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strnamepath(::std::string&& value) {
  
  strnamepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strNamePath)
}
#endif
void tagPBAgentTaskElement::set_strnamepath(const char* value) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strNamePath)
}
void tagPBAgentTaskElement::set_strnamepath(const char* value, size_t size) {
  
  strnamepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strNamePath)
}
::std::string* tagPBAgentTaskElement::mutable_strnamepath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strNamePath)
  return strnamepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strnamepath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strNamePath)
  
  return strnamepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strnamepath(::std::string* strnamepath) {
  if (strnamepath != NULL) {
    
  } else {
    
  }
  strnamepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strnamepath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strNamePath)
}

// int32 nBloodLength = 14;
void tagPBAgentTaskElement::clear_nbloodlength() {
  nbloodlength_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nbloodlength() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nBloodLength)
  return nbloodlength_;
}
void tagPBAgentTaskElement::set_nbloodlength(::google::protobuf::int32 value) {
  
  nbloodlength_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nBloodLength)
}

// int32 nMaxPointNum = 15;
void tagPBAgentTaskElement::clear_nmaxpointnum() {
  nmaxpointnum_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nmaxpointnum() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nMaxPointNum)
  return nmaxpointnum_;
}
void tagPBAgentTaskElement::set_nmaxpointnum(::google::protobuf::int32 value) {
  
  nmaxpointnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nMaxPointNum)
}

// string strMaskPath = 16;
void tagPBAgentTaskElement::clear_strmaskpath() {
  strmaskpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strmaskpath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMaskPath)
  return strmaskpath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strmaskpath(const ::std::string& value) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMaskPath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strmaskpath(::std::string&& value) {
  
  strmaskpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMaskPath)
}
#endif
void tagPBAgentTaskElement::set_strmaskpath(const char* value) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMaskPath)
}
void tagPBAgentTaskElement::set_strmaskpath(const char* value, size_t size) {
  
  strmaskpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMaskPath)
}
::std::string* tagPBAgentTaskElement::mutable_strmaskpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMaskPath)
  return strmaskpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strmaskpath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMaskPath)
  
  return strmaskpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strmaskpath(::std::string* strmaskpath) {
  if (strmaskpath != NULL) {
    
  } else {
    
  }
  strmaskpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmaskpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMaskPath)
}

// string strMyLocCondition = 17;
void tagPBAgentTaskElement::clear_strmyloccondition() {
  strmyloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strmyloccondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMyLocCondition)
  return strmyloccondition_.GetNoArena();
}
void tagPBAgentTaskElement::set_strmyloccondition(const ::std::string& value) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMyLocCondition)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strmyloccondition(::std::string&& value) {
  
  strmyloccondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMyLocCondition)
}
#endif
void tagPBAgentTaskElement::set_strmyloccondition(const char* value) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMyLocCondition)
}
void tagPBAgentTaskElement::set_strmyloccondition(const char* value, size_t size) {
  
  strmyloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMyLocCondition)
}
::std::string* tagPBAgentTaskElement::mutable_strmyloccondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMyLocCondition)
  return strmyloccondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strmyloccondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMyLocCondition)
  
  return strmyloccondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strmyloccondition(::std::string* strmyloccondition) {
  if (strmyloccondition != NULL) {
    
  } else {
    
  }
  strmyloccondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmyloccondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMyLocCondition)
}

// string strFriendsCondition = 18;
void tagPBAgentTaskElement::clear_strfriendscondition() {
  strfriendscondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strfriendscondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strFriendsCondition)
  return strfriendscondition_.GetNoArena();
}
void tagPBAgentTaskElement::set_strfriendscondition(const ::std::string& value) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strFriendsCondition)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strfriendscondition(::std::string&& value) {
  
  strfriendscondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strFriendsCondition)
}
#endif
void tagPBAgentTaskElement::set_strfriendscondition(const char* value) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strFriendsCondition)
}
void tagPBAgentTaskElement::set_strfriendscondition(const char* value, size_t size) {
  
  strfriendscondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strFriendsCondition)
}
::std::string* tagPBAgentTaskElement::mutable_strfriendscondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strFriendsCondition)
  return strfriendscondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strfriendscondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strFriendsCondition)
  
  return strfriendscondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strfriendscondition(::std::string* strfriendscondition) {
  if (strfriendscondition != NULL) {
    
  } else {
    
  }
  strfriendscondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strfriendscondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strFriendsCondition)
}

// string strViewLocCondition = 19;
void tagPBAgentTaskElement::clear_strviewloccondition() {
  strviewloccondition_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strviewloccondition() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strViewLocCondition)
  return strviewloccondition_.GetNoArena();
}
void tagPBAgentTaskElement::set_strviewloccondition(const ::std::string& value) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strViewLocCondition)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strviewloccondition(::std::string&& value) {
  
  strviewloccondition_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strViewLocCondition)
}
#endif
void tagPBAgentTaskElement::set_strviewloccondition(const char* value) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strViewLocCondition)
}
void tagPBAgentTaskElement::set_strviewloccondition(const char* value, size_t size) {
  
  strviewloccondition_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strViewLocCondition)
}
::std::string* tagPBAgentTaskElement::mutable_strviewloccondition() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strViewLocCondition)
  return strviewloccondition_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strviewloccondition() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strViewLocCondition)
  
  return strviewloccondition_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strviewloccondition(::std::string* strviewloccondition) {
  if (strviewloccondition != NULL) {
    
  } else {
    
  }
  strviewloccondition_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strviewloccondition);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strViewLocCondition)
}

// string strMapPath = 20;
void tagPBAgentTaskElement::clear_strmappath() {
  strmappath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strmappath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strMapPath)
  return strmappath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strmappath(const ::std::string& value) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strMapPath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strmappath(::std::string&& value) {
  
  strmappath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strMapPath)
}
#endif
void tagPBAgentTaskElement::set_strmappath(const char* value) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strMapPath)
}
void tagPBAgentTaskElement::set_strmappath(const char* value, size_t size) {
  
  strmappath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strMapPath)
}
::std::string* tagPBAgentTaskElement::mutable_strmappath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strMapPath)
  return strmappath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strmappath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strMapPath)
  
  return strmappath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strmappath(::std::string* strmappath) {
  if (strmappath != NULL) {
    
  } else {
    
  }
  strmappath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strmappath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strMapPath)
}

// string strImgFilePath = 21;
void tagPBAgentTaskElement::clear_strimgfilepath() {
  strimgfilepath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBAgentTaskElement::strimgfilepath() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.strImgFilePath)
  return strimgfilepath_.GetNoArena();
}
void tagPBAgentTaskElement::set_strimgfilepath(const ::std::string& value) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.strImgFilePath)
}
#if LANG_CXX11
void tagPBAgentTaskElement::set_strimgfilepath(::std::string&& value) {
  
  strimgfilepath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBAgentTaskElement.strImgFilePath)
}
#endif
void tagPBAgentTaskElement::set_strimgfilepath(const char* value) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBAgentTaskElement.strImgFilePath)
}
void tagPBAgentTaskElement::set_strimgfilepath(const char* value, size_t size) {
  
  strimgfilepath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBAgentTaskElement.strImgFilePath)
}
::std::string* tagPBAgentTaskElement::mutable_strimgfilepath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBAgentTaskElement.strImgFilePath)
  return strimgfilepath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBAgentTaskElement::release_strimgfilepath() {
  // @@protoc_insertion_point(field_release:tagPBAgentTaskElement.strImgFilePath)
  
  return strimgfilepath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBAgentTaskElement::set_allocated_strimgfilepath(::std::string* strimgfilepath) {
  if (strimgfilepath != NULL) {
    
  } else {
    
  }
  strimgfilepath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strimgfilepath);
  // @@protoc_insertion_point(field_set_allocated:tagPBAgentTaskElement.strImgFilePath)
}

// int32 nMaxBBoxNum = 22;
void tagPBAgentTaskElement::clear_nmaxbboxnum() {
  nmaxbboxnum_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nmaxbboxnum() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nMaxBBoxNum)
  return nmaxbboxnum_;
}
void tagPBAgentTaskElement::set_nmaxbboxnum(::google::protobuf::int32 value) {
  
  nmaxbboxnum_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nMaxBBoxNum)
}

// int32 nDilateSize = 23;
void tagPBAgentTaskElement::clear_ndilatesize() {
  ndilatesize_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::ndilatesize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nDilateSize)
  return ndilatesize_;
}
void tagPBAgentTaskElement::set_ndilatesize(::google::protobuf::int32 value) {
  
  ndilatesize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nDilateSize)
}

// int32 nErodeSize = 24;
void tagPBAgentTaskElement::clear_nerodesize() {
  nerodesize_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nerodesize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nErodeSize)
  return nerodesize_;
}
void tagPBAgentTaskElement::set_nerodesize(::google::protobuf::int32 value) {
  
  nerodesize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nErodeSize)
}

// int32 nRegionSize = 25;
void tagPBAgentTaskElement::clear_nregionsize() {
  nregionsize_ = 0;
}
::google::protobuf::int32 tagPBAgentTaskElement::nregionsize() const {
  // @@protoc_insertion_point(field_get:tagPBAgentTaskElement.nRegionSize)
  return nregionsize_;
}
void tagPBAgentTaskElement::set_nregionsize(::google::protobuf::int32 value) {
  
  nregionsize_ = value;
  // @@protoc_insertion_point(field_set:tagPBAgentTaskElement.nRegionSize)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBRect::kNXFieldNumber;
const int tagPBRect::kNYFieldNumber;
const int tagPBRect::kNWFieldNumber;
const int tagPBRect::kNHFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBRect::tagPBRect()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBRect)
}
tagPBRect::tagPBRect(const tagPBRect& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nx_, &from.nx_,
    reinterpret_cast<char*>(&nh_) -
    reinterpret_cast<char*>(&nx_) + sizeof(nh_));
  // @@protoc_insertion_point(copy_constructor:tagPBRect)
}

void tagPBRect::SharedCtor() {
  ::memset(&nx_, 0, reinterpret_cast<char*>(&nh_) -
    reinterpret_cast<char*>(&nx_) + sizeof(nh_));
  _cached_size_ = 0;
}

tagPBRect::~tagPBRect() {
  // @@protoc_insertion_point(destructor:tagPBRect)
  SharedDtor();
}

void tagPBRect::SharedDtor() {
}

void tagPBRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBRect::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[10].descriptor;
}

const tagPBRect& tagPBRect::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBRect* tagPBRect::New(::google::protobuf::Arena* arena) const {
  tagPBRect* n = new tagPBRect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBRect::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBRect)
  ::memset(&nx_, 0, reinterpret_cast<char*>(&nh_) -
    reinterpret_cast<char*>(&nx_) + sizeof(nh_));
}

bool tagPBRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nX = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nY = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ny_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nW = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nH = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nh_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBRect)
  return false;
#undef DO_
}

void tagPBRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBRect)
  // int32 nX = 1;
  if (this->nx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nx(), output);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ny(), output);
  }

  // int32 nW = 3;
  if (this->nw() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nw(), output);
  }

  // int32 nH = 4;
  if (this->nh() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->nh(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBRect)
}

::google::protobuf::uint8* tagPBRect::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBRect)
  // int32 nX = 1;
  if (this->nx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->nx(), target);
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ny(), target);
  }

  // int32 nW = 3;
  if (this->nw() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nw(), target);
  }

  // int32 nH = 4;
  if (this->nh() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->nh(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBRect)
  return target;
}

size_t tagPBRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBRect)
  size_t total_size = 0;

  // int32 nX = 1;
  if (this->nx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nx());
  }

  // int32 nY = 2;
  if (this->ny() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ny());
  }

  // int32 nW = 3;
  if (this->nw() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nw());
  }

  // int32 nH = 4;
  if (this->nh() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nh());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBRect::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBRect)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBRect* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBRect>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBRect)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBRect)
    MergeFrom(*source);
  }
}

void tagPBRect::MergeFrom(const tagPBRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.nx() != 0) {
    set_nx(from.nx());
  }
  if (from.ny() != 0) {
    set_ny(from.ny());
  }
  if (from.nw() != 0) {
    set_nw(from.nw());
  }
  if (from.nh() != 0) {
    set_nh(from.nh());
  }
}

void tagPBRect::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBRect::CopyFrom(const tagPBRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBRect::IsInitialized() const {
  return true;
}

void tagPBRect::Swap(tagPBRect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBRect::InternalSwap(tagPBRect* other) {
  std::swap(nx_, other->nx_);
  std::swap(ny_, other->ny_);
  std::swap(nw_, other->nw_);
  std::swap(nh_, other->nh_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBRect::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[10];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBRect

// int32 nX = 1;
void tagPBRect::clear_nx() {
  nx_ = 0;
}
::google::protobuf::int32 tagPBRect::nx() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nX)
  return nx_;
}
void tagPBRect::set_nx(::google::protobuf::int32 value) {
  
  nx_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nX)
}

// int32 nY = 2;
void tagPBRect::clear_ny() {
  ny_ = 0;
}
::google::protobuf::int32 tagPBRect::ny() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nY)
  return ny_;
}
void tagPBRect::set_ny(::google::protobuf::int32 value) {
  
  ny_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nY)
}

// int32 nW = 3;
void tagPBRect::clear_nw() {
  nw_ = 0;
}
::google::protobuf::int32 tagPBRect::nw() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nW)
  return nw_;
}
void tagPBRect::set_nw(::google::protobuf::int32 value) {
  
  nw_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nW)
}

// int32 nH = 4;
void tagPBRect::clear_nh() {
  nh_ = 0;
}
::google::protobuf::int32 tagPBRect::nh() const {
  // @@protoc_insertion_point(field_get:tagPBRect.nH)
  return nh_;
}
void tagPBRect::set_nh(::google::protobuf::int32 value) {
  
  nh_ = value;
  // @@protoc_insertion_point(field_set:tagPBRect.nH)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBTemplates::kStPBTemplatesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBTemplates::tagPBTemplates()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBTemplates)
}
tagPBTemplates::tagPBTemplates(const tagPBTemplates& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      stpbtemplates_(from.stpbtemplates_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tagPBTemplates)
}

void tagPBTemplates::SharedCtor() {
  _cached_size_ = 0;
}

tagPBTemplates::~tagPBTemplates() {
  // @@protoc_insertion_point(destructor:tagPBTemplates)
  SharedDtor();
}

void tagPBTemplates::SharedDtor() {
}

void tagPBTemplates::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBTemplates::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[11].descriptor;
}

const tagPBTemplates& tagPBTemplates::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBTemplates* tagPBTemplates::New(::google::protobuf::Arena* arena) const {
  tagPBTemplates* n = new tagPBTemplates;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBTemplates::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBTemplates)
  stpbtemplates_.Clear();
}

bool tagPBTemplates::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBTemplates)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .tagPBTemplate stPBTemplates = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_stpbtemplates()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBTemplates)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBTemplates)
  return false;
#undef DO_
}

void tagPBTemplates::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBTemplates)
  // repeated .tagPBTemplate stPBTemplates = 1;
  for (unsigned int i = 0, n = this->stpbtemplates_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stpbtemplates(i), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBTemplates)
}

::google::protobuf::uint8* tagPBTemplates::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBTemplates)
  // repeated .tagPBTemplate stPBTemplates = 1;
  for (unsigned int i = 0, n = this->stpbtemplates_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->stpbtemplates(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBTemplates)
  return target;
}

size_t tagPBTemplates::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBTemplates)
  size_t total_size = 0;

  // repeated .tagPBTemplate stPBTemplates = 1;
  {
    unsigned int count = this->stpbtemplates_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stpbtemplates(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBTemplates::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBTemplates)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBTemplates* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBTemplates>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBTemplates)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBTemplates)
    MergeFrom(*source);
  }
}

void tagPBTemplates::MergeFrom(const tagPBTemplates& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBTemplates)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  stpbtemplates_.MergeFrom(from.stpbtemplates_);
}

void tagPBTemplates::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBTemplates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBTemplates::CopyFrom(const tagPBTemplates& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBTemplates)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBTemplates::IsInitialized() const {
  return true;
}

void tagPBTemplates::Swap(tagPBTemplates* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBTemplates::InternalSwap(tagPBTemplates* other) {
  stpbtemplates_.UnsafeArenaSwap(&other->stpbtemplates_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBTemplates::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[11];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBTemplates

// repeated .tagPBTemplate stPBTemplates = 1;
int tagPBTemplates::stpbtemplates_size() const {
  return stpbtemplates_.size();
}
void tagPBTemplates::clear_stpbtemplates() {
  stpbtemplates_.Clear();
}
const ::tagPBTemplate& tagPBTemplates::stpbtemplates(int index) const {
  // @@protoc_insertion_point(field_get:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Get(index);
}
::tagPBTemplate* tagPBTemplates::mutable_stpbtemplates(int index) {
  // @@protoc_insertion_point(field_mutable:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Mutable(index);
}
::tagPBTemplate* tagPBTemplates::add_stpbtemplates() {
  // @@protoc_insertion_point(field_add:tagPBTemplates.stPBTemplates)
  return stpbtemplates_.Add();
}
::google::protobuf::RepeatedPtrField< ::tagPBTemplate >*
tagPBTemplates::mutable_stpbtemplates() {
  // @@protoc_insertion_point(field_mutable_list:tagPBTemplates.stPBTemplates)
  return &stpbtemplates_;
}
const ::google::protobuf::RepeatedPtrField< ::tagPBTemplate >&
tagPBTemplates::stpbtemplates() const {
  // @@protoc_insertion_point(field_list:tagPBTemplates.stPBTemplates)
  return stpbtemplates_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBTemplate::kStrPathFieldNumber;
const int tagPBTemplate::kStrNameFieldNumber;
const int tagPBTemplate::kStPBRectFieldNumber;
const int tagPBTemplate::kFThresholdFieldNumber;
const int tagPBTemplate::kNClassIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBTemplate::tagPBTemplate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBTemplate)
}
tagPBTemplate::tagPBTemplate(const tagPBTemplate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  strpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strpath().size() > 0) {
    strpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpath_);
  }
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.strname().size() > 0) {
    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.has_stpbrect()) {
    stpbrect_ = new ::tagPBRect(*from.stpbrect_);
  } else {
    stpbrect_ = NULL;
  }
  ::memcpy(&fthreshold_, &from.fthreshold_,
    reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&fthreshold_) + sizeof(nclassid_));
  // @@protoc_insertion_point(copy_constructor:tagPBTemplate)
}

void tagPBTemplate::SharedCtor() {
  strpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&stpbrect_, 0, reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&stpbrect_) + sizeof(nclassid_));
  _cached_size_ = 0;
}

tagPBTemplate::~tagPBTemplate() {
  // @@protoc_insertion_point(destructor:tagPBTemplate)
  SharedDtor();
}

void tagPBTemplate::SharedDtor() {
  strpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete stpbrect_;
  }
}

void tagPBTemplate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBTemplate::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[12].descriptor;
}

const tagPBTemplate& tagPBTemplate::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBTemplate* tagPBTemplate::New(::google::protobuf::Arena* arena) const {
  tagPBTemplate* n = new tagPBTemplate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBTemplate::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBTemplate)
  strpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) {
    delete stpbrect_;
  }
  stpbrect_ = NULL;
  ::memset(&fthreshold_, 0, reinterpret_cast<char*>(&nclassid_) -
    reinterpret_cast<char*>(&fthreshold_) + sizeof(nclassid_));
}

bool tagPBTemplate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBTemplate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string strPath = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strpath().data(), this->strpath().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBTemplate.strPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string strName = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->strname().data(), this->strname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "tagPBTemplate.strName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .tagPBRect stPBRect = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpbrect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float fThreshold = 4;
      case 4: {
        if (tag == 37u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fthreshold_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 nClassID = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nclassid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBTemplate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBTemplate)
  return false;
#undef DO_
}

void tagPBTemplate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBTemplate)
  // string strPath = 1;
  if (this->strpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBTemplate.strPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strpath(), output);
  }

  // string strName = 2;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBTemplate.strName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->strname(), output);
  }

  // .tagPBRect stPBRect = 3;
  if (this->has_stpbrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->stpbrect_, output);
  }

  // float fThreshold = 4;
  if (this->fthreshold() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fthreshold(), output);
  }

  // int32 nClassID = 5;
  if (this->nclassid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nclassid(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBTemplate)
}

::google::protobuf::uint8* tagPBTemplate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBTemplate)
  // string strPath = 1;
  if (this->strpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strpath().data(), this->strpath().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBTemplate.strPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strpath(), target);
  }

  // string strName = 2;
  if (this->strname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->strname().data(), this->strname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "tagPBTemplate.strName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->strname(), target);
  }

  // .tagPBRect stPBRect = 3;
  if (this->has_stpbrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->stpbrect_, false, target);
  }

  // float fThreshold = 4;
  if (this->fthreshold() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->fthreshold(), target);
  }

  // int32 nClassID = 5;
  if (this->nclassid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nclassid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBTemplate)
  return target;
}

size_t tagPBTemplate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBTemplate)
  size_t total_size = 0;

  // string strPath = 1;
  if (this->strpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strpath());
  }

  // string strName = 2;
  if (this->strname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->strname());
  }

  // .tagPBRect stPBRect = 3;
  if (this->has_stpbrect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->stpbrect_);
  }

  // float fThreshold = 4;
  if (this->fthreshold() != 0) {
    total_size += 1 + 4;
  }

  // int32 nClassID = 5;
  if (this->nclassid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->nclassid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBTemplate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBTemplate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBTemplate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBTemplate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBTemplate)
    MergeFrom(*source);
  }
}

void tagPBTemplate::MergeFrom(const tagPBTemplate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBTemplate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.strpath().size() > 0) {

    strpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strpath_);
  }
  if (from.strname().size() > 0) {

    strname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strname_);
  }
  if (from.has_stpbrect()) {
    mutable_stpbrect()->::tagPBRect::MergeFrom(from.stpbrect());
  }
  if (from.fthreshold() != 0) {
    set_fthreshold(from.fthreshold());
  }
  if (from.nclassid() != 0) {
    set_nclassid(from.nclassid());
  }
}

void tagPBTemplate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBTemplate::CopyFrom(const tagPBTemplate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBTemplate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBTemplate::IsInitialized() const {
  return true;
}

void tagPBTemplate::Swap(tagPBTemplate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBTemplate::InternalSwap(tagPBTemplate* other) {
  strpath_.Swap(&other->strpath_);
  strname_.Swap(&other->strname_);
  std::swap(stpbrect_, other->stpbrect_);
  std::swap(fthreshold_, other->fthreshold_);
  std::swap(nclassid_, other->nclassid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBTemplate::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[12];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBTemplate

// string strPath = 1;
void tagPBTemplate::clear_strpath() {
  strpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBTemplate::strpath() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.strPath)
  return strpath_.GetNoArena();
}
void tagPBTemplate::set_strpath(const ::std::string& value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBTemplate.strPath)
}
#if LANG_CXX11
void tagPBTemplate::set_strpath(::std::string&& value) {
  
  strpath_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBTemplate.strPath)
}
#endif
void tagPBTemplate::set_strpath(const char* value) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBTemplate.strPath)
}
void tagPBTemplate::set_strpath(const char* value, size_t size) {
  
  strpath_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBTemplate.strPath)
}
::std::string* tagPBTemplate::mutable_strpath() {
  
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.strPath)
  return strpath_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBTemplate::release_strpath() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.strPath)
  
  return strpath_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBTemplate::set_allocated_strpath(::std::string* strpath) {
  if (strpath != NULL) {
    
  } else {
    
  }
  strpath_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strpath);
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.strPath)
}

// string strName = 2;
void tagPBTemplate::clear_strname() {
  strname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& tagPBTemplate::strname() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.strName)
  return strname_.GetNoArena();
}
void tagPBTemplate::set_strname(const ::std::string& value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:tagPBTemplate.strName)
}
#if LANG_CXX11
void tagPBTemplate::set_strname(::std::string&& value) {
  
  strname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:tagPBTemplate.strName)
}
#endif
void tagPBTemplate::set_strname(const char* value) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:tagPBTemplate.strName)
}
void tagPBTemplate::set_strname(const char* value, size_t size) {
  
  strname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:tagPBTemplate.strName)
}
::std::string* tagPBTemplate::mutable_strname() {
  
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.strName)
  return strname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* tagPBTemplate::release_strname() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.strName)
  
  return strname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void tagPBTemplate::set_allocated_strname(::std::string* strname) {
  if (strname != NULL) {
    
  } else {
    
  }
  strname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strname);
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.strName)
}

// .tagPBRect stPBRect = 3;
bool tagPBTemplate::has_stpbrect() const {
  return this != internal_default_instance() && stpbrect_ != NULL;
}
void tagPBTemplate::clear_stpbrect() {
  if (GetArenaNoVirtual() == NULL && stpbrect_ != NULL) delete stpbrect_;
  stpbrect_ = NULL;
}
const ::tagPBRect& tagPBTemplate::stpbrect() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.stPBRect)
  return stpbrect_ != NULL ? *stpbrect_
                         : *::tagPBRect::internal_default_instance();
}
::tagPBRect* tagPBTemplate::mutable_stpbrect() {
  
  if (stpbrect_ == NULL) {
    stpbrect_ = new ::tagPBRect;
  }
  // @@protoc_insertion_point(field_mutable:tagPBTemplate.stPBRect)
  return stpbrect_;
}
::tagPBRect* tagPBTemplate::release_stpbrect() {
  // @@protoc_insertion_point(field_release:tagPBTemplate.stPBRect)
  
  ::tagPBRect* temp = stpbrect_;
  stpbrect_ = NULL;
  return temp;
}
void tagPBTemplate::set_allocated_stpbrect(::tagPBRect* stpbrect) {
  delete stpbrect_;
  stpbrect_ = stpbrect;
  if (stpbrect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:tagPBTemplate.stPBRect)
}

// float fThreshold = 4;
void tagPBTemplate::clear_fthreshold() {
  fthreshold_ = 0;
}
float tagPBTemplate::fthreshold() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.fThreshold)
  return fthreshold_;
}
void tagPBTemplate::set_fthreshold(float value) {
  
  fthreshold_ = value;
  // @@protoc_insertion_point(field_set:tagPBTemplate.fThreshold)
}

// int32 nClassID = 5;
void tagPBTemplate::clear_nclassid() {
  nclassid_ = 0;
}
::google::protobuf::int32 tagPBTemplate::nclassid() const {
  // @@protoc_insertion_point(field_get:tagPBTemplate.nClassID)
  return nclassid_;
}
void tagPBTemplate::set_nclassid(::google::protobuf::int32 value) {
  
  nclassid_ = value;
  // @@protoc_insertion_point(field_set:tagPBTemplate.nClassID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int tagPBTaskFlagMap::kNTaskIDFieldNumber;
const int tagPBTaskFlagMap::kBFlagFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

tagPBTaskFlagMap::tagPBTaskFlagMap()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameregProtoc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:tagPBTaskFlagMap)
}
tagPBTaskFlagMap::tagPBTaskFlagMap(const tagPBTaskFlagMap& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ntaskid_, &from.ntaskid_,
    reinterpret_cast<char*>(&bflag_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(bflag_));
  // @@protoc_insertion_point(copy_constructor:tagPBTaskFlagMap)
}

void tagPBTaskFlagMap::SharedCtor() {
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&bflag_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(bflag_));
  _cached_size_ = 0;
}

tagPBTaskFlagMap::~tagPBTaskFlagMap() {
  // @@protoc_insertion_point(destructor:tagPBTaskFlagMap)
  SharedDtor();
}

void tagPBTaskFlagMap::SharedDtor() {
}

void tagPBTaskFlagMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* tagPBTaskFlagMap::descriptor() {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[13].descriptor;
}

const tagPBTaskFlagMap& tagPBTaskFlagMap::default_instance() {
  protobuf_gameregProtoc_2eproto::InitDefaults();
  return *internal_default_instance();
}

tagPBTaskFlagMap* tagPBTaskFlagMap::New(::google::protobuf::Arena* arena) const {
  tagPBTaskFlagMap* n = new tagPBTaskFlagMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void tagPBTaskFlagMap::Clear() {
// @@protoc_insertion_point(message_clear_start:tagPBTaskFlagMap)
  ::memset(&ntaskid_, 0, reinterpret_cast<char*>(&bflag_) -
    reinterpret_cast<char*>(&ntaskid_) + sizeof(bflag_));
}

bool tagPBTaskFlagMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:tagPBTaskFlagMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 nTaskID = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntaskid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool bFlag = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:tagPBTaskFlagMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:tagPBTaskFlagMap)
  return false;
#undef DO_
}

void tagPBTaskFlagMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:tagPBTaskFlagMap)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntaskid(), output);
  }

  // bool bFlag = 2;
  if (this->bflag() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->bflag(), output);
  }

  // @@protoc_insertion_point(serialize_end:tagPBTaskFlagMap)
}

::google::protobuf::uint8* tagPBTaskFlagMap::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:tagPBTaskFlagMap)
  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntaskid(), target);
  }

  // bool bFlag = 2;
  if (this->bflag() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->bflag(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:tagPBTaskFlagMap)
  return target;
}

size_t tagPBTaskFlagMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tagPBTaskFlagMap)
  size_t total_size = 0;

  // int32 nTaskID = 1;
  if (this->ntaskid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->ntaskid());
  }

  // bool bFlag = 2;
  if (this->bflag() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void tagPBTaskFlagMap::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:tagPBTaskFlagMap)
  GOOGLE_DCHECK_NE(&from, this);
  const tagPBTaskFlagMap* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const tagPBTaskFlagMap>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:tagPBTaskFlagMap)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:tagPBTaskFlagMap)
    MergeFrom(*source);
  }
}

void tagPBTaskFlagMap::MergeFrom(const tagPBTaskFlagMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tagPBTaskFlagMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ntaskid() != 0) {
    set_ntaskid(from.ntaskid());
  }
  if (from.bflag() != 0) {
    set_bflag(from.bflag());
  }
}

void tagPBTaskFlagMap::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:tagPBTaskFlagMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void tagPBTaskFlagMap::CopyFrom(const tagPBTaskFlagMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tagPBTaskFlagMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool tagPBTaskFlagMap::IsInitialized() const {
  return true;
}

void tagPBTaskFlagMap::Swap(tagPBTaskFlagMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void tagPBTaskFlagMap::InternalSwap(tagPBTaskFlagMap* other) {
  std::swap(ntaskid_, other->ntaskid_);
  std::swap(bflag_, other->bflag_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata tagPBTaskFlagMap::GetMetadata() const {
  protobuf_gameregProtoc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameregProtoc_2eproto::file_level_metadata[13];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// tagPBTaskFlagMap

// int32 nTaskID = 1;
void tagPBTaskFlagMap::clear_ntaskid() {
  ntaskid_ = 0;
}
::google::protobuf::int32 tagPBTaskFlagMap::ntaskid() const {
  // @@protoc_insertion_point(field_get:tagPBTaskFlagMap.nTaskID)
  return ntaskid_;
}
void tagPBTaskFlagMap::set_ntaskid(::google::protobuf::int32 value) {
  
  ntaskid_ = value;
  // @@protoc_insertion_point(field_set:tagPBTaskFlagMap.nTaskID)
}

// bool bFlag = 2;
void tagPBTaskFlagMap::clear_bflag() {
  bflag_ = false;
}
bool tagPBTaskFlagMap::bflag() const {
  // @@protoc_insertion_point(field_get:tagPBTaskFlagMap.bFlag)
  return bflag_;
}
void tagPBTaskFlagMap::set_bflag(bool value) {
  
  bflag_ = value;
  // @@protoc_insertion_point(field_set:tagPBTaskFlagMap.bFlag)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
