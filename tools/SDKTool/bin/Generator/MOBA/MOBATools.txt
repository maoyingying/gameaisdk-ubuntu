#!/usr/bin/env python
# coding: utf-8

import cv2
import struct

from .MOBADefine import *


def GetTargetCenter(targetLocation, imgHeight, imgWidth,
                    noiseRegion=None, kenerSize=4):
    targetLocationFilterCenter = None

    if not targetLocation:
        return targetLocationFilterCenter

    targetLocationFilter = dict()
    targetLocationFilter['x'] = []
    targetLocationFilter['y'] = []

    for n in range(len(targetLocation)):
        filterFlag = 0
        if noiseRegion is not None:
            for nn in range(len(noiseRegion)):
                if noiseRegion[nn][0] + noiseRegion[nn][2] \
                        > targetLocation[n]['x'] > noiseRegion[nn][0] \
                        and noiseRegion[nn][1] + noiseRegion[nn][3] \
                        > targetLocation[n]['y'] > noiseRegion[nn][1]:
                    filterFlag = 1
                    break

        if filterFlag == 0:
            targetLocationFilter['x'].append(targetLocation[n]['x'])
            targetLocationFilter['y'].append(targetLocation[n]['y'])

    mapMaskTer = np.zeros([imgHeight, imgWidth])
    for n in range(len(targetLocationFilter['y'])):
        mapMaskTer[targetLocationFilter['y'][n], targetLocationFilter['x'][n]] = 1

    mapMaskTer = (mapMaskTer * 255).astype(np.uint8)
    kernel = np.ones((kenerSize, kenerSize), np.uint8)
    mapMask = cv2.dilate(mapMaskTer, kernel)

    _, mapMask = cv2.threshold(mapMask, 100, 255, cv2.THRESH_BINARY)

    targetLocCenter = GetLocLargest(mapMask)

    if not targetLocCenter:
        return targetLocationFilterCenter

    if len(targetLocCenter['x']) > 0:
        targetLocationFilterCenter = [int(targetLocCenter['x'][0]), int(targetLocCenter['y'][0])]

    return targetLocationFilterCenter


def GetLocLargest(imgBinary):
    if imgBinary.max() == 0:
        return None

    (_, imgCou, _) = cv2.findContours(imgBinary, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    imgLoc = dict()
    imgLoc['x'] = []
    imgLoc['y'] = []
    imgLoc['angle'] = []
    if imgCou is not None:
        if len(imgCou) > 0:
            imgCouTer = sorted(imgCou, key=cv2.contourArea, reverse=True)[0]
            rect = cv2.minAreaRect(imgCouTer)
            imgLoc['x'].append(rect[0][0])
            imgLoc['y'].append(rect[0][1])
            imgLoc['angle'].append(rect[2])
    return imgLoc


def GetMyselfIndex(results):
    index = 0
    for result in results:
        flag = result['flag']
        if flag:
            x = result['boxes'][0]['x']
            y = result['boxes'][0]['y']
            w = result['boxes'][0]['w']
            h = result['boxes'][0]['h']
            return index, x, y, w, h
        index += 1

    return None


def UpdateTaskFlag(disableTask, enableTask):
    taskFlagDict = dict()
    for taskID in disableTask:
        taskFlagDict[taskID] = False

    for taskID in enableTask:
        taskFlagDict[taskID] = True

    return taskFlagDict


def GetDisWith2Point(point1, point2):
    '''
    计算点point1和点point2之间的距离
    :param point1:
    :param point2:
    :return: 距离值
    '''
    sPos = np.array(point1)
    tPos = np.array(point2)

    if np.array_equal(sPos, tPos):
        return 0.0

    tVector = tPos - sPos
    return np.linalg.norm(tVector)


def GetDirectionWith2Point(point1, point2):
    '''
    计算点point1到点point2的方向
    :param point1:
    :param point2:
    :return: 方向角度值0~360
    '''
    sPos = np.array(point1)
    tPos = np.array(point2)

    if np.array_equal(sPos, tPos):
        return 0.0

    tVector = tPos - sPos
    dis = np.linalg.norm(tVector)

    dirVector = np.array([0, -1])
    angle = np.arccos(dirVector.dot(tVector) / dis)
    if tVector[0] < 0:
        angle = 2 * np.pi - angle
    angle = angle * 360 / 2 / np.pi
    return angle


def GetMeanPointFromList(pointList):
    pointNum = len(pointList)
    if pointNum == 0:
        return None

    retX = 0
    retY = 0
    for point in pointList:
        retX += point[0]
        retY += point[1]

    retX = int(retX / pointNum)
    retY = int(retY / pointNum)

    return np.array((retX, retY))


def GetROIPoint(result):
    x = result['ROI']['x']
    y = result['ROI']['y']
    w = result['ROI']['w']
    h = result['ROI']['h']
    point = (int(x + w / 2), int(y + h / 2))
    return point


def GetBoxPoint(result):
    x = result['boxes'][0]['x']
    y = result['boxes'][0]['y']
    w = result['boxes'][0]['w']
    h = result['boxes'][0]['h']
    point = (int(x + w / 2), int(y + h / 2))
    return point


def LoadMap(mapFilePath):
    '''
    从地图数据文件加载地图
    :param mapFilePath: 地图数据文件路径
    :return: 地图数据
    '''
    file = open(mapFilePath, 'rb')
    filebin = file.read()
    file.close()

    width, height = struct.unpack('2I', filebin[0:8])
    nparr = np.fromstring(filebin[8:], np.uint8)

    for i in range(0, width * height):
        if nparr[i] == MAP_GROUND:
            nparr[i] = 255

    mapdata = np.reshape(nparr, (height, width))
    return mapdata
