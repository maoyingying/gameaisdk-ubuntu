#!/usr/bin/env python
# coding: utf-8

import random

from aimodel.AIModel import AIModel
from .XXXEnv import *


class XXXAI(AIModel):
    # 构造函数
    def __init__(self):
        AIModel.__init__(self)

    # 初始化函数，参数agentEnv为 Env插件类实例对象
    def Init(self, agentEnv):
        self.agentEnv = agentEnv
        return True

    # 退出函数
    def Finish(self):
        pass

    # 检测到每一局游戏开始后，AI算法进行的操作可以在此处实现，如一些变量的重置等
    def OnEpisodeStart(self):
        self.buyEqptTimestamp = time.time()

    # 检测到每一局游戏结束后，AI算法进行的操作可以在此处实现
    def OnEpisodeOver(self):
        self.agentEnv.Reset()

    # 当加载进入游戏场景时，需要进行的操作可以在此处实现
    def OnEnterEpisode(self):
        pass

    # 当离开退出游戏场景时，需要进行的操作可以在此处实现
    def OnLeaveEpisode(self):
        pass

    # 训练AI操作的每一个step实现,通常强化学习算法需要实现此接口,基于规则的AI无需训练,不需要实现此接口
    def TrainOneStep(self):
        pass

    # AI测试的每一个step实现，通常实现为agentEnv获取游戏状态数据，然后根据AI算法输出对应的游戏操作
    def TestOneStep(self):
        image = self.agentEnv.GetState()
        if self.agentEnv.gameStep == GAME_STEP_RUNNING:
            self._ClickUI()
            self._Moving()
            self._Fighting()

    def _ClickUI(self):
        if self.agentEnv.selfAttr.isDead:
            return

        now = time.time()
        if now - self.buyEqptTimestamp > BUY_EQUIPMENT_INTERVAL:  # 每隔固定时间点击买装备，技能升级
            self.buyEqptTimestamp = now
            self.agentEnv.actionXXX.DoBuyEqpt1(self.agentEnv.frameSeq)
            self.agentEnv.actionXXX.DoUpgradeSkill3(self.agentEnv.frameSeq)
            self.agentEnv.actionXXX.DoUpgradeSkill2(self.agentEnv.frameSeq)
            self.agentEnv.actionXXX.DoUpgradeSkill1(self.agentEnv.frameSeq)
        else:  # 其他UI点击逻辑
            if self.agentEnv.uiInfo.recoverBloodEnable and self.agentEnv.selfAttr.blood < 80:
                self.agentEnv.actionXXX.DoBottom2Btn(self.agentEnv.frameSeq)
            if self.agentEnv.uiInfo.playerMagic and self.agentEnv.selfAttr.blood < 80:
                self.agentEnv.actionXXX.DoBottom3Btn(self.agentEnv.frameSeq)

    def _Moving(self):
        if self.agentEnv.selfAttr.isDead:
            return

        # 前10秒，摇杆固定朝着35度方向移动，走出泉水
        now = time.time()
        if now - self.agentEnv.beginTimestamp < 10:
            self.agentEnv.actionXXX.Move(35)
            return

        # 使用小地图寻路走到中路外塔
        self.agentEnv.MiniMapMoving(G_FAR_MID_TOWER_POINT, 5)

    def _Fighting(self):
        if self.agentEnv.selfAttr.isDead:
            return

        if self.agentEnv.frameSeq % 5 == 0:
            # 如果存在攻击目标，使用随机决策输出一个动作，调用DoAction
            if self.agentEnv.attackTarget.type in [ATTACK_TYPE_HERO, ATTACK_TYPE_TOWER,
                                                   ATTACK_TYPE_SOLDIER]:
                actionSpace = self.agentEnv.GetActionSpace()
                action = np.zeros(actionSpace, np.uint8)
                actionIndex = random.randrange(actionSpace)
                action[actionIndex] = 1
                self.agentEnv.DoAction(action)
            else:  # 如果不存在攻击目标，则点击攻击键，尝试锁定攻击目标
                self.agentEnv.actionXXX.DoAttack(self.agentEnv.frameSeq)
