# 益智图块消除类游戏 Puzzle Block Elimination Game

import random
import numpy as np

from aimodel.AIModel import AIModel
from agentenv.GameEnv import GameEnv


class XXXAI(AIModel):
    # 构造函数
    def __init__(self):
        AIModel.__init__(self)
        self.__state = None
        self.__agentEnv = None

    # 初始化函数，参数agentEnv为Env插件类实例对象
    def Init(self, agentEnv):
        self.__agentEnv = agentEnv
        return True

    # 退出函数
    def Finish(self):
        pass

    # 检测到每一局游戏开始后，AI算法进行的操作可以在此处实现，如一些变量的重置等
    def OnEpisodeStart(self):
        pass

    # 检测到每一局游戏结束后，AI算法进行的操作可以在此处实现
    def OnEpisodeOver(self):
        self.__agentEnv.Reset()

    # 当加载进入游戏场景时，需要进行的操作可以在此处实现
    def OnEnterEpisode(self):
        pass

    # 当离开退出游戏场景时，需要进行的操作可以在此处实现
    def OnLeaveEpisode(self):
        pass

    # 训练AI操作的每一个step实现,通常强化学习算法需要实现此接口,基于规则的AI无需训练,不需要实现此接口
    def TrainOneStep(self):
        state = self.__agentEnv.GetState()

    # AI测试的每一个step实现，通常实现为agentEnv获取游戏状态数据，然后根据AI算法输出对应的游戏操作
    def TestOneStep(self):
        self.__state = self.__agentEnv.GetState()

        if self.__state['scene'] == 'run':
            actions = self._GetPotentialAction()

            action = self._SelectAction(actions)

            self.__agentEnv.DoAction(action)

        return True

    # 获得所有可以执行的消除动作
    def _GetPotentialAction(self):
        if self.__state['grid'] is None:
            return None

        map = self.__state['grid']['map']
        padding = self.__state['grid']['padding']

        actions = list()
        for row in range(padding, map.shape[0] - padding):
            for col in range(padding, map.shape[1] - padding):
                classID = map[row, col, 0]

                if classID == 0:
                    continue

                localMap = map[row - padding:row + padding + 1, col - padding:col + padding + 1, :]

                # 判断是否可以向上滑动
                flag = self._CheckUpAction(localMap, classID)
                if flag is True:
                    action = dict()
                    action['type'] = 'swipe'
                    action['row'] = row - padding
                    action['col'] = col - padding
                    action['frameIndex'] = self.__state['frameIndex']
                    action['direction'] = 'up'
                    actions.append(action)

                # 判断是否可以向右滑动
                localMap = np.rot90(localMap)
                flag = self._CheckUpAction(localMap, classID)
                if flag is True:
                    action = dict()
                    action['type'] = 'swipe'
                    action['row'] = row - padding
                    action['col'] = col - padding
                    action['frameIndex'] = self.__state['frameIndex']
                    action['direction'] = 'right'
                    actions.append(action)

                # 判断是否可以向下滑动
                localMap = np.rot90(localMap)
                flag = self._CheckUpAction(localMap, classID)
                if flag is True:
                    action = dict()
                    action['type'] = 'swipe'
                    action['row'] = row - padding
                    action['col'] = col - padding
                    action['frameIndex'] = self.__state['frameIndex']
                    action['direction'] = 'down'
                    actions.append(action)

                # 判断是否可以向左滑动
                localMap = np.rot90(localMap)
                flag = self._CheckUpAction(localMap, classID)
                if flag is True:
                    action = dict()
                    action['type'] = 'swipe'
                    action['row'] = row - padding
                    action['col'] = col - padding
                    action['frameIndex'] = self.__state['frameIndex']
                    action['direction'] = 'left'
                    actions.append(action)

        return actions

    # 检查是否可以使用向上滑动的动作
    def _CheckUpAction(self, localMap, classID):
        flag = False

        if localMap[2, 3, 0] != 0:
            if localMap[0, 3, 0] == classID and localMap[1, 3, 0] == classID:
                flag = True

            if localMap[2, 1, 0] == classID and localMap[2, 2, 0] == classID:
                flag = True

            if localMap[2, 2, 0] == classID and localMap[2, 4, 0] == classID:
                flag = True

            if localMap[2, 4, 0] == classID and localMap[2, 5, 0] == classID:
                flag = True

        return flag

    # 随机选择一个滑动动作
    def _SelectAction(self, actions):
        if not actions:
            return None

        num = len(actions)
        if num == 1:
            return actions[0]

        idx = np.random.randint(len(actions))

        return actions[idx]
