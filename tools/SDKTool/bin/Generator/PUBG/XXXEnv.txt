
import time
import numpy as np
import cv2

from agentenv.GameEnv import GameEnv
from AgentAPI import AgentAPIMgr
from util import util
from .XXXAction import *

RECOGNIZE_CFG_FILE = 'cfg/task/gameReg/Task.json'
REFER_CFG_FILE = 'cfg/task/gameReg/Refer.json'

TASK_SCENE_INFO = 2
TASK_BUTTON_LI_KAI = 6
TASK_BUTTON_ATTACK = 7
TASK_BUTTON_FLOAT = 11
TASK_STUCK_STATE = 13
TASK_BUTTON_OVER = 20

TASK_JUMP_POS_ID = 31
TASK_CLOSE_MAP_POS_ID = 36

class XXXEnv(GameEnv):

    def __init__(self):
        GameEnv.__init__(self)
        self.__actionWindow = XXXWindow()
        self.__actionCtrl = XXXAction(self.__actionWindow)
        self.__agentAPI = AgentAPIMgr.AgentAPIMgr()

        self.__attackBtnState = False
        self.__leaveBtnState = False
        self.__floatBtnState = False
        self.__overBtnState = False
        self.__stuckState = False
        self.__senceInfo = {}

        self.__btnDetectCount = {}
        self.__btnDetectCount[TASK_BUTTON_LI_KAI] = 0
        self.__btnDetectCount[TASK_BUTTON_ATTACK] = 0
        self.__btnDetectCount[TASK_BUTTON_FLOAT] = 0
        self.__btnDetectCount[TASK_BUTTON_OVER] = 0

        self.__closeBtnTask = False

        self.__bigMapImage = None
        self.__isEpisodeOver = True
        self.__frameIndex = -1

    def Init(self):
        ret = self.__actionCtrl.Initialize()
        if not ret:
            self.logger.error('Action Init Failed')
            return False

        taskCfgFile = util.ConvertToSDKFilePath(RECOGNIZE_CFG_FILE)
        referCfgFile = util.ConvertToSDKFilePath(REFER_CFG_FILE)
        ret = self.__agentAPI.Initialize(taskCfgFile, referCfgFile)
        if not ret:
            self.logger.error('Agent API Init Failed')
            return False

        ret = self.__agentAPI.SendCmd(AgentAPIMgr.MSG_SEND_GROUP_ID, 1)
        if not ret:
            self.logger.error('send message failed')
            return False

        return True

    def Finish(self):
        self.__actionCtrl.Finish()
        self.__agentAPI.Release()

    def DoAction(self, action, *args, **kwargs):
        moveAngle = action.get('MoveAction')
        if moveAngle is not None:
            if moveAngle < 0:
                self.__actionCtrl.MoveFinish(self.__frameIndex)
            else:
                fastMode = action.get('FastMove')
                if fastMode is None or fastMode is True:
                    self.__actionCtrl.Move(moveAngle, self.__frameIndex, True)
                else:
                    self.__actionCtrl.Move(moveAngle, self.__frameIndex, False)
            return

        actionID = action.get('SelfAction')
        if actionID is not None:
            self.__actionCtrl.DoSelfAction(actionID, self.__frameIndex)
            return

        swapID = action.get('SwapAction')
        if swapID is not None:
            swapX = action.get('swapX')
            swapY = action.get('swapY')
            if swapX is not None:
                self.__actionCtrl.DoViewAction(swapID, swapX, 0, self.__frameIndex)
            elif swapY is not None:
                self.__actionCtrl.DoViewAction(swapID, 0, swapY, self.__frameIndex)
            else:
                self.__actionCtrl.DoViewAction(swapID, 0, 0, self.__frameIndex)
            return

    def _CheckBtnState(self, resultDict, btnTaskID):
        btnState = False

        flag = self._GetBtnState(resultDict, btnTaskID)
        if flag is True:
            self.__btnDetectCount[btnTaskID] += 1
            if self.__btnDetectCount[btnTaskID] >= 5:
                btnState = True

            if self.__btnDetectCount[btnTaskID] >= 6:
                self.__btnDetectCount[btnTaskID] = 6
        else:
            self.__btnDetectCount[btnTaskID] -= 1
            if self.__btnDetectCount[btnTaskID] < 0:
                self.__btnDetectCount[btnTaskID] = 0

        return btnState

    def _GetBtnState(self, resultDict, taskID):
        state = False

        regResults = resultDict.get(taskID)
        if regResults is None:
            return state

        for result in regResults:
            if result['flag'] is True:
                state = True
                break

        return state

    def _GetBtnPos(self, resultDict, taskID):
        state = False
        px = -1
        py = -1

        regResults = resultDict.get(taskID)
        if regResults is None:
            return (state, px, py)

        for result in regResults:
            x = result['ROI']['x']
            y = result['ROI']['y']
            w = result['ROI']['w']
            h = result['ROI']['h']

            if x > 0 and y > 0:
                state = True
                px = int(x + w/2)
                py = int(y + h/2)
                break

        return (state, px, py)

    def _GetStuckState(self, resultDict):
        stuckState = False
        regResults = resultDict.get(TASK_STUCK_STATE)
        if regResults is None:
            return stuckState
        
        for result in regResults:
            if result['flag'] is True:
                stuckState = True
                break

        return stuckState

    def _GetSenceInfo(self, resultDict):
        scenceInfo = {}
        oDoorPos = []
        windowPos = []
        enemyPos = []
        housePos = []
        carPos = []

        regResults = resultDict.get(TASK_SCENE_INFO)
        if regResults is None:
            scenceInfo['oDoorPos'] = oDoorPos
            scenceInfo['windowPos'] = windowPos
            scenceInfo['enemyPos'] = enemyPos
            scenceInfo['housePos'] = housePos
            scenceInfo['carPos'] = carPos
            return scenceInfo

        for result in regResults:
            if not result:
                continue
            
            if result['flag'] is False:
                continue

            for item in result['boxes']:
                classInfo = item['classID']
                score = item['score']
                x = item['x']
                y = item['y']
                w = item['w']
                h = item['h']

                if classInfo == 0:  #Door
                    if x < 40 or h < 65:
                        continue
                    oDoorPos.append((x, y, w, h))

                elif classInfo == 1: #Window
                    if x < 40 or h < 65 or w > 600:
                        continue
                    windowPos.append((x, y, w, h))

                elif classInfo == 2: #Enemy
                    if score < 0.55 or w < 40 or h < 40:
                        continue
                    centerX = x + w/2
                    centerY = y + h/2
                    sx = 510
                    ex = 660
                    sy = int(self.__actionWindow.imgHeight/2 + 45)
                    ey = self.__actionWindow.imgHeight
                    if sx < centerX < ex and sy < centerY < ey:
                        continue
                    enemyPos.append((x, y, w, h))
                elif classInfo == 3: #House
                    housePos.append((x, y, w, h))
                elif classInfo == 4: #Car
                    if score < 0.55 or w < 40 or w > 280:
                        continue
                    carPos.append((x, y, w, h))
                else:
                    pass

        scenceInfo['oDoorPos'] = oDoorPos
        scenceInfo['windowPos'] = windowPos
        scenceInfo['enemyPos'] = enemyPos
        scenceInfo['housePos'] = housePos
        scenceInfo['carPos'] = carPos

        return scenceInfo

    def _CheckBtnPos(self, resultDict):
        if self.__actionWindow.IsBtnPosOK() is not True:
            _, self.__actionWindow.attackBtnX, self.__actionWindow.attackBtnY = self._GetBtnPos(resultDict, TASK_BUTTON_ATTACK)
            _, self.__actionWindow.jumpBtnX, self.__actionWindow.jumpBtnY = self._GetBtnPos(resultDict, TASK_JUMP_POS_ID)
            _, self.__actionWindow.leaveBtnX, self.__actionWindow.leaveBtnY = self._GetBtnPos(resultDict, TASK_BUTTON_LI_KAI)
            _, self.__actionWindow.floatBtnX, self.__actionWindow.floatBtnY = self._GetBtnPos(resultDict, TASK_BUTTON_FLOAT)
            _, self.__actionWindow.openMapX, self.__actionWindow.openMapY = True, self.__actionWindow.imgWidth - 80, 80
            _, self.__actionWindow.closeMapX, self.__actionWindow.closeMapY = self._GetBtnPos(resultDict, TASK_CLOSE_MAP_POS_ID)
        elif self.__closeBtnTask is not True:
            taskDict = {}
            taskDict[TASK_JUMP_POS_ID] = False

            self.logger.info('send close button task message')
            ret = self.__agentAPI.SendCmd(AgentAPIMgr.MSG_SEND_TASK_FLAG, taskDict)
            if ret is True:
                self.__closeBtnTask = True
                self.logger.info('Close button task message success')
            else:
                self.logger.error('Close button task message failed')
        else:
            pass

    def GetState(self):
        terminal = False
        gameInfo = None

        while True:
            gameInfo = self.__agentAPI.GetInfo(AgentAPIMgr.GAME_RESULT_INFO)
            if gameInfo is None:
                time.sleep(0.002)
                continue
            

            result = gameInfo['result']
            image = gameInfo['image']
            self.__actionWindow.imgHeight = image.shape[0]
            self.__actionWindow.imgWidth = image.shape[1]

            if result is None:
                time.sleep(0.002)
                continue

            self._CheckBtnPos(result)

            self.__attackBtnState = self._CheckBtnState(result, TASK_BUTTON_ATTACK)
            self.__leaveBtnState = self._CheckBtnState(result, TASK_BUTTON_LI_KAI)
            self.__floatBtnState = self._CheckBtnState(result, TASK_BUTTON_FLOAT)
            self.__overBtnState = self._CheckBtnState(result, TASK_BUTTON_OVER)
            self.__stuckState = self._GetStuckState(result)
            self.__senceInfo = self._GetSenceInfo(result)
            self.__frameIndex = gameInfo['frameSeq']
            break

        gameState = {}
        gameState['image'] = image
        gameState['attackBtnState'] = self.__attackBtnState
        gameState['leaveBtnState'] = self.__leaveBtnState
        gameState['floatBtnState'] = self.__floatBtnState
        gameState['overBtnState'] = self.__overBtnState
        gameState['stuckState'] = self.__stuckState
        gameState['senceInfo'] = self.__senceInfo

        if gameState['attackBtnState'] or gameState['leaveBtnState'] or gameState['floatBtnState']:
            self.__isEpisodeOver = False

        if gameState['overBtnState'] is True:
            self.__isEpisodeOver = True

        return gameState

    def Reset(self):
        self.DoAction({'MoveAction': -1})

    def StopAction(self):
        self.DoAction({'MoveAction': -1})

    def RestartAction(self):
        self.DoAction({'MoveAction': -1})

    def IsEpisodeStart(self):
        self.GetState()
        isStart = not self.__isEpisodeOver
        return isStart

    def IsEpisodeOver(self):
        return self.__isEpisodeOver

    def SetBigmapImage(self, bigmapImage):
        self.__bigMapImage = bigmapImage

    def GetImgWidth(self):
        return self.__actionWindow.imgWidth

    def GetImgHeight(self):
        return self.__actionWindow.imgHeight

    def IsMinimapPosOK(self):
        return self.__actionWindow.IsMinimapPosOK()

    def IsBigmapPosOK(self):
        return self.__actionWindow.IsBigmapPosOK()

    def GetMinimapPos(self):
        return (self.__actionWindow.minimapX, self.__actionWindow.minimapY, self.__actionWindow.minimapW, self.__actionWindow.minimapH)

    def GetBigmapPos(self):
        return (self.__actionWindow.bigmapX, self.__actionWindow.bigmapY, self.__actionWindow.bigmapW, self.__actionWindow.bigmapH)
