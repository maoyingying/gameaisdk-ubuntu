#!/usr/bin/env python
# coding: utf-8

import random
import time

from aimodel.AIModel import AIModel
from agentenv.GameEnv import GameEnv

CARD_SHA = ['Sha']
CARD_SHAN = ['Shan']
CARD_YAO = ['Yao']
CARD_JINNANG = ['FDCX', 'FHLY', 'JD', 'XYSX', 'TLQW', 'WXKJ', 'HDWL', 'WZSY']
CARD_EQU = ['YRY', 'BLC', 'SPL', 'YCJ', 'HF']
CARD_CHOUPAI = ['ChouPai']

BUTTON_CONFIRM = ['Confirm']
BUTTON_CANCEL = ['Cancel']

BUTTON_TUOGUAN = ['TuoGuan']

# 动作执行优先级
DECISION_PRIOR = ['ChouPai', 'TuoGuan', 'Confirm', 'JinNang', 'Equ', 'Sha', 'Yao', 'Shan', 'Cancel']

# 可以重复执行的决策
DECISION_REPEAT = ['ChouPai', 'TuoGuan', 'Confirm', 'JinNang', 'Equ', 'Yao', 'Cancel']

# 敌人位置
ENEMY_POSITION = [635, 105]


class XXXAI(AIModel):
    # 构造函数
    def __init__(self):
        AIModel.__init__(self)
        self.gameSceneInfo = None
        self.aiDecision = dict()
        self.aiTarget = dict()

        self.__timeCheckAI = -1
        self.__timeCheckAIWait = 2

        self.actionHistory = list()
        self.actionRemNum = 5
        self.actionHistory = [None] * self.actionRemNum

    # 初始化函数，参数agentEnv为Env插件类实例对象
    def Init(self, agentEnv):
        self.__agentEnv = agentEnv
        return True

    # 退出函数
    def Finish(self):
        pass

    # 检测到每一局游戏开始后，AI算法进行的操作可以在此处实现，如一些变量的重置等
    def OnEpisodeStart(self):
        pass

    # 检测到每一局游戏结束后，AI算法进行的操作可以在此处实现
    def OnEpisodeOver(self):
        self.__agentEnv.Reset()

    # 当加载进入游戏场景时，需要进行的操作可以在此处实现
    def OnEnterEpisode(self):
        pass

    # 当离开退出游戏场景时，需要进行的操作可以在此处实现
    def OnLeaveEpisode(self):
        pass

    # 训练AI操作的每一个step实现,通常强化学习算法需要实现此接口,基于规则的AI无需训练,不需要实现此接口
    def TrainOneStep(self):
        pass

    # AI测试的每一个step实现，通常实现为agentEnv获取游戏状态数据，然后根据AI算法输出对应的游戏操作
    def TestOneStep(self):
        self._UpdateSceneInfo()

        # 判断AI应做的动作
        self._DecisionInAI()

        time.sleep(0.005)

    # 检测卡牌和按钮的状态
    def _CheckAIProcess(self):

        # 检查卡牌
        self._CheckCard()

        # 检查按钮（确定和取消）
        self._CheckButton()

        # 检测托管
        self._CheckTuoguan()

        # 检测抽牌
        self._CheckChouPai()

    # 检查卡牌
    def _CheckCard(self):
        self._CheckDecision('Sha', CARD_SHA, self.cardObject)
        self._CheckDecision('Shan', CARD_SHAN, self.cardObject)
        self._CheckDecision('Yao', CARD_YAO, self.cardObject)
        self._CheckDecision('JinNang', CARD_JINNANG, self.cardObject)
        self._CheckDecision('Equ', CARD_EQU, self.cardObject)

    # 检查按钮状态
    def _CheckButton(self):
        self._CheckDecision('Confirm', BUTTON_CONFIRM, self.buttonObject)
        self._CheckDecision('Cancel', BUTTON_CANCEL, self.buttonObject)

    # 检查托管
    def _CheckTuoguan(self):
        self._CheckDecision('TuoGuan', BUTTON_TUOGUAN, self.tuoguanObject)

    # 检查抽牌
    def _CheckChouPai(self):
        self._CheckDecision('ChouPai', CARD_CHOUPAI, self.choupaiObject)

    # 检查目标决策状态
    def _CheckDecision(self, decision, objectNameTarget, objectList):
        self.aiDecision[decision] = 0
        self.aiTarget[decision] = list()

        if decision == self.actionHistory[-1] and decision not in DECISION_REPEAT:
            return

        interObject = [item for item in objectList if item[0] in objectNameTarget]

        if len(interObject) > 0:
            self.aiDecision[decision] = 1
        else:
            self.aiDecision[decision] = 0

        self.aiTarget[decision] = interObject

    # 更新场景数据信息
    def _UpdateSceneInfo(self):
        self.gameSceneInfo, self.gameImage = self.__agentEnv.GetState()

        if len(self.actionHistory) > self.actionRemNum:
            self.actionHistory.pop(0)

        self.cardObject = self.gameSceneInfo['cardObject']
        self.buttonObject = self.gameSceneInfo['buttonObject']
        self.tuoguanObject = self.gameSceneInfo['tuoguanObject']
        self.choupaiObject = self.gameSceneInfo['choupaiObject']

    # 执行AI动作
    def _ExeActionInAI(self):
        # 判断出牌阶段
        if len(self.buttonObject) == 0 and len(self.tuoguanObject) == 0 and len(self.choupaiObject) == 0:
            return

        # 根据动作优先级执行动作
        for decision in DECISION_PRIOR:
            if self.aiDecision[decision]:
                self.logger.info('click {}'.format(decision))

                randTarget = random.randint(0, len(self.aiTarget[decision]) - 1)
                self.__agentEnv.DoClick(self.aiTarget[decision][randTarget][1],
                                        self.aiTarget[decision][randTarget][2])

                # 点击敌人
                self.__agentEnv.DoClick(ENEMY_POSITION[0],
                                        ENEMY_POSITION[1])

                self.actionHistory.append(decision)
                return

    # 判断AI动作
    def _DecisionInAI(self):
        # 间隔多久做AI动作
        if time.time() - self.__timeCheckAI < self.__timeCheckAIWait:
            return
        self.__timeCheckAI = time.time()

        # 检查AI状态
        self._CheckAIProcess()

        # 执行AI动作
        self._ExeActionInAI()
