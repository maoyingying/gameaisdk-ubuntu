#!/usr/bin/env python
# coding: utf-8

import time
import cv2

from agentenv.GameEnv import GameEnv
from AgentAPI import AgentAPIMgr
from util import util
from .XXXAction import *

#游戏场景识别任务配置文件
TASK_CFG_FILE = 'cfg/task/gameReg/Task.json'
TASK_REFER_CFG_FILE = 'cfg/task/gameReg/Refer.json'

REG_GROUP_ID = 1

BEGIN_TASK_ID = 1 #游戏开始识别任务ID
CARD_TASK_ID = 2 #游戏卡牌识别任务
BUTTON_TASK_ID = 3 #确定和取消的识别任务
TUOGUAN_TASK_ID = 4 #托管的识别任务
CHOUPAI_TASK_ID = 5 #抽牌的识别任务

GAME_PHASE_INVALID = 0
GAME_PHASE_RUN = 1
GAME_PHASE_OVER = 2

class XXXEnv(GameEnv):
    def __init__(self):
        GameEnv.__init__(self)
        self.__frameIndex = -1
        self.__gameImage = None
        self.__gamePhase = GAME_PHASE_INVALID
        self.__isTerminal = True
        self.__actionXXX = XXXAction()  #创建执行动作对象
        self.__agentAPI = AgentAPIMgr.AgentAPIMgr()  #创建场景识别对象
        self.__sceneInfo = {}   #场景信息

    #初始化函数，通常初始化动作模块和识别模块
    def Init(self):
        taskCfgFile = util.ConvertToSDKFilePath(TASK_CFG_FILE)
        referCfgFile = util.ConvertToSDKFilePath(TASK_REFER_CFG_FILE)
        ret = self.__agentAPI.Initialize(taskCfgFile, referCfgFile)
        if not ret:
            self.logger.error('Agent API init failed!')
            return False

        ret = self.__agentAPI.SendCmd(AgentAPIMgr.MSG_SEND_GROUP_ID, REG_GROUP_ID)
        if not ret:
            self.logger.error('Send message failed!')
            return False

        ret = self.__actionXXX.Initialize()
        if not ret:
            self.logger.error('Action init failed!')
            return False

        return True

    #退出函数，是否申请的资源
    def Finish(self):
        self.__agentAPI.Release()
        self.__actionXXX.Finish()

    #输出点击动作
    def DoClick(self, x, y):
        self.__actionXXX.DoClick(x, y, self.__frameIndex)

    #根据Agent API获取游戏状态信息，并返回状态信息
    def GetState(self):
        self._GetGameInfo()
        if self.__gamePhase == GAME_PHASE_OVER:
            self.__isTerminal = True

        return self.__sceneInfo, self.__gameImage

    #重置游戏状态，通常可以在每局游戏结束或开始时调用
    def Reset(self):
        self.__actionXXX.ResetAction(self.__frameIndex)

    #根据识别模块获取的信息，判断游戏对局是否开始
    def IsEpisodeStart(self):
        gameInfo = self._GetGameInfo()
        if self.__gamePhase == GAME_PHASE_RUN:
            self.__isTerminal = False
            return True

        return False

    #根据识别模块获取的信息，判断游戏对局是否结束
    def IsEpisodeOver(self):
        return self.__isTerminal

    #获取taskID对应的识别结果
    def _GetTemplateState(self, resultDict, taskID):
        state = False
        px = -1
        py = -1
        regResults = resultDict.get(taskID)
        if regResults is None:
            return (state, [px, py])

        for item in regResults:
            flag = item['flag']
            if flag:
                x = item['boxes'][0]['x']
                y = item['boxes'][0]['y']
                w = item['boxes'][0]['w']
                h = item['boxes'][0]['h']

                state = True
                px = int(x + w/2)
                py = int(y + h/2)
                break

        return (state, [px, py])

    # 获取taskID对应的识别结果
    def _GetTemplateResult(self, resultDict, taskID):
        state = False
        boxes = list()
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, boxes

        for item in regResults:
            flag = item['flag']
            if flag:
                state = True
                for n in range(len(item['boxes'])):
                    x = item['boxes'][n]['x']
                    y = item['boxes'][n]['y']
                    w = item['boxes'][n]['w']
                    h = item['boxes'][n]['h']

                    px = int(x + w / 2)
                    py = int(y + h / 2)
                    boxes.append([item['boxes'][n]['tmplName'], px, py])

        return state, boxes

    #获取taskID对应的位置坐标
    def _GetBtnPostion(self, resultDict, taskID):
        state = False
        px = -1
        py = -1

        regResults = resultDict.get(taskID)
        if regResults is None:
            return (state, px, py)

        for result in regResults:
            x = result['ROI']['x']
            y = result['ROI']['y']
            w = result['ROI']['w']
            h = result['ROI']['h']

            if x > 0 and y > 0:
                state = True
                px = int(x + w/2)
                py = int(y + h/2)
                break

        return (state, px, py)

    #解析游戏开始、结束等状态
    def _ParseGamePhase(self, resultDict):
        flag, _ = self._GetTemplateState(resultDict, BEGIN_TASK_ID)
        if flag is True:
            self.__gamePhase = GAME_PHASE_RUN
        else:
            self.__gamePhase = GAME_PHASE_OVER

    #解析游戏场景信息
    def _ParseSceneInfo(self, resultDict):
        self.__sceneInfo = {}
        _, self.__sceneInfo['cardObject'] = self._GetTemplateResult(resultDict, CARD_TASK_ID)
        _, self.__sceneInfo['buttonObject'] = self._GetTemplateResult(resultDict, BUTTON_TASK_ID)
        _, self.__sceneInfo['tuoguanObject'] = self._GetTemplateResult(resultDict, TUOGUAN_TASK_ID)
        _, self.__sceneInfo['choupaiObject'] = self._GetTemplateResult(resultDict, CHOUPAI_TASK_ID)

    #根据识别模块API获取识别的的游戏状态信息
    def _GetGameInfo(self):
        gameInfo = None

        while True:
            gameInfo = self.__agentAPI.GetInfo(AgentAPIMgr.GAME_RESULT_INFO)
            if gameInfo is None:
                time.sleep(0.002)
                continue

            result = gameInfo['result']
            if result is None:
                time.sleep(0.002)
                continue

            self.__frameIndex = gameInfo['frameSeq']
            self.__gameImage = gameInfo['image']

            self._ParseGamePhase(result)
            self._ParseSceneInfo(result)
            break

        return gameInfo
