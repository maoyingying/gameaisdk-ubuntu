#!/usr/bin/env python
# coding: utf-8

import time
import os
import sys

import cv2
import logging
import json
import numpy as np

from AgentAPI import AgentAPIMgr
from util import util

from agentenv.GameEnv import GameEnv
from ActionAPI.ActionAPIMgr import ActionAPIMgr

from .XXXAction import *

sys.path.append('API')
sys.path.append('./pyGameReg')

actionMgr = ActionAPIMgr()

TASK_CFG_FILE = 'cfg/task/gameReg/Task.json'
TASK_REFER_CFG_FILE = 'cfg/task/gameReg/Refer.json'

BEGIN_TASK_ID = 1  # 游戏开始识别任务ID
OVER_TASK_ID = 2  # 游戏结束识别任务ID

BLOOD_TASK_ID = 3  # 识别血量
MAP_TASK_ID = 4  # 识别地图（识别自己在大地图中的位置和视角）
HURT_TASK_ID = 5  # 识别受伤方向
DETECTION_TASK_ID = 6  # 识别人物位置和类别
JUMP_TASK_ID = 7  # 识别跳跃按钮
TEAM_TASK_ID = 8  # 识别自己属于的阵营
PICKUP_TASK_ID = 9  # 识别拾取按钮


# Class for fps mode
class XXXEnv(GameEnv):
    def __init__(self):
        GameEnv.__init__(self)

        self.currentBlood = -1  # 当前血量
        self.currentPlayingState = 0  # 是否是在游戏状态
        self.currentEndState = 1  # 是否结束
        self.currentHurtFeature = None  # 受伤方向
        self.currentEnemyInfo = list()  # 目标位置
        self.group = -1  # 阵营编号
        self.currentMapInfo = None  # 地图特征
        self.currentPickupState = 0  # 拾取状态
        self.currentTeamState = None  # 当前所属阵营
        self.currentWalkPathFull = None  # 当前大地图行走路径

        self.terminal = True  # 是否游戏结束
        self.timeStartGame = 0  # 游戏开始时间
        self.checkMapTime = 5  # 检查地图的时间
        self.walkPathFull = None  # 所有地图的行走路径
        self.__mapPath = ''  # 地图放置的文件夹位置

        self.MapInit()  # 地图参数初始化

        self.image = None
        self.frameSeq = 0

        self.__windowXXX = XXXWindow()
        self.actionCtrl = XXXAction(self.__windowXXX)  # 创建执行动作对象

        self.__imageHeight = -1
        self.__imageWidth = -1

        # 定义不同阵营在基准分辨率对应大地图的移动路线,每个阵营可以有多条路径,
        # 每条路径由目标点坐标和目标点对应的视角方向（x,y,viewx,viewY）组成
        self.walkPathFull = dict()
        self.walkPathFull['Team0'] = {}
        self.walkPathFull['Team0']['line0'] = [[76, 200, -44, -29], [32, 171, 15, -58], [47, 113, -14, -58],
                                               [33, 55, 24, -34], [57, 21, 29, 2], [86, 23, 29, 2]]
        self.walkPathFull['Team1'] = {}
        self.walkPathFull['Team1']['line0'] = [[194, 55, 0, 10], [180, 107, 0, 10], [199, 168, -10, 3]]

    def MapInit(self):
        self.mapHeightStandard = 216
        self.mapWidth = 210
        self.mapHeight = 216
        self.mapDetX = None
        self.mapDetY = None
        self.mapDetW = None
        self.mapDetH = None

    def Init(self):
        self.__agentAPI = AgentAPIMgr.AgentAPIMgr()
        taskCfgFile = util.ConvertToSDKFilePath(TASK_CFG_FILE)
        taskReferCfgFile = util.ConvertToSDKFilePath(TASK_REFER_CFG_FILE)
        ret = self.__agentAPI.Initialize(taskCfgFile, referFile=taskReferCfgFile)

        if not ret:
            self.logger.error('Agent API Init Failed')
            return
        ret = self.__agentAPI.SendCmd(AgentAPIMgr.MSG_SEND_GROUP_ID, 1)
        if not ret:
            self.logger.error('send message failed')

        return True

    def Finish(self):
        self.__agentAPI.Release()

    # 解析图像识别结果
    def ParseGameResult(self, resultDict):
        taskList = self.__agentAPI.GetInfo(AgentAPIMgr.CUR_GROUP_TASK_INFO)

        for task in taskList:
            if task['taskID'] == MAP_TASK_ID:
                self.mapParams = task

        _, self.currentBlood = self._GetNumberResult(resultDict, BLOOD_TASK_ID)
        _, self.currentMapInfo = self._GetMapResult(resultDict, MAP_TASK_ID)
        _, self.currentHurtFeature = self._GetMulColorVarResult(resultDict, HURT_TASK_ID)
        _, self.currentEnemyInfo = self._GetDeformObjectResult(resultDict, DETECTION_TASK_ID)
        _, self.currentTeamState = self._GetTeamResult(resultDict, TEAM_TASK_ID)

        _, self.__windowXXX.jumpBtnX, self.__windowXXX.jumpBtnY = self._GetFixObjectResult(resultDict, JUMP_TASK_ID)
        self.currentPickupState, self.__windowXXX.pickUpBtnX, self.__windowXXX.pickUpBtnY = self._GetFixObjectResult(
            resultDict, PICKUP_TASK_ID)

        self.currentPlayingState, _, _ = self._GetFixObjectResult(resultDict, BEGIN_TASK_ID)
        self.currentEndState, _, _ = self._GetFixObjectResult(resultDict, OVER_TASK_ID)

        if self.currentTeamState is not None:
            self.SetGroup(self.currentTeamState)

        if self.currentMapInfo is not None:
            walkPathFullSelect = self.walkPathFull
            walkPathFullSelectScale = self._ScaleWalkPath(walkPathFullSelect)
            self.currentWalkPathFull = walkPathFullSelectScale

    # 根据当前分辨率改变路径
    def _ScaleWalkPath(self, walkPathFullSelect):
        walkPathFullSelectScale = dict()
        for groupKey, groupValue in walkPathFullSelect.items():
            walkPathFullSelectScale[groupKey] = dict()
            for lineKey, lineValue in groupValue.items():
                walkPathFullSelectScale[groupKey][lineKey] = list()
                for n in range(len(lineValue)):
                    lineValueScale = [int(lineValue[n][i] * 1.0 * self.mapHeight / self.mapHeightStandard)
                                      for i in range(len(lineValue[n]))]
                    lineValueScale[0] = lineValueScale[0] + self.mapDetX
                    lineValueScale[1] = lineValueScale[1] + self.mapDetY
                    walkPathFullSelectScale[groupKey][lineKey].append(lineValueScale)
        return walkPathFullSelectScale

    # 获取taskID对应的number识别结果
    def _GetNumberResult(self, resultDict, taskID):
        state = False
        num = -1
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, num

        for item in regResults:
            flag = item['flag']
            if flag:
                state = True
                num = item['num']
                break

        return state, num

    # 获取taskID对应的map识别结果
    def _GetMapResult(self, resultDict, taskID):
        currentMapInfo = None
        state = False
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, currentMapInfo

        for item in regResults:
            state = True
            currentMapInfo = item
            self.mapDetX = item['ROI']['x']
            self.mapDetY = item['ROI']['y']
            self.mapDetW = item['ROI']['w']
            self.mapDetH = item['ROI']['h']

        self.mapWidth = self.mapDetW
        self.mapHeight = self.mapDetH

        return state, currentMapInfo

    # 获取taskID对应的mulcolorvar识别结果
    def _GetMulColorVarResult(self, resultDict, taskID):
        state = False
        varFeature = None
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, num

        for item in regResults:
            flag = item['flag']
            if flag:
                state = True
                varFeature = item['colorMeanVar']
                break

        return state, varFeature

    # 获取taskID对应的deform object检测结果
    def _GetDeformObjectResult(self, resultDict, taskID):
        state = False
        resYolo = [[]]
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, resYolo

        for item in regResults:
            flag = item['flag']
            if flag:
                state = True
                res = list()
                for result in item['boxes']:
                    restmp = list()
                    restmp.append(result['classID'])
                    restmp.append(result['score'])
                    restmp.append(result['x'])
                    restmp.append(result['y'])
                    restmp.append(result['w'])
                    restmp.append(result['h'])
                    res.append(restmp)

                resYolo = list()
                resYolo.append(res)
                break

        return state, resYolo

    # 获取taskID对应的阵营检测结果
    def _GetTeamResult(self, resultDict, taskID):
        state = False
        currentTeamState = None
        regResults = resultDict.get(taskID)
        if regResults is None:
            return state, currentTeamState

        state = True
        if regResults[0]['flag']:
            currentTeamState = dict()
            currentTeamState['Team0'] = 'myclass'
        elif regResults[1]['flag']:
            currentTeamState = dict()
            currentTeamState['Team1'] = 'myclass'
        else:
            currentTeamState = None

        return state, currentTeamState

    # 获取taskID对应的fix object识别结果
    def _GetFixObjectResult(self, resultDict, taskID):
        state = False
        px = -1
        py = -1
        regResults = resultDict.get(taskID)
        if regResults is None:
            return (state, px, py)

        for item in regResults:
            flag = item['flag']
            if flag:
                x = item['boxes'][0]['x']
                y = item['boxes'][0]['y']
                w = item['boxes'][0]['w']
                h = item['boxes'][0]['h']

                state = True
                px = int(x + w / 2)
                py = int(y + h / 2)
                break

        return (state, px, py)

    # 获取taskID对应fix object的检测区域位置坐标
    def _GetBtnPostion(self, resultDict, taskID):
        state = False
        px = -1
        py = -1

        regResults = resultDict.get(taskID)
        if regResults is None:
            return (state, px, py)

        for result in regResults:
            x = result['ROI']['x']
            y = result['ROI']['y']
            w = result['ROI']['w']
            h = result['ROI']['h']

            if x > 0 and y > 0:
                state = True
                px = int(x + w / 2)
                py = int(y + h / 2)
                break

        return (state, px, py)

    # 设置所属阵营
    def SetGroup(self, currentTeamState):
        if currentTeamState is None:
            return

        for keyTer in currentTeamState.keys():
            if currentTeamState[keyTer] is not None:
                if keyTer == 'Team0':
                    self.group = 0
                if keyTer == 'Team1':
                    self.group = 1
                self.timeStartGame = time.time()

    # 得到当前状态
    def GetState(self):

        while True:
            gameResult = self.__agentAPI.GetInfo(AgentAPIMgr.GAME_RESULT_INFO)
            if gameResult is not None:
                break
            else:
                time.sleep(0.002)

        self.frameSeq = gameResult['frameSeq']
        resultDic = gameResult['result']
        self.ParseGameResult(resultDic)

        if self.currentPlayingState == 1:
            self.terminal = False
            self.__recentPlayTime = time.time()

        if self.currentEndState == 1:
            self.terminal = True

        self.image = gameResult['image']
        self.__imageHeight = self.image.shape[0]
        self.__imageWidth = self.image.shape[1]
        self.actionCtrl.imageWidth = self.__imageWidth
        self.actionCtrl.imageHeight = self.__imageHeight

        return self.image, self.frameSeq

    def Reset(self):
        self.__isTrainable = True
        self.__actionMgr.Reset()

    def IsTrainable(self):
        return self.__isTrainable

    def IsEpisodeOver(self):
        return self.terminal

    def IsEpisodeStart(self):
        self.GetState()
        if self.terminal is not True:
            self.actionCtrl.Initialize()
            return True
        else:
            return False
