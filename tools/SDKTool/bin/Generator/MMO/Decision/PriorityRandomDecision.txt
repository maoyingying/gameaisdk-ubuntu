#!/usr/bin/env python
# coding: utf-8

import time

import numpy as np

from .AbstractDecision import AbstractDecision, LOG

ACTION_PERIOD_S = 3
NO_ACTION_TIMEOUT_S = 30
DEFAULT_HANDLER_PRIORITY = 10  # 默认优先级

# 每个Handler的优先级
HANDLERS_PRIORITY = {
    "BattleHandler": 60,
    "GuideHandler": 99,
    "PopupHandler": 10,
    "TaskHandler": 60
}


class PriorityRandomDecision(AbstractDecision):
    '''
    基于优先级的概率随机决策
    '''
    def __init__(self, *args, **kwargs):
        super(PriorityRandomDecision, self).__init__(args, kwargs)
        self.decideTimestamp = time.time()
        self.hasActionTimestamp = time.time()

    def Initialize(self, cfg=None, *args, **kwargs):
        pass

    def Finish(self, *args, **kwargs):
        pass

    def Decide(self, actionsDict):
        # Decide an action every ACTION_PERIOD_S seconds
        now = time.time()
        if now - self.decideTimestamp < ACTION_PERIOD_S:
            return None

        self.decideTimestamp = time.time()

        # Decide a task action randomly based on priority
        ret = self._GetTaskIDRandomlyBasedOnPriority(actionsDict)

        action = actionsDict.get(ret)
        if action is not None:
            self.hasActionTimestamp = now
            LOG.info('Decide to use "{}": {}'.format(ret, action))
        else:
            if now - self.hasActionTimestamp > NO_ACTION_TIMEOUT_S:
                action = self._GetReserveAction()
                LOG.info('Decide to use "ReserveAction": {}'.format(ret, action))

        return action

    def _GetTaskIDRandomlyBasedOnPriority(self, actionsDict):
        '''
        按照Handler的优先级生成概率分布，然后在该概率分布上进行随机采样
        '''
        p = np.array([HANDLERS_PRIORITY.get(handler, DEFAULT_HANDLER_PRIORITY) for handler in actionsDict])
        if p.sum() == 0:
            return None

        p = p / p.sum()
        ret = np.random.choice(list(actionsDict.keys()), p=p.ravel())
        return ret

    def _GetReserveAction(self):
        point = np.array((500, 500))
        action = {
            "actionType": 'click',
            "point": point
        }
        return action
