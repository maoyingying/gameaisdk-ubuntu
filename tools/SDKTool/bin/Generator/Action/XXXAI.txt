import time

from aimodel.AIModel import AIModel
from agentenv.GameEnv import GameEnv

class XXXAI(AIModel):
    #构造函数
    def __init__(self):
        AIModel.__init__(self)
        self.__gameSceneInfo = None
        self.__behaviorList = []

    #初始化函数，参数agentEnv为Env插件类实例对象
    def Init(self, agentEnv):
        self.__agentEnv = agentEnv
        self._InitBehavior()
        return True

    #退出函数
    def Finish(self):
        pass

    #检测到每一局游戏开始后，AI算法进行的操作可以在此处实现，如一些变量的重置等
    def OnEpisodeStart(self):
        pass

    #检测到每一局游戏结束后，AI算法进行的操作可以在此处实现
    def OnEpisodeOver(self):
         self.__agentEnv.Reset()

    #当加载进入游戏场景时，需要进行的操作可以在此处实现
    def OnEnterEpisode(self):
        pass

    #当离开退出游戏场景时，需要进行的操作可以在此处实现
    def OnLeaveEpisode(self):
        pass

    #训练AI操作的每一个step实现,通常强化学习算法需要实现此接口,基于规则的AI无需训练,不需要实现此接口
    def TrainOneStep(self):
        pass

    #AI测试的每一个step实现，通常实现为agentEnv获取游戏状态数据，然后根据AI算法输出对应的游戏操作
    def TestOneStep(self):
        self._UpdateSceneInfo()
        self._UpdateBehavior()
        time.sleep(0.005)

    #更新场景数据信息
    def _UpdateSceneInfo(self):
        self.__gameSceneInfo =  self.__agentEnv.GetState()

    #初始化行为模式列表
    def _InitBehavior(self):
        timeNow = time.time()

        #每1秒调用_CheckSkill，确认技能状态，如果技能OK，调用_SkillBehavior，做技能逻辑处理
        skillBeh = [self._CheckSkill, timeNow, 1, self._SkillBehavior]
        self.__behaviorList.append(skillBeh)

        #每0.5秒调用_CheckEnemy，确认是否有敌人，如果有，调用_EnemyBehavior，做攻击逻辑处理
        enemyBeh = [self._CheckEnemy, timeNow, 0.5, self._EnemyBehavior]
        self.__behaviorList.append(enemyBeh)

    def _UpdateBehavior(self):
        for behavior in self.__behaviorList:
            checkFunc = behavior[0]
            lastCheckTime = behavior[1]
            checkTimer = behavior[2]
            behaviorFunc = behavior[3]

            timeNow = time.time()
            if timeNow - lastCheckTime > checkTimer:
                behavior[1] = timeNow
                if checkFunc() is True:
                    behaviorFunc()

    #检测技能状态
    def _CheckSkill(self):
        return self.__gameSceneInfo['SkillState']

    #执行释放技能动作
    def _SkillBehavior(self):
        self.__agentEnv.DoAction(2)

    #检测敌人状态
    def _CheckEnemy(self):
        return len(self.__gameSceneInfo['SenceObjs']['enemyPos']) > 0

    #执行攻击动作
    def _EnemyBehavior(self):
        self.__agentEnv.DoAction(0)
