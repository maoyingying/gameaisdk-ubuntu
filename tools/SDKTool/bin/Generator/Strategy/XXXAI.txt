#!/usr/bin/env python
# coding: utf-8

import logging

from .Decision.PriorityRandomDecision import PriorityRandomDecision as Decision
from .Handler.HomeHandler import HomeHandler
from .Handler.OutsideHandler import OutsideHandler
from .Handler.GuideHandler import GuideHandler
from .Handler.PopupHandler import PopupHandler
from .Handler.TaskHandler import TaskHandler
from .Handler.PromptHandler import PromptHandler



from aimodel.AIModel import AIModel

LOG = logging.getLogger('agent')

HANDLERS_LIST = [GuideHandler, PromptHandler, TaskHandler, HomeHandler, OutsideHandler, PopupHandler]


class XXXAI(AIModel):
    # 构造函数
    def __init__(self):
        AIModel.__init__(self)
        self.actionsRes = dict()
        self.handlersList = list()
        self.decision = Decision()

    # 初始化函数，参数agentEnv为 Env插件类实例对象
    def Init(self, agentEnv):
        self.agentEnv = agentEnv

        self.decision.Initialize()

        if not self._InitHandlers():
            LOG.error('Handlers init failed')
            return False

        return True

    # 退出函数
    def Finish(self):
        self.decision.Finish()

        for handler in self.handlersList:
            handler.Finish()

        return True

    # 检测到每一局游戏开始后，AI算法进行的操作可以在此处实现，如一些变量的重置等
    def OnEpisodeStart(self):
        pass

    # 检测到每一局游戏结束后，AI算法进行的操作可以在此处实现
    def OnEpisodeOver(self):
        pass

    # 当加载进入游戏场景时，需要进行的操作可以在此处实现
    def OnEnterEpisode(self):
        pass

    # 当离开退出游戏场景时，需要进行的操作可以在此处实现
    def OnLeaveEpisode(self):
        pass

    # 训练AI操作的每一个step实现,通常强化学习算法需要实现此接口,基于规则的AI无需训练,不需要实现此接口
    def TrainOneStep(self):
        pass

    # AI测试的每一个step实现，通常实现为agentEnv获取游戏状态数据，然后根据AI算法输出对应的游戏操作
    def TestOneStep(self):
        resultDict = self.agentEnv.GetState()

        # 清空动作集合
        self.actionsRes.clear()

        # 遍历更新所有handler，并获取每个handler输出的动作放入动作集合
        for handler in self.handlersList:
            handler.Update(resultDict)
            action = handler.GetAction()
            if action is not None:
                self.actionsRes[handler.__class__.__name__] = action

        # 使用decision在动作集合中决策一个动作
        action = self.decision.Decide(self.actionsRes)

        # 执行动作
        self.agentEnv.DoAction(action)

    def _InitHandlers(self):
        for handlerClass in HANDLERS_LIST:
            handler = handlerClass()
            if not handler.Initialize():
                LOG.error('Init Handler({}) failed'.format(handlerClass))
                return False

            self.handlersList.append(handler)

        return True
